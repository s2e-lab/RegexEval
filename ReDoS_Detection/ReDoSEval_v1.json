[
    {
        "expression": "^\\d*\\.?\\d*$",
        "raw_prompt": "Matches any unsigned floating point number/numeric string. Also matches empty strings.",
        "refined_prompt": "Matches any unsigned floating point number/numeric string. Also matches empty strings.\nMatch examples:\n- \"123\"\n- \"3.14159\"\n- \".234\"\nNon-match examples:\n- \"abc\"\n- \"-3.14159\"",
        "matches": [
            "123",
            "3.14159",
            ".234",
            "354.5342",
            "654.435",
            "6254.2345",
            "543",
            "2345",
            "3465",
            "7542",
            "6254.4526",
            "742",
            "7225464526"
        ],
        "non_matches": [
            "abc",
            "-3.14159",
            "3.4.2",
            "b5242g",
            "f45.2g",
            "b254yb54.254yb",
            "2y45.y245",
            "254627g.256",
            "-2.22",
            "3g54",
            "-652.63264",
            "3yb43yb5"
        ],
        "stress_tests": [],
        "serial": 34,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"0\"*10000+\" \""
    },
    {
        "expression": "^\\s*[a-zA-Z,\\s]+\\s*$",
        "raw_prompt": "Any Expression Upper/Lower Case, with commas and space between the text, with any amount of space before or after",
        "refined_prompt": "Match strings that consist of alphabetic characters (both lowercase and uppercase) and commas, allowing for leading and trailing whitespace.\nMatch examples:\n- \"Smith, Ed\"\n- \"Ed Smith\"\n- \"aBcDeFgH\"\nNon-match examples:\n- \"a123\"\n- \"AB5\"",
        "matches": [
            "Smith, Ed",
            "Ed Smith",
            "aBcDeFgH",
            "Michael afds",
            "fnsdkajf",
            "Hello world",
            "asdfafds adsf",
            "afdsffda asddas",
            "fads, asdf",
            "sda, fasf",
            "EFDSF, FSD",
            "fasdf, FDS",
            "FDSfdso JDSF"
        ],
        "non_matches": [
            "a123",
            "AB5",
            "Mr. Ed",
            "vqvq.ecqw",
            "cqrewcr/qtv",
            "fqsdv$vw",
            "@#dfkjnav",
            "2546dgwre",
            "u09nKLJG FSL",
            "1-1-2",
            "34.31",
            "32542"
        ],
        "stress_tests": [],
        "serial": 39,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\" \"+\" \"*5000+\"\u0000\""
    },
    {
        "expression": "^[a-zA-Z0-9]+([a-zA-Z0-9\\-\\.]+)?\\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$",
        "raw_prompt": "Checks domain names. This is an attempt to deal with some of the issues of the other reg ex in not handling leading periods(.) and hypens(-).",
        "refined_prompt": "Used to validate domain names that start with alphanumeric characters, may contain additional alphanumeric characters, hyphens, and periods in the middle (optionally), and end with one of the specified TLDs (case-insensitive).\nMatch examples:\n- \"my.domain.com\"\n- \"regexlib.com\"\n- \"big-reg.com\"\nNon-match examples:\n- \".mydomain.com\"\n- \"regexlib.comm\"",
        "matches": [
            "my.domain.com",
            "regexlib.com",
            "big-reg.com",
            "x7E6vd6bn9lVKV0UvDZjDca14Pxfd42DQ2ue7A3KP.org",
            "F60CAbjTaI28WV4APmn.ORG",
            "4ozPd3VhUT4UbPSxAd74tdnSKlPE.org",
            "br9Gf5bwzVWg3SvjGO2N0A7ZXVf1Ex.net",
            "3MOHUK1ssVZ.ORG",
            "biF.com",
            "Ov4M1oQuzhAwsHOpx6Rm.edu",
            "eMxw3wFMwZHeGv7pR6IX4Xwxi6MbKTmSxKgedUn9h0fFLD.U0pwr4yV7dInK5frNbyRghfA0IkWKsTg.edu",
            "LaYx5MdIy4pGlJ.com",
            "ZDbQ57LlDzhRbUVeK4zPc.EDU"
        ],
        "non_matches": [
            ".mydomain.com",
            "regexlib.comm",
            "-bigreg.com",
            "afdsaf.adijs",
            "a.cdsaca.cas",
            "43.v234",
            "@#dfkjnav",
            "12f3.21f3.213f",
            "qwerty@123.123",
            "341.431v4f3.fv1",
            "notredame.github",
            "99999@gmail"
        ],
        "stress_tests": [],
        "serial": 85,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"00\"*5000+\"\""
    },
    {
        "expression": "^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$",
        "raw_prompt": "This matches floating point expression in a more rigorous way - accepts both exponent as well as non exponent notations.",
        "refined_prompt": "Matches numbers that can be positive or negative, may have a decimal point, and can be in scientific notation format\nMatch examples:\n- \"123\"\n- \"-123.35\"\n- \"-123.35e-2\"\nNon-match examples:\n- \"abc\"\n- \"123.32e\"",
        "matches": [
            "123",
            "-123.35",
            "-123.35e-2",
            "41",
            "1432",
            "512",
            "123",
            "77680628136.7552098e982",
            "+76780107092975139",
            "+7678023024785.3e-19982",
            "275189806858986728960918281818983794084608877641099649684838072428225393435789.38e05143381004",
            "-432.52",
            "2e10"
        ],
        "non_matches": [
            "abc",
            "123.32e",
            "123.32.3",
            "12/123/4322",
            "51:534",
            "43.v234",
            "43-5432",
            "/5/5/20022",
            "000-000",
            "1-1-2",
            "34.31ee",
            "12/132/90"
        ],
        "stress_tests": [],
        "serial": 86,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"0\"*10000+\" \""
    },
    {
        "expression": "^[+-]?([0-9]*\\.?[0-9]+|[0-9]+\\.?[0-9]*)([eE][+-]?[0-9]+)?$",
        "raw_prompt": "A regular expression that matches numbers. Integers or decimal numbers with or without the exponential form.",
        "refined_prompt": "A regular expression that matches numbers. Integers or decimal numbers with or without the exponential form.\nMatch examples:\n- \"23\"\n- \"-17.e23\"\n- \"+.23e+2\"\nNon-match examples:\n- \"+.e2\"\n- \"23.17.5\"",
        "matches": [
            "23",
            "-17.e23",
            "+.23e+2",
            "312",
            "784639",
            "+423",
            "-234798",
            "+324.234",
            "-234.243",
            "432",
            "4987.42",
            "-2423",
            "0"
        ],
        "non_matches": [
            "+.e2",
            "23.17.5",
            "10e2.0",
            "12/123/4322",
            "234/423/5243",
            "43.v234",
            "/5/5/5",
            "/5/5/20022",
            "qwerty@123.123",
            "354/243/542",
            "9/9/9",
            "++63453.345"
        ],
        "stress_tests": [],
        "serial": 112,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"0\"*5000+\" \""
    },
    {
        "expression": "^\\d*[0-9](|.\\d*[0-9]|,\\d*[0-9])?$",
        "raw_prompt": "This is permit all decimal number, exclude all alphanumeric caracter",
        "refined_prompt": "This regular expression is used to validate decimal numbers that can have an optional leading zero, at least one digit before and after the decimal point (if present), and may allow for either a dot or comma as a decimal separator. Excludes all alphanumeric character\nMatch examples:\n- \"123456.123456\"\n- \"123456,123456\"\n- \"123456\"\nNon-match examples:\n- \"123a.123\"\n- \"123a,123\"",
        "matches": [
            "123456.123456",
            "123456,123456",
            "123456",
            "48651.498653",
            "48.94865",
            "489561",
            "4856.48956",
            "651.89456",
            "465.4651",
            "798.498",
            "48.1",
            "456.64865",
            "12315"
        ],
        "non_matches": [
            "123a.123",
            "123a,123",
            "a",
            "2rf",
            "8561hui",
            "huiy8hiu",
            "6r5tfy",
            "09iop",
            "78yui",
            "65rtfy9hiu",
            "0u9ioj5dr",
            "6tfy"
        ],
        "stress_tests": [],
        "serial": 119,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"00\"*5000+\" \""
    },
    {
        "expression": "<img([^>]*[^/])>",
        "raw_prompt": "Use this along with this replacement string &lt;img\\1 /&gt; to convert image tags to XHTML compliant image tags.",
        "refined_prompt": "This regular expression is used to match HTML <img> tags with any attributes, excluding self-closing tags (those ending with \"/>\"). Use this along with this replacement string &lt;img\\1 /&gt; to convert image tags to XHTML compliant image tags.\nMatch examples:\n- \"<img src=\"bob\">\"\n- \"<img%(\"]jCkOZt=1uT_Rl>\"\n- \"<imgDjxWWIdhH\\-rliK<p]/{rJ$\"X`N{C-/OS-z[*gTm.e+>\"\nNon-match examples:\n- \"<img fq3f3/>\"\n- \"<img3/>frf\"",
        "matches": [
            "<img src=\"bob\">",
            "<img%(\"]jCkOZt=1uT_Rl>",
            "<imgDjxWWIdhH\\-rliK<p]/{rJ$\"X`N{C-/OS-z[*gTm.e+>",
            "<imgZ!{kLm.L4;??2hErM1L0bu$t:Ju9IoTmJGMb LNHRZ9_>",
            "<img]g6OQ8.sV}Q+NGbG69ds`NAn\\KCBmRs>",
            "<img:O+/((3E|jka`>",
            "<img~'S[fwY$?V1X4<Gez0NW\\q7C6K7sPEY\"*98V; ]'>",
            "<imgfl;j#j'BG/hZ^\\JrrpY8e|1)d.&4<u!rf[w<\\}4~rV|^tiT\\RmpxFIPrA]T^YY~)jO[J#isCg861nDX>",
            "<imgY U']m_Ks1Ntyd7+W8-X\"O.Bj9t2J>",
            "<img3}b!^.6q`] IkGZmHz!]j:TE*3{6?=;X?\"'WiD<_DV4N^Jm]t->",
            "<imgo?5p%=&b6T:l,B}a[j;}$1\"*No(5/`.+?0CCw,]7X{*P-9rmzB=Rz?N,dtiM{VqHzXv3YU\"'3AQ_r>",
            "<imgU_w]O2Xg\"TK5@N'otO =K{X46R)8$h`^6W2oD| RDi#(!Kg%]-lgrLUE:QLNiAq<#nYTVX(n*#av>",
            "<img$NJJ++huA]g S\"jM_2FX-2zMA]z9)${k8^`q#(PXgpq>"
        ],
        "non_matches": [
            "<img fq3f3/>",
            "<img3/>frf",
            "<img src=dbfadsfb\" />",
            "<img srafdsb\" />",
            "<img 44src3=\"bfobf3\" />",
            "<img s43f34rcf\"3of\" />",
            "<img 3f4efad=\"bob\" />",
            "<img src=\"dsfda\" />",
            "<img sfadsfc=\"bafadsob\" />",
            "<iafdsf src=\"fadsfadafw\" />sd",
            "<imadsfadsf",
            "<iab\" />df"
        ],
        "stress_tests": [],
        "serial": 121,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"<img\"*5000+\"\u0000\""
    },
    {
        "expression": "&lt;!--[\\s\\S]*?--&gt;",
        "raw_prompt": "Removes pesky comments and commented javascript from HTML",
        "refined_prompt": "Effectively locate and extract HTML comments from a text or HTML document, including multi-line comments, while being non-greedy to avoid matching comments that span multiple comment blocks.\nMatch examples:\n- \"&lt;!-- comments --&gt;\"\n- \"&lt;!-- x = a &gt; b - 3 --&gt;\"\n- \"&lt;!----&gt;\"\nNon-match examples:\n- \"&lt;COMMENTS&gt;this is a comment&lt;/COMMENTS&gt;\"\n- \"f34fvfv\"",
        "matches": [
            "&lt;!-- comments --&gt;",
            "&lt;!-- x = a &gt; b - 3 --&gt;",
            "&lt;!----&gt;",
            "&lt;!--:|5V\f~03bL\u2008\\EqBNWd8\u2007kVD\u2005bA\u000b\u200ad\u200aam\u00a0,\f\u2001~i}1l--&gt;",
            "&lt;!--E;!\u202f6:VZw[tv\\\u2029*aO7Q=^QAQ\u2001\u2006]a\fWy}2\u1680^{9iI:A@[,W]?J\u2006--&gt;",
            "&lt;!----&gt;",
            "&lt;!--|iTa\u2029v9r^\u2028\u2006al--&gt;",
            "&lt;!--\f~lP\u2028^c\u2002vXV]ZhZ[6\u2005\u2004s{97U\u2002:xE)\u3000\u3000f5#zfF0`L5g,\u180e'M!k H|\\4\u2003v\u1680eJE }\u2005J\u180eod8D+.~8ObRPZ6MUS,'.\ufeff@'/--&gt;",
            "&lt;!--:[(5B,H~rg!b_i--&gt;",
            "&lt;!--^t_@E{5\" ^m\u202fN\u2009A,\u2004\ufefft~n\u2006RE{EUUW,\u2005g 'T\u2029I:_=q\u205f+F,`JKa\u2009--&gt;",
            "&lt;!--K?1.j{--&gt;",
            "&lt;!--Ky1I?\u2002\u2005}?[[m-x$DV1M3\u2003Dh6fU--&gt;",
            "&lt;!--0\u1680|--&gt;"
        ],
        "non_matches": [
            "&lt;COMMENTS&gt;this is a comment&lt;/COMMENTS&gt;",
            "f34fvfv",
            "34f2vf42e",
            "fasd@fds.fasd@",
            "sfalijad234",
            "43.v234",
            "@#dfkjnav",
            "/5/5/20022",
            "qwerty@123.123",
            "1-1-2",
            "9/9/9",
            "++63453.345"
        ],
        "stress_tests": [],
        "serial": 123,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"&lt;!--\"*5000+\"-\""
    },
    {
        "expression": "(\\d*)'*-*(\\d*)/*(\\d*)&quot;",
        "raw_prompt": "This regular expression is for parsing feet and inches measurements.",
        "refined_prompt": "This regular expression can be used to parse and capture measurements in feet and inches, with optional symbols like apostrophes ('), hyphens (-), and forward slashes (/), as well as the denominator part (e.g., 16) of inches, and it ends with a double quotation mark (\").\nMatch examples:\n- \"5'-3/16&quot;\"\n- \"1'-2&quot;\"\n- \"5/16&quot;\"\nNon-match examples:\n- \"1 3/16\"\n- \"52/2/54/245\"",
        "matches": [
            "5'-3/16&quot;",
            "1'-2&quot;",
            "5/16&quot;",
            "5'-3/16&quot;",
            "1'-3&quot;",
            "5/15&quot;",
            "5'-3/15&quot;",
            "2'-4&quot;",
            "7/14&quot;",
            "6'-3/14&quot;",
            "4'-3&quot;",
            "8/12&quot;",
            "7'-3/14&quot;"
        ],
        "non_matches": [
            "1 3/16",
            "52/2/54/245",
            "34f2vf42e",
            "-123",
            "2346-2345-2435",
            "2/3/5235",
            "@#dfkjnav",
            "98iojk",
            "u09nKLJG FSL",
            "(0xx12) 7256 2345154",
            "abc111def",
            "99999@gmail"
        ],
        "stress_tests": [],
        "serial": 127,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"0\"*5000+\" \""
    },
    {
        "expression": "^(/w|/W|[^<>+?$%{}&])+$",
        "raw_prompt": "simple expression for excluding a given list of characters. simply change the contents of [^] to suite your needs. for example ^(/w|/W|[^&lt;&gt;])+$ would allow everything except the characters &lt; and &gt;.",
        "refined_prompt": "This regular expression is used to validate strings that contain a mix of characters, including word characters (alphanumeric and underscores), non-word characters, and any characters that are not among a specific set of special characters often used in HTML and programming. It ensures that the string does not contain the specified special characters.\nMatch examples:\n- \"John Doe Sr.\"\n- \"100 Elm St., Suite 25\"\n- \"Valerie's Gift Shop\"\nNon-match examples:\n- \"<h1>Hey</h1>\"\n- \"<h1>adsfa</h1>\"",
        "matches": [
            "John Doe Sr.",
            "100 Elm St., Suite 25",
            "Valerie's Gift Shop",
            "wtrewrt",
            "terwtw",
            "fdgsy",
            "nfju7",
            "kuyk678",
            "jk7jkj",
            "42309ion",
            "23c2d",
            "c237mu78",
            "mk78m78"
        ],
        "non_matches": [
            "<h1>Hey</h1>",
            "<h1>adsfa</h1>",
            "<h1>Hgafdgqrey</h1>",
            "<h1>trebd</h1>",
            "<h2>HIUJKNFSDfsd</h2>",
            "<h2>adsga</h2>",
            "<h2>HIgfda24gSDfsd</h2>",
            "<h2>HgfdfdFSDfsd</h2>",
            "<h2>HIUregfSDfsd</h2>",
            "<h2>HIUJfaddSDad</h2>",
            "<h3>HIUJKNfsgFSDfsd</h3>",
            "<h3>HIUsd</h3>"
        ],
        "stress_tests": [],
        "serial": 128,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\u0000\"+\"/w\"*32+\"$\""
    },
    {
        "expression": "(^-\\d*\\.?\\d*[1-9]+\\d*$)|(^-[1-9]+\\d*\\.\\d*$)",
        "raw_prompt": "Accepts only negative decimal values. Zero and positive numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits.",
        "refined_prompt": "\nMatch examples:\n- \"-0.050\"\n- \"-5.000\"\n- \"-5\"\nNon-match examples:\n- \"0\"\n- \"0.0\"",
        "matches": [
            "-0.050",
            "-5.000",
            "-5"
        ],
        "non_matches": [
            "0",
            "0.0",
            ".0"
        ],
        "stress_tests": [],
        "serial": 151,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"-0\"+\"0\"*10000+\"@\""
    },
    {
        "expression": "(^[A-Z\u00c0-\u00dc]{1}[a-z\u00e0-\u00fc']+\\s[a-zA-Z\u00e0-\u00fc\u00c0-\u00dc]+((([\\s\\.'])|([a-z\u00e0-\u00fc']+))|[a-z\u00e0-\u00fc']+[a-zA-Z\u00e0-\u00fc\u00c0-\u00dc']+))",
        "raw_prompt": "Checks if has the first and the last name, and check the capital letters.\nUse with the RegExp.test method",
        "refined_prompt": "Checks if has the first and the last name, and check the capital letters.\nMatch examples:\n- \"Carlos Rodrigues\"\n- \"C\u00e1 de Laaa\"\n- \"Crras R. L. Rodrig\u00fces\"\nNon-match examples:\n- \"aa\u00e4A\"\n- \"E:\\DyAGT\\SD01A_specV2.jpg\"",
        "matches": [
            "Carlos Rodrigues",
            "C\u00e1 de Laaa",
            "Crras R. L. Rodrig\u00fces",
            "Fsdf Ffasd",
            "Lionel Messi",
            "Abc Def",
            "Qwef Nfjisdo",
            "Jfdio Jijosdf",
            "Fijofds Jijsdf",
            "Jpfods Pfds",
            "Jfodis Prew",
            "Qeybr Pfds",
            "Ifisdoj Idsf"
        ],
        "non_matches": [
            "aa\u00e4A",
            "E:\\DyAGT\\SD01A_specV2.jpg",
            "53495083409x",
            "fasd@fds.fasd@",
            "sfalijad234",
            "3nf@",
            "AAAAAAA",
            "2546dgwre",
            "qwerty@123.123",
            "com.edu.github",
            "sda sad",
            "0j0jweBBBB"
        ],
        "stress_tests": [],
        "serial": 172,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"A'\\tA\"+\"aa\"*5000+\"A0A0A0A0\""
    },
    {
        "expression": "^[1-9]+[0-9]*$",
        "raw_prompt": "Allows only positive integers that are greater then 0. Easily modified for +/- intergers and allowing zero.",
        "refined_prompt": "^[1-9]+[0-9]*$\nMatch examples:\n- \"1\"\n- \"12\"\n- \"124\"\nNon-match examples:\n- \"-1\"\n- \"a\"",
        "matches": [
            "1",
            "12",
            "124",
            "489",
            "4985",
            "45",
            "459",
            "561",
            "456",
            "54",
            "798",
            "4895",
            "13"
        ],
        "non_matches": [
            "-1",
            "a",
            "1.0",
            "845-",
            "49516-fwfd",
            "2/3/5235",
            "43-5432",
            "12f3.21f3.213f",
            "432/524/2435",
            "341.431v4f3.fv1",
            "34.31451",
            "32542gdf"
        ],
        "stress_tests": [],
        "serial": 190,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"1\"*10000+\" \""
    },
    {
        "expression": "^(([a-z])+.)+[A-Z]([a-z])+$",
        "raw_prompt": "This matches Java class names such as &quot;com.test.Test&quot;. It's being used within an XML Schema to validate classname as specified in XML documents.",
        "refined_prompt": "Matches strings that start with one or more groups of lowercase letters followed by a dot and end with an uppercase letter followed by one or more lowercase letters. This matches Java class names such as &quot;com.test.Test&quot;. It's being used within an XML Schema to validate classname as specified in XML documents.\nMatch examples:\n- \"com.test.Test\"\n- \"com.Test\"\n- \"afd.Tds\"\nNon-match examples:\n- \"com.test.test\"\n- \"com.test.TEst\"",
        "matches": [
            "com.test.Test",
            "com.Test",
            "afd.Tds",
            "fds.adfs.Tfds",
            "fdsioj.fdso.Tdfs",
            "apple.banana.Class",
            "sdaf.fa.Osdfa",
            "fqidf.fdsi.Fdsa",
            "run.ran.Run",
            "apple.apple.Apple",
            "name.abc.Cds",
            "dfisf.Fds",
            "jdif.Irw"
        ],
        "non_matches": [
            "com.test.test",
            "com.test.TEst",
            "Com.test.Test",
            "Mastercard",
            "123.456.789",
            "2/3/5235",
            "afdsFDS",
            "FDS.FDsfd.dsf",
            "fgdg.dgf.fgsd",
            "gfd.gfd.gdf",
            "Rwer.wer.Fds",
            "gfdgf.WERfdg.FDS"
        ],
        "stress_tests": [],
        "serial": 193,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"a\"*32+\"AaA\"",
        "rescue_attack_string": "abbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelabbrelxmissnfqowvebe"
    },
    {
        "expression": "^((\\d?)|(([-+]?\\d+\\.?\\d*)|([-+]?\\d*\\.?\\d+))|(([-+]?\\d+\\.?\\d*\\,\\ ?)*([-+]?\\d+\\.?\\d*))|(([-+]?\\d*\\.?\\d+\\,\\ ?)*([-+]?\\d*\\.?\\d+))|(([-+]?\\d+\\.?\\d*\\,\\ ?)*([-+]?\\d*\\.?\\d+))|(([-+]?\\d*\\.?\\d+\\,\\ ?)*([-+]?\\d+\\.?\\d*)))$",
        "raw_prompt": "This allows a sequence of real numbers to be added, separated by a comma (required) and a space (optional). Based pretty heavily on an expression by Steven Smith on this site.",
        "refined_prompt": "This allows a sequence of real numbers to be added, separated by a comma (required) and a space (optional).\nMatch examples:\n- \"8.0\"\n- \"8.0,-.38,+8.9\"\n- \"8.0, +8.8, 0.09\"\nNon-match examples:\n- \"+\"\n- \".\"",
        "matches": [
            "8.0",
            "8.0,-.38,+8.9",
            "8.0, +8.8, 0.09",
            "4894",
            "48956.456",
            "56.4895",
            "645.489",
            "456.4895",
            "465",
            "489",
            "15",
            "48",
            "46"
        ],
        "non_matches": [
            "+",
            ".",
            "a,b, c",
            "12/123/4322",
            "123.456.789",
            "43.v234",
            "@#dfkjnav",
            "12f3.21f3.213f",
            "432/524/2435",
            "(0xx12) 7256 2345154",
            "(0xx12) 62509",
            "99999@gmail"
        ],
        "stress_tests": [],
        "serial": 196,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"000000,\"*8+\"\""
    },
    {
        "expression": "^\\w+.*$",
        "raw_prompt": "Validates any line begining with an alpha-numeric. If you need a regular expression that fails only for a zero length string. Remove the \\w+. I originally attempted to post was ^.*$ but the input form would not allow it.",
        "refined_prompt": "matches a wide range of text strings that have at least one word character((letters, digits, or underscores) at the beginning.\nMatch examples:\n- \"user name\"\n- \"o)(=-&amp;r443*/\"\n- \"fds2f\"\nNon-match examples:\n- \"=stuff\"\n- \".username\"",
        "matches": [
            "user name",
            "o)(=-&amp;r443*/",
            "fds2f",
            "23f2ef",
            "bh",
            "87",
            "u8hh98",
            "9h",
            "99h9",
            "8hh9",
            "9h8",
            "8hg97f",
            "76df"
        ],
        "non_matches": [
            "=stuff",
            ".username",
            "@!R-243fads",
            "#$r1w1-123fads",
            "#RFE",
            "%FTYV",
            "*&YHU",
            "*%^TYGVH",
            "%^TYF",
            "(*IU",
            "&^YGU",
            "$%ERTYU"
        ],
        "stress_tests": [],
        "serial": 225,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"0\"*10000+\"\\n1\\n\""
    },
    {
        "expression": "<[^>]*>",
        "raw_prompt": "HTML Pattern Matching\nPLEASE HELP\n/&lt;[^&gt;]*&gt;/ig\nThe above pattern is only successful when html tag are simple (they don't include any javascript). This mean that the pattern will fail if something like this is within the tag &lt;input type=button value=test onclick='if(n.value&gt;5)do_this();'&gt;. It will not match the entire open n close sign.\nHow do you write a pattern that will pass all these tag so that the pattern will match from the open to the close sign and not when it just see a &gt; within a '' or &quot;&quot;.\n&lt;input type=button onclick='if(n.value&gt;5)do_this();'&gt; not this &lt;br&gt;\n&lt;input type=button onclick=&quot;n&gt;5?a():b();&quot; value=test&gt; not this &lt;br&gt;\n&lt;input type=button onclick=&quot;n&gt;5?a(\\&quot;OK\\&quot;):b('Not Ok');&quot; value=test&gt; not this &lt;br&gt;\n&lt;input type=button onclick='n&gt;5' value=test onmouseover=&quot;n&lt;5&amp;&amp;n&gt;8&quot; onmouseout='if(n&gt;5)alert(\\'True\\');else alert(&quot;False&quot;)'&gt; not this &lt;br&gt;\nAny help would be greatly appreciate. Thanks a whole lot.\nLogan",
        "refined_prompt": "This regex pattern matches HTML/XML tags by looking for text enclosed in angle brackets (< and >), allowing for any characters ([^>]*) between them.\nMatch examples:\n- \"<html>\"\n- \"<div>\"\n- \"<a href=\"https://www.example.com\">\"\nNon-match examples:\n- \"abc\"\n- \"2fed2\"",
        "matches": [
            "<html>",
            "<div>",
            "<a href=\"https://www.example.com\">",
            "<p class=\"paragraph\">",
            "<>",
            "<img src=\"image.jpg\" alt=\"Example Image\">",
            "<h1>Title</h1>",
            "<span style=\"color: red;\">",
            "<br />",
            "<ul><li>Item 1</li><li>Item 2</li></ul>",
            "<!-- This is a comment -->",
            "<input type=\"text\" name=\"username\">",
            "<table><tr><td>Data 1</td><td>Data 2</td></tr></table>"
        ],
        "non_matches": [
            "abc",
            "2fed2",
            "df22",
            "f2eg",
            "g8yu<gu",
            "9hu09jiOKIOK",
            "9JIMO<",
            "H*(UIJMKO<",
            "(*IKO<MNH",
            "(IOK<HJM",
            "<MHJK",
            "K<HJM"
        ],
        "stress_tests": [],
        "serial": 253,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"<\"*10000+\"\u0000\""
    },
    {
        "expression": "^([0-9]*\\-?\\ ?\\/?[0-9]*)$",
        "raw_prompt": "Match italian telephone number with prefix followed by &quot;/&quot;, &quot;-&quot; or blank and number. Usefull with numeric keybord!",
        "refined_prompt": "Match italian telephone number with prefix followed by &quot;/&quot;, &quot;-&quot; or blank and number.\nMatch examples:\n- \"02-343536\"\n- \"02/343536\"\n- \"02 343536\"\nNon-match examples:\n- \"02a343536\"\n- \"02+343536\"",
        "matches": [
            "02-343536",
            "02/343536",
            "02 343536",
            "123",
            "456-4545",
            "49516-49516",
            "4561-489",
            "49856/4895",
            "485/485",
            "485951",
            "485",
            "7845",
            "673"
        ],
        "non_matches": [
            "02a343536",
            "02+343536",
            "&*YHIUJN",
            "U()IHU",
            "UYGHJY*(U",
            "GYUH",
            "*UIHT*&Y876849",
            "y89uhiy89uhi*&UI",
            "y*(UHIyuhi",
            "98yUHIiuf",
            "hiufs89y",
            "fs+5644f"
        ],
        "stress_tests": [],
        "serial": 254,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"0\"*10000+\"A\""
    },
    {
        "expression": "^[a-zA-Z]+(([\\'\\,\\.\\-][a-zA-Z])?[a-zA-Z]*)*$",
        "raw_prompt": "This allows you to validate first names and last names in seperate fields. Instead of validating a full name in one field.",
        "refined_prompt": "This allows you to validate first names and last names in seperate fields. Instead of validating a full name in one field.\nMatch examples:\n- \"Sameul\"\n- \"O'Conner\"\n- \"Mary-Kate\"\nNon-match examples:\n- \"David Bugel\"\n- \"Robert1\"",
        "matches": [
            "Sameul",
            "O'Conner",
            "Mary-Kate",
            "Hello",
            "World",
            "Messi",
            "Ronaldo",
            "Abc",
            "Xavi",
            "Neymar",
            "Santos",
            "Jdsfa",
            "Phd"
        ],
        "non_matches": [
            "David Bugel",
            "Robert1",
            "Robert M. Larry",
            "87h87h8",
            "g87g87v8",
            "vf7878vf97",
            "f79",
            "9",
            "f89f",
            "89gf89",
            "gf8f",
            "98f7r97t9ut"
        ],
        "stress_tests": [],
        "serial": 284,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"Aa\"+\"a\"*32+\" \"",
        "rescue_attack_string": "aaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaAzaaAzz-"
    },
    {
        "expression": "^([0-9]*\\,?[0-9]+|[0-9]+\\,?[0-9]*)?$",
        "raw_prompt": "Integer numbers with decimals. Only positives match. This expression doesn't match numbers with group separators",
        "refined_prompt": "Integer numbers with decimals. Only positives match. This expression doesn't match numbers with group separators\nMatch examples:\n- \"1234,50\"\n- \"0,70\"\n- \",03\"\nNon-match examples:\n- \"1.234,50\"\n- \"-234,50\"",
        "matches": [
            "1234,50",
            "0,70",
            ",03",
            "795795",
            "4674",
            "764",
            "64",
            "7863",
            "8638",
            "68",
            "3768437",
            "84",
            "68"
        ],
        "non_matches": [
            "1.234,50",
            "-234,50",
            "-3213",
            "-341",
            "-423.423",
            "-423.5432",
            "-23.423.4.234.",
            "423.312-1.41-31.2",
            "245/524/12",
            "897-",
            "34.31bb",
            "3409fjg43"
        ],
        "stress_tests": [],
        "serial": 302,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"0\"*5000+\" \""
    },
    {
        "expression": "^(((\\d{1,3})(,\\d{3})*)|(\\d+))(.\\d+)?$",
        "raw_prompt": "validates numbers, with or without decimal places, and comma 1000 separators.",
        "refined_prompt": "validates numbers, with or without decimal places, and comma 1000 separators.\nMatch examples:\n- \"9999999\"\n- \"99999.99999\"\n- \"99,999,999.9999\"\nNon-match examples:\n- \"9999.\"\n- \"9,99,99999.999\"",
        "matches": [
            "9999999",
            "99999.99999",
            "99,999,999.9999",
            "757",
            "5765967",
            "576",
            "486.52432",
            "54654",
            "55679578.23442",
            "764",
            "6748",
            "789578.234",
            "423.4234"
        ],
        "non_matches": [
            "9999.",
            "9,99,99999.999",
            "999.9999.9999",
            "25342.43.23.f",
            "c32",
            ".d2d",
            "e",
            "2ed.d2e",
            "c2dc.",
            "2c3.334`",
            ".4324.234.23",
            "432.423.423.423,234234"
        ],
        "stress_tests": [],
        "serial": 304,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"000\"*5000+\" \""
    },
    {
        "expression": "^([1-9]{1}[0-9]{0,7})+((,[1-9]{1}[0-9]{0,7}){0,1})+$",
        "raw_prompt": "Validate a comma delimited string of integer between 1 and 99999999 (change {0,7} to whatever you need). No zero leading.",
        "refined_prompt": "Validate a comma delimited string of integer between 1 and 99999999. No zero leading.\nMatch examples:\n- \"1,2,3455,12345678\"\n- \"23045,34678,2892\"\n- \"1,2,99999999\"\nNon-match examples:\n- \"01,234,567\"\n- \"123,0445,3434,\"",
        "matches": [
            "1,2,3455,12345678",
            "23045,34678,2892",
            "1,2,99999999",
            "48489",
            "4984",
            "684687",
            "87",
            "864885",
            "848643",
            "878",
            "5",
            "87638465",
            "65"
        ],
        "non_matches": [
            "01,234,567",
            "123,0445,3434,",
            "121,,1212,,12,",
            "651afds",
            "8guibj",
            "guib",
            "gui9ghoi",
            "3rreddc",
            "4561,56,,,4,8,456,",
            ",f,d,",
            "(0xx12) 62509",
            "++63453.345"
        ],
        "stress_tests": [],
        "serial": 315,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"1\"*32+\" \"",
        "rescue_attack_string": "84678467846784678467846784678467846784678467846784678467846784678467846784678467846784678467846784678467846784678467867257291,"
    },
    {
        "expression": "^[0-9]*[1-9]+$|^[1-9]+[0-9]*$",
        "raw_prompt": "This Expression checks if the value is an integer, positive, not zero and not a decimal.\nVery handy for use when people need to fill in whole numbers, like when ordering car parts on a website (you dont want your customers to order -10 tires or 0.7 mirrors..",
        "refined_prompt": "This Expression checks if the value is an integer, positive, not zero and not a decimal.\nMatch examples:\n- \"1\"\n- \"00000428123\"\n- \"1230000\"\nNon-match examples:\n- \"0\"\n- \"00000000\"",
        "matches": [
            "1",
            "00000428123",
            "1230000",
            "485",
            "48156",
            "45",
            "56",
            "5148",
            "98489",
            "156473",
            "1554",
            "879567",
            "89"
        ],
        "non_matches": [
            "0",
            "00000000",
            "any text or +, - or any other character",
            "56198adf",
            "4894adf",
            "84dafds",
            "9849fsad",
            "d7uyhy78",
            "8g7yu",
            "8gur",
            "76fyrt",
            "76fytuhi324"
        ],
        "stress_tests": [],
        "serial": 368,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"1\"*10000+\" \""
    },
    {
        "expression": "^((?:.*(?!\\d))*(?:\\D*)?)(\\d+)$",
        "raw_prompt": "Matches the number at the end of the string.",
        "refined_prompt": "Matches the number at the end of the string.\nMatch examples:\n- \"123\"\n- \"aaa123\"\n- \"aaa123aaa123\"\nNon-match examples:\n- \"aaa\"\n- \"aaa123aaa\"",
        "matches": [
            "123",
            "aaa123",
            "aaa123aaa123",
            "vuyy76",
            "uy76",
            "utydf987",
            "ivy75",
            "uyvhv4",
            "uiy56",
            "uctgfhj6",
            "igfui9",
            "cygjh2",
            "ertyuio8"
        ],
        "non_matches": [
            "aaa",
            "aaa123aaa",
            "afdsffugyd",
            "igyug87guybh",
            "yugh78gyuhbjuhgy",
            "ftyudy65drftyTYGV",
            "67TFYG76F",
            "YTF6FTYFDT",
            "TFYG657T8GG",
            "RTXYGD56DRTDYDRT",
            "DTRD54DR",
            "65ETYDF"
        ],
        "stress_tests": [],
        "serial": 372,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\" \"+\"\u0000\"*32+\" \"",
        "rescue_attack_string": "8!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!y!E!yM*,&M6f"
    },
    {
        "expression": "(\\/\\*(\\s*|.*?)*\\*\\/)|(\\/\\/.*)",
        "raw_prompt": "This regexp is used to match c++,java,etc style multi-line and single line comments.",
        "refined_prompt": "This regexp is used to match c++, java, etc style multi-line and single line comments.\nMatch examples:\n- \"/* This is a multi-line comment */\"\n- \"// this is a single-line\"\n- \"// fahdui\"\nNon-match examples:\n- \"/sometext\"\n- \"/*/\"",
        "matches": [
            "/* This is a multi-line comment */",
            "// this is a single-line",
            "// fahdui",
            "// fdhsaiu",
            "// fhdsuiah",
            "// ahfdisuh",
            "// fdhsaiuh",
            "// uh8hfds",
            "// fhj89ewh",
            "// h8euwh8",
            "/* This is afdsant */",
            "/* This iadft */",
            "/* Thfadsnt */"
        ],
        "non_matches": [
            "/sometext",
            "/*/",
            "/aguysdfb",
            "/fabsduyg87dyuhs",
            "/g78fsudi",
            "/*fhudsifdsb",
            "/usydfgufdsg",
            "/ysfg",
            "/fgysduf67e2",
            "1-1-2",
            "(0xx12) 62509@",
            "12/132/90"
        ],
        "stress_tests": [],
        "serial": 386,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"/* \"+\" \"*16+\"\"",
        "rescue_attack_string": "/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*'XSwQW@$}YS"
    },
    {
        "expression": "^\\-?\\(?([0-9]{0,3}(\\,?[0-9]{3})*(\\.?[0-9]*))\\)?$",
        "raw_prompt": "Match a positive or negative decimal value with any precision and scale. Allows for left-padded zeroes, commas as group separator, negative sign (-) or parenthesis to indicate negative number.",
        "refined_prompt": "Match a positive or negative decimal value with any precision and scale. Allows for left-padded zeroes, commas as group separator, negative sign (-) or parenthesis to indicate negative number.\nMatch examples:\n- \"0.123\"\n- \"(1234.123)\"\n- \"-01,200\"\nNon-match examples:\n- \"2.3.123\"\n- \"1,23.45\"",
        "matches": [
            "0.123",
            "(1234.123)",
            "-01,200",
            "516",
            "548",
            "864",
            "456",
            "846.465",
            "4856.65",
            "516.156",
            "-489.51",
            "-789.1254",
            "-489.21"
        ],
        "non_matches": [
            "2.3.123",
            "1,23.45",
            "90438502+9503",
            "12/123/4322",
            "51:534",
            "$23.454",
            "/5/5/5",
            "12f3.21f3.213f",
            "324df",
            "1-1-2",
            "(0xx12) 62509",
            "++63453.345"
        ],
        "stress_tests": [],
        "serial": 462,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"000\"*2010+\" \""
    },
    {
        "expression": "(\\S+)\\x20{2,}(?=\\S+)",
        "raw_prompt": "Trim Inside. This pattern can be used with a replace value of &quot;$1 &quot; to remove multiple consecutive spaces between characters and replace with a single space. Trailing and leading spaces are NOT altered.",
        "refined_prompt": "Trim inside a string by replacing multiple consecutive spaces between characters with a single space, without altering leading or trailing spaces.\nMatch examples:\n- \"Too  Many spaces.\"\n- \"hdfu   fhhu\"\n- \"bufy.  sd fuhi\"\nNon-match examples:\n- \"No extra spaces\"\n- \"No Extra spaces Inside\"",
        "matches": [
            "Too  Many spaces.",
            "hdfu   fhhu",
            "bufy.  sd fuhi",
            "usdfi.  siudhfi",
            "iowr89.  wefbui",
            "fdbuis.  sfbug78",
            "bfys f.  s.  sdbufb",
            "bshdbf.   fbsdib",
            "bhfye87g.   buiwe",
            "bfyeg.   hufew",
            "jif.  iubfwe",
            "uiirwe u ehw.    wiuhr",
            "huiher.    uiwhruiwr"
        ],
        "non_matches": [
            "No extra spaces",
            "No Extra spaces Inside",
            "34f2vf42e",
            "Mastercard",
            "2346-2345-2435",
            "$23.454",
            "@#dfkjnav",
            "98iojk",
            "qwerty@123.123",
            "adfa2",
            "34.31",
            "99999@gmail"
        ],
        "stress_tests": [],
        "serial": 472,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"\u0000\"*10000+\"\u0000\""
    },
    {
        "expression": "(^[+]?\\d*\\.?\\d*[1-9]+\\d*$)|(^[+]?[1-9]+\\d*\\.\\d*$)",
        "raw_prompt": "Accepts only positive decimal values. Zero and negative numbers are non-matching.Allows zeros after last non-zero numeric value after decimal place for significant digits",
        "refined_prompt": "Accepts only positive decimal values. Zero and negative numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits.\nMatch examples:\n- \"01.23\"\n- \"0.15\"\n- \"0.1568\"\nNon-match examples:\n- \"0\"\n- \"-0.18\"",
        "matches": [
            "01.23",
            "0.15",
            "0.1568",
            "516.485",
            "845.65",
            "8945.645",
            "7865.897",
            "849.897",
            "9.6",
            "6.3",
            "87.24",
            "46.21",
            "54.12346"
        ],
        "non_matches": [
            "0",
            "-0.18",
            ".0",
            "-49856",
            "-9-456",
            "-1595.159",
            "-9156.894",
            "-7989.159",
            "00000",
            "341.431v4f3.fv1",
            "(0xx12) 62509",
            "12/132/90"
        ],
        "stress_tests": [],
        "serial": 513,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"0\"*10000+\" \""
    },
    {
        "expression": "(^\\d*\\.?\\d*[0-9]+\\d*$)|(^[0-9]+\\d*\\.\\d*$)",
        "raw_prompt": "This matches all positive decimal values. There was one here already which claimed to but would fail on value 0.00 which is positive AFAIK...",
        "refined_prompt": "Matches all positive decimal values.\nMatch examples:\n- \"0.00\"\n- \"1.23\"\n- \"4.56\"\nNon-match examples:\n- \"-1.03\"\n- \"-0.01\"",
        "matches": [
            "0.00",
            "1.23",
            "4.56",
            "485.48956",
            "615.546",
            "456.849",
            "5.549",
            "684.21",
            "98.21",
            "64.21",
            "654.2",
            "5198.15",
            "4859.12"
        ],
        "non_matches": [
            "-1.03",
            "-0.01",
            "-0.00",
            "-9851.156",
            "-15.18",
            "-56.2954",
            "-5.5948",
            "-516.21",
            "-5164.5",
            "-5943.975",
            "-645.0125",
            "-56.2464"
        ],
        "stress_tests": [],
        "serial": 519,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"0\"*5000+\" \""
    },
    {
        "expression": "^(?=.*[1-9].*$)\\d{0,7}(?:\\.\\d{0,9})?$",
        "raw_prompt": "Allows up to seven digits to the left and up to nine digits to the right of an optional decimal place.\nLeading zeros on the left of the decimal are accepted.\nOnly positive values are accepted.",
        "refined_prompt": "Allows up to seven digits to the left and up to nine digits to the right of an optional decimal place.\r\nLeading zeros on the left of the decimal are accepted.\r\nOnly positive values are accepted.\r\nRefined prompt:\nMatch examples:\n- \"1\"\n- \"0123456.123456789\"\n- \".123456789\"\nNon-match examples:\n- \".0123456789\"\n- \"0.0\"",
        "matches": [
            "1",
            "0123456.123456789",
            ".123456789",
            "456.549",
            "849.2462",
            "456.3456",
            "876.2466",
            "789549.246",
            "456.54987",
            "561.2154",
            "987.216897",
            "2495897.2165",
            "496"
        ],
        "non_matches": [
            ".0123456789",
            "0.0",
            "-1",
            "8941568456357.126",
            "8944563569516.21645",
            "19564.1985412657462",
            "95844563234546",
            "-945162",
            "-9565-+6*/8-95",
            "-+695-69-56",
            "-5+62-9+65/8956",
            "6++23"
        ],
        "stress_tests": [],
        "serial": 523,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\" \"+\"1\"*10000+\"\\n!\\n!\""
    },
    {
        "expression": "\\{\\\\\\*\\\\bkmkstart\\s(.*?)\\}",
        "raw_prompt": "Applied to a .RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.",
        "refined_prompt": "Applied to a .RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.\nMatch examples:\n- \"{\\*\\bkmkstart TagAmountDigits}\"\n- \"({\\*\\bkmkstart TagAmountText}\"\n- \"{\\*\\bkmkstart\u2029ypQVK]b[,k`}\"\nNon-match examples:\n- \"{\\*\\bkmkend TagAmountText}\"\n- \"{\\*\\bkmkend fadsfqf}\"",
        "matches": [
            "{\\*\\bkmkstart TagAmountDigits}",
            "({\\*\\bkmkstart TagAmountText}",
            "{\\*\\bkmkstart\u2029ypQVK]b[,k`}",
            "{\\*\\bkmkstart\u2005}",
            "{\\*\\bkmkstart\u2008asdfa}",
            "{\\*\\bkmkstart\u2008ewfwdz}",
            "{\\*\\bkmkstart\u2008wdfasdaz}",
            "{\\*\\bkmkstart\u20082efsdffz}",
            "{\\*\\bkmkstart\u2008sdfz}",
            "{\\*\\bkmkstart\u2008adsfz}",
            "{\\*\\bkmkstart\u2008zadsfwe}",
            "{\\*\\bkmkstart\u2008hgfdhz}",
            "{\\*\\bkmkstart\u2008zkjhgk}"
        ],
        "non_matches": [
            "{\\*\\bkmkend TagAmountText}",
            "{\\*\\bkmkend fadsfqf}",
            "{\\*\\bkmkend TagAmdsfaountText}",
            "{\\*\\bkmkend adsf}",
            "{\\*\\bkmkend asdfsad}",
            "bkmkstartf2ef2e",
            "bkmkstartj676u",
            "bkmkstart67ju67",
            "bkmkstart67m7",
            "bkmkstartn67n6",
            "bkmksg76tart",
            "67hvbkmkstart"
        ],
        "stress_tests": [],
        "serial": 528,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"{\\\\*\\\\bkmkstart \"*5000+\"\u0000\""
    },
    {
        "expression": "(^[0-9]*[1-9]+[0-9]*\\.[0-9]*$)|(^[0-9]*\\.[0-9]*[1-9]+[0-9]*$)|(^[0-9]*[1-9]+[0-9]*$)",
        "raw_prompt": "Positive real number greater than zero.",
        "refined_prompt": "Positive real number greater than zero.\nMatch examples:\n- \"0.01\"\n- \"010001.011010\"\n- \".234\"\nNon-match examples:\n- \"0.00 OR .\"\n- \"010001.011010E\"",
        "matches": [
            "0.01",
            "010001.011010",
            ".234",
            "156",
            "456",
            "46",
            "873857",
            "687",
            "68",
            "46.46845",
            "546.23453",
            "486.278",
            "987.12659"
        ],
        "non_matches": [
            "0.00 OR .",
            "010001.011010E",
            "1.234.5",
            "498.4564t",
            "7fgy",
            "f7gyf324",
            "@#dfkjnav",
            "/5/5/20022",
            "432/524/2435",
            "341.431v4f3.fv1",
            "(0xx12) 62509",
            "12/132/90"
        ],
        "stress_tests": [],
        "serial": 531,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"1\"*5000+\" \""
    },
    {
        "expression": "(\\/\\*(\\s*|.*?)*\\*\\/)|(--.*)",
        "raw_prompt": "This pattern will match any multi-line or single line comments in TSQL (Stored Procedures or SPROC's) in MS SQL Server.",
        "refined_prompt": "This pattern will match any multi-line or single line comments in TSQL (Stored Procedures or SPROC's) in MS SQL Server.\nMatch examples:\n- \"/* My Comment */\"\n- \"-- A single line comment\"\n- \"-- 78BHUJN\"\nNon-match examples:\n- \"*/ Won't work /*\"\n- \"// Not likely\"",
        "matches": [
            "/* My Comment */",
            "-- A single line comment",
            "-- 78BHUJN",
            "-- F7GYUBI",
            "-- 6F7YGUIN",
            "-- FFEWF3E",
            "-- G5TH5",
            "-- g45hb",
            "-- g4r5yhrt",
            "/* efr3 */",
            "/* f3ergt54 */",
            "/* g4ht5u7 */",
            "/* fe3rght */"
        ],
        "non_matches": [
            "*/ Won't work /*",
            "// Not likely",
            "- uh uh",
            "-afsd-fsd",
            "f-dsa-fa",
            "-fsda-f-",
            "f-ds-fsa-s-fads",
            "-afd adfdsaffasd",
            "//dasfbushf9da8u",
            "//h87fadisufbj",
            "//8uibjhfw2",
            "//y8huibj"
        ],
        "stress_tests": [],
        "serial": 563,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"/* \"+\" \"*16+\"\"",
        "rescue_attack_string": "/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{/*A{-8IyK23P>C;"
    },
    {
        "expression": "^[1-9]+[0-9]*$",
        "raw_prompt": "Allows only positive numbers, greater than zero",
        "refined_prompt": "Allows only positive numbers, greater than zero\nMatch examples:\n- \"1\"\n- \"10\"\n- \"135\"\nNon-match examples:\n- \"0\"\n- \"-1\"",
        "matches": [
            "1",
            "10",
            "135",
            "156",
            "1562",
            "168",
            "468",
            "2",
            "3",
            "894156849561",
            "89451657423",
            "57425",
            "461926"
        ],
        "non_matches": [
            "0",
            "-1",
            "aaa",
            "12/123/4322",
            "few43f",
            "3f434-34",
            "-9528951",
            "-159-",
            "-4-.549",
            "-4156.495",
            "78huij",
            "f67gyhu8"
        ],
        "stress_tests": [],
        "serial": 572,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"1\"*10000+\" \""
    },
    {
        "expression": "\\b(get)\\b.*{",
        "raw_prompt": "This piece of regex catches the if the open braces are not placed the line under a get command",
        "refined_prompt": "match strings that contain the word \"get\" surrounded by word boundaries and followed by an open curly brace '{', with potential characters in between.\nMatch examples:\n- \"get {\"\n- \"This is a get { example\"\n- \"get { something }\"\nNon-match examples:\n- \"get\"\n- \"f34fgetvfv\"",
        "matches": [
            "get {",
            "This is a get { example",
            "get { something }",
            "get { and some other text {",
            "text before get { text after",
            "get{ something",
            "get{ and more { text",
            "get{ and { get {",
            "get { multiple times { inside",
            "Here is a get { with additional { characters { inside",
            "get { fadsfds }",
            "get { s23ewfds",
            "get { so2r3ewsc"
        ],
        "non_matches": [
            "get",
            "f34fgetvfv",
            "34f2vgetf42e",
            "12/get123/4322",
            "2346-2get345-2435",
            "43.getv234",
            "@#dfkjnav{",
            "/5/5/20022{",
            "432/524/2435{",
            "ad{fa2",
            "(0xx12) 62509{",
            "12/132/{90"
        ],
        "stress_tests": [],
        "serial": 576,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"get\u0000\"*10000+\"\u0000\""
    },
    {
        "expression": "^(([A-Za-z]+[^0-9]*)([0-9]+[^\\W]*)([\\W]+[\\W0-9A-Za-z]*))|(([A-Za-z]+[^\\W]*)([\\W]+[^0-9]*)([0-9]+[\\W0-9A-Za-z]*))|(([\\W]+[^A-Za-z]*)([A-Za-z]+[^0-9]*)([0-9]+[\\W0-9A-Za-z]*))|(([\\W]+[^0-9]*)([0-9]+[^A-Za-z]*)([A-Za-z]+[\\W0-9A-Za-z]*))|(([0-9]+[^A-Za-z]*)([A-Za-z]+[^\\W]*)([\\W]+[\\W0-9A-Za-z]*))|(([0-9]+[^\\W]*)([\\W]+[^A-Za-z]*)([A-Za-z]+[\\W0-9A-Za-z]*))$",
        "raw_prompt": "Password with minimum 1 Letter (A-Za-z), 1 Number (0-9) and Special Character (\\W). It doesn't matter the charaters position. See the Mathching Examples.\nQuestion? Write an Email to me.",
        "refined_prompt": "Password with minimum 1 Letter (A-Za-z), 1 Number (0-9) and Special Character (\\W). It doesn't matter the characters position.\nMatch examples:\n- \"test22!!\"\n- \"!!test22\"\n- \"22!!test\"\nNon-match examples:\n- \"test22\"\n- \"!!test\"",
        "matches": [
            "test22!!",
            "!!test22",
            "22!!test",
            "f76f%F%",
            "^&TF12^",
            "%&^F^&231",
            "56f7%^&",
            "C%&V24",
            "6865-11-04 20:47:46afds",
            "nd.edu12",
            "$1.19daf",
            "78g78^&",
            "2f3f%$@"
        ],
        "non_matches": [
            "test22",
            "!!test",
            "22!!",
            "7g78v78v8",
            "v",
            "v78v78v78vy6y",
            "g6g",
            "66768787",
            "78787",
            "*&G&*B",
            "&*GH&*&*G&*G",
            "76g78"
        ],
        "stress_tests": [],
        "serial": 616,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"A\"*5000+\"0\""
    },
    {
        "expression": "^\\s*([\\(]?)\\[?\\s*\\d{3}\\s*\\]?[\\)]?\\s*[\\-]?[\\.]?\\s*\\d{3}\\s*[\\-]?[\\.]?\\s*\\d{4}$",
        "raw_prompt": "US 10-Digit Phone number matching.\n*Requires Area Code\n*Brackets optional, supports: () and []\n*seperators optional, supports: - and .\n*whitespace optional",
        "refined_prompt": "match 10-digit US phone numbers with optional brackets (either () or []) around the area code and optional separators (either - or .) between the groups of digits. Whitespace is also optional around the phone number.\nMatch examples:\n- \"6105551515\"\n- \"(610) 555 - 1212\"\n- \"[610]555.1212\"\nNon-match examples:\n- \"1 (610) 555-1212\"\n- \"(610) 555-1212 ext*\"",
        "matches": [
            "6105551515",
            "(610) 555 - 1212",
            "[610]555.1212",
            "(123) 456-7890",
            "[456]789-0123",
            "(555)555.5555",
            "123-456-7890",
            "555 555 5555",
            "(123)4567890",
            "987.654.3210",
            "[111]222-3333",
            "555-555-5555",
            "123.456.7890"
        ],
        "non_matches": [
            "1 (610) 555-1212",
            "(610) 555-1212 ext*",
            "[12345]67890",
            "(123) 456.7890a",
            "5555-5555-5555",
            "(123)[456]7890fads",
            "43-5432",
            "254627g.256",
            "245/524/12",
            "354/243/542",
            "(0xx12) 62509@",
            "3409fjg43"
        ],
        "stress_tests": [],
        "serial": 625,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\" \"+\"\\t\"*10000+\"\u0000\""
    },
    {
        "expression": "^(([a-zA-Z]+\\d+)|(\\d+[a-zA-Z]+))[a-zA-Z0-9]*$",
        "raw_prompt": "Password validator that validates the password contains 1 letter (regardless of case) and 1 number",
        "refined_prompt": "Password validator that validates the password contains 1 letter (regardless of case) and 1 number\nMatch examples:\n- \"Password1\"\n- \"1Password\"\n- \"1Password1\"\nNon-match examples:\n- \"*Password1\"\n- \"*1Password*\"",
        "matches": [
            "Password1",
            "1Password",
            "1Password1",
            "f6f76f",
            "67f",
            "67fafd",
            "fa67f",
            "76f",
            "67vf87v877",
            "v7g97",
            "87v78g6",
            "6v6v6y6v7",
            "v7v7gb7u"
        ],
        "non_matches": [
            "*Password1",
            "*1Password*",
            "*1Password1*",
            "feafdsafd",
            "sfadsafds",
            "fqfd",
            "gafdfsda",
            "thytng",
            "ngfgt",
            "514351",
            "653752",
            "555413"
        ],
        "stress_tests": [],
        "serial": 627,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"A\"+\"0\"*10000+\" \""
    },
    {
        "expression": "<\\?xml.*</note>",
        "raw_prompt": "This will find any XML within a string starting with the <?xml header and ending with the closing root tag. Replace </note> with your closing root tag. (use singleline and case insensitive) - I use this to pull xml written in a web document.",
        "refined_prompt": "This will find any XML within a string starting with the <?xml header and ending with the closing root tag. Replace </note> with your closing root tag. (use singleline and case insensitive) - I use this to pull xml written in a web document.\nMatch examples:\n- \"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></note>\"\n- \"<?xml version=\"1.0\" encoding=\"UTF-8\" ?><note><to>John</to><from>Jane</from><message>Hello, world!</message></note>\"\n- \"<?xml version=\"1.0\" ?><note><to>Alice</to><from>Bob</from><message>Hi there!</message></note>\"\nNon-match examples:\n- \"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></BADnote>\"\n- \"<\\?xml52/2/54/245\"",
        "matches": [
            "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></note>",
            "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><note><to>John</to><from>Jane</from><message>Hello, world!</message></note>",
            "<?xml version=\"1.0\" ?><note><to>Alice</to><from>Bob</from><message>Hi there!</message></note>",
            "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?><note><to>Mary</to><from>David</from><message>How are you?</message></note>",
            "<?xml version=\"1.1\" ?><note><to>Chris</to><from>Lisa</from><message>Goodbye!</message></note>",
            "<?xml version=\"1.0\" ?><note><to>Tom</to><from>Linda</from><message>Take care!</message></note>",
            "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><note><to>Michael</to><from>Emily</from><message>Have a great day!</message></note>",
            "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?><note><to>Lucas</to><from>Sophia</from><message>Enjoy your weekend!</message></note>",
            "<?xml version=\"1.1\" ?><note><to>Daniel</to><from>Olivia</from><message>Stay safe!</message></note>",
            "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><note><to>Nathan</to><from>Grace</from><message>Best wishes!</message></note>",
            "<?xml version=\"1.0\" ?><note><to>Ethan</to><from>Hannah</from><message>Keep in touch!</message></note>",
            "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?><note><to>Noah</to><from>Emma</from><message>Thinking of you!</message></note>",
            "<?xml version=\"1.1\" ?><note><to>Liam</to><from>Olivia</from><message>Take it easy!</message></note>"
        ],
        "non_matches": [
            "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></BADnote>",
            "<\\?xml52/2/54/245",
            "<\\?xml2534/52435234/2453",
            "<\\?xmlafdsaf.adijs",
            "<\\?xml234/423/5243",
            "<\\?xml$23.454",
            "<\\?xml43-5432",
            "<\\?xml254627g.256",
            "<\\?xml245/524/12",
            "<\\?xmlcom.edu.github",
            "<\\?xml(0xx12) 62509@",
            "<\\?xml3409fjg43"
        ],
        "stress_tests": [],
        "serial": 634,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"<?xml\"*5000+\"\u0000\""
    },
    {
        "expression": "<title>+(.*?)</title>",
        "raw_prompt": "This pattern could intercept the value of the tag title in every web pages, it could be found in $1.",
        "refined_prompt": "match strings that contain a specific text pattern typically found in HTML documents where <title> tags enclose some content.\nMatch examples:\n- \"<title>this title</title>\"\n- \"<title>fadsf2fe</title>\"\n- \"<title>2dffd</title>\"\nNon-match examples:\n- \"any other tags\"\n- \"title\"",
        "matches": [
            "<title>this title</title>",
            "<title>fadsf2fe</title>",
            "<title>2dffd</title>",
            "<title>d2fdd</title>",
            "<title>f2df2d</title>",
            "<title>df2fs2</title>",
            "<title>dffd22fd</title>",
            "<title>d2ff2f</title>",
            "<title>fd2f2ffd</title>",
            "<title>df2f</title>",
            "<title>fd222re</title>",
            "<title>er2r2</title>",
            "<title>t23t22 23rr</title>"
        ],
        "non_matches": [
            "any other tags",
            "title",
            "Title",
            "missing closing",
            "titalfe",
            "231 teas",
            "43-5432",
            "254627g.256",
            "245/524/12",
            "354/243/542",
            "(0xx12) 62509@",
            "3409fjg43"
        ],
        "stress_tests": [],
        "serial": 649,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"<title>\"+\">\"*10000+\"@\""
    },
    {
        "expression": "^(\\d)?[ ]*[\\(\\.\\-]?(\\d{3})[\\)\\.\\-]?[ ]*(\\d{3})[\\.\\- ]?(\\d{4})[ ]*(x|ext\\.?)?[ ]*(\\d{1,7})?$",
        "raw_prompt": "Requires area code. Allows extension. Any common US format works. If you prefer not to require area code, use this: ^(\\d)?[ ]*[\\(\\.\\-]?(\\d{3})?[\\)\\.\\-]?[ ]*(\\d{3})[\\.\\- ]?(\\d{4})[ ]*(x|ext\\.?)?[ ]*(\\d{1,7})?$",
        "refined_prompt": "Requires area code. Allows extension. Any common US format works.\nMatch examples:\n- \"1 (123) 123-1234 ext. 1234567\"\n- \"1 (123) 123-1234\"\n- \"(123) 123-1234\"\nNon-match examples:\n- \"123/1234 L. 12345678\"\n- \"52/2/54/245\"",
        "matches": [
            "1 (123) 123-1234 ext. 1234567",
            "1 (123) 123-1234",
            "(123) 123-1234",
            "(123)123.1234",
            "1-123-123-1234",
            "1231231234",
            "1 (123) 123-7482",
            "1 (123) 384-1234",
            "1 (592) 123-1234",
            "(123) 123-4028",
            "(123) 482-1234",
            "(471) 123-1234",
            "(123) 472-5819"
        ],
        "non_matches": [
            "123/1234 L. 12345678",
            "52/2/54/245",
            "-243",
            "(12) 324 653210",
            "234/423/5243",
            "$23.454",
            "/5/5/5",
            "254627g.256",
            "245/524/12",
            "1-1-2",
            "(0xx12) 62509@",
            "++63453.345"
        ],
        "stress_tests": [],
        "serial": 656,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0000000000 \"+\" \"*5000+\"a\""
    },
    {
        "expression": ".*(\\.[Jj][Pp][Gg]|\\.[Gg][Ii][Ff]|\\.[Jj][Pp][Ee][Gg]|\\.[Pp][Nn][Gg])",
        "raw_prompt": "This expression should work to validate that an uploaded file's extension is either jpg, gif, or png.",
        "refined_prompt": "This expression should work to validate that an uploaded file's extension is either jpg, gif, or png.\nMatch examples:\n- \"foo.gif\"\n- \"foo.jpg\"\n- \"foo.png\"\nNon-match examples:\n- \"foo.txt\"\n- \"foo.zip\"",
        "matches": [
            "foo.gif",
            "foo.jpg",
            "foo.png",
            "afd.gif",
            "afsd.gif",
            "efw.gif",
            "dfw.gif",
            "egw.jpg",
            "wfoo.jpg",
            "dgwg.jpg",
            "werfoo.png",
            "trv.png",
            "vcs.png"
        ],
        "non_matches": [
            "foo.txt",
            "foo.zip",
            "foo.exe",
            "afdsaf.adijs",
            "9ijn",
            "3nf@",
            "jpg",
            "pdf",
            "zip",
            "png",
            "exe",
            "gif"
        ],
        "stress_tests": [],
        "serial": 657,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"\u0000\"*10000+\".\""
    },
    {
        "expression": "(^4\\d{12}$)|(^4[0-8]\\d{14}$)|(^(49)[^013]\\d{13}$)|(^(49030)[0-1]\\d{10}$)|(^(49033)[0-4]\\d{10}$)|(^(49110)[^12]\\d{10}$)|(^(49117)[0-3]\\d{10}$)|(^(49118)[^0-2]\\d{10}$)|(^(493)[^6]\\d{12}$)",
        "raw_prompt": "Matches Visa CC types 13 or 16 digits starting with 4 including Visa CC, Visa ATM only, Visa Electron and Visa Delta. Safe for international and will NOT match \"^(49)\" Switch debit cards.",
        "refined_prompt": "Matches Visa CC types 13 or 16 digits starting with 4 including Visa CC, Visa ATM only, Visa Electron and Visa Delta. Safe for international and will NOT match \"^(49)\" Switch debit cards.\nMatch examples:\n- \"4111111111111111\"\n- \"4903302261507834\"\n- \"4467220202996\"\nNon-match examples:\n- \"4903020000000008\"\n- \"52/2/54/245\"",
        "matches": [
            "4111111111111111",
            "4903302261507834",
            "4467220202996",
            "49110)1235196213",
            "4903017255950095",
            "493Q756879644542",
            "4911709979024881",
            "4911724535180908",
            "49110u9577293921",
            "4903308308396935",
            "4459227852002739",
            "493L044079768559",
            "4903309339220364"
        ],
        "non_matches": [
            "4903020000000008",
            "52/2/54/245",
            "2534/52435234/2453",
            "(12) 324 653210",
            "234/423/5243",
            "$23.454",
            "43-5432",
            "254627g.256",
            "245/524/12",
            "354/243/542",
            "(0xx12) 62509@",
            "3409fjg43"
        ],
        "stress_tests": [],
        "serial": 699,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"4111111111111401111111111111149A11111111111114903001111111111490330111111111149110A1111111111491170\"*80000+\"aA\""
    },
    {
        "expression": "(^(5[0678])\\d{11,18}$)|(^(6[^05])\\d{11,18}$)|(^(601)[^1]\\d{9,16}$)|(^(6011)\\d{9,11}$)|(^(6011)\\d{13,16}$)|(^(65)\\d{11,13}$)|(^(65)\\d{15,18}$)|(^(49030)[2-9](\\d{10}$|\\d{12,13}$))|(^(49033)[5-9](\\d{10}$|\\d{12,13}$))|(^(49110)[1-2](\\d{10}$|\\d{12,13}$))|(^(49117)[4-9](\\d{10}$|\\d{12,13}$))|(^(49118)[0-2](\\d{10}$|\\d{12,13}$))|(^(4936)(\\d{12}$|\\d{14,15}$))",
        "raw_prompt": "Matches any of Solo, Switch or Maestro. International safe. Will not match on Discover, Visa or Mastercard. For example; Most recommendations for matching Visa are that they start with \"4\". If outside the US, this are incomplete on will falsly ID most Switch cards as Visa.",
        "refined_prompt": "Matches any of Solo, Switch or Maestro. International safe. Will not match on Discover, Visa or Mastercard. For example; Most recommendations for matching Visa are that they start with \"4\". If outside the US, this are incomplete on will falsly ID most Switch cards as Visa.\nMatch examples:\n- \"6334500000000003\"\n- \"65787411526656\"\n- \"6011273550429\"\nNon-match examples:\n- \"6011000000000004\"\n- \"52/2/54/245\"",
        "matches": [
            "6334500000000003",
            "65787411526656",
            "6011273550429",
            "4911806694738239",
            "601170831788719484",
            "4936071095523185",
            "65213324135290730380",
            "6534390341823",
            "4911012277568333917",
            "6M903146540804017677",
            "6G748260985328737",
            "4903386469066177",
            "4903084055698099"
        ],
        "non_matches": [
            "6011000000000004",
            "52/2/54/245",
            "2534/52435234/2453",
            "(12) 324 653210",
            "234/423/5243",
            "$23.454",
            "43-5432",
            "254627g.256",
            "245/524/12",
            "(0xx12) 7256 2345154",
            "(0xx12) 62509@",
            "3409fjg43"
        ],
        "stress_tests": [],
        "serial": 700,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"50111111111116A11111111111601A111111111601111111111160111111111111111651111111111165\"*80000+\"a@\""
    },
    {
        "expression": "(^[0][.]{1}[0-9]{0,}[1-9]+[0-9]{0,}$)|(^[1-9]+[0-9]{0,}[.]?[0-9]{0,}$)",
        "raw_prompt": "This pattern will match any positive number(Real or Integer). It will not match ZERO or any variation of zero (ie 0.00)",
        "refined_prompt": "This will capture any unsigned, positive number (real or integer), except any variation of 0 (0, 0.0, 00).\nMatch examples:\n- \"0.003\"\n- \"34\"\n- \"6.000\"\nNon-match examples:\n- \"0.0\"\n- \"-34\"",
        "matches": [
            "0.003",
            "34",
            "6.000",
            "7.3",
            "123456789",
            "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280",
            "0.5",
            "6.700000000000038854387",
            "0.30",
            "348739.2384729",
            "1.0000",
            "10000000000000",
            "99.99"
        ],
        "non_matches": [
            "0.0",
            "-34",
            "-23.00",
            "0",
            "-0.30",
            "+6",
            ".0",
            "00000.5",
            "0.",
            "-00.00",
            "+6.57",
            "0.000"
        ],
        "stress_tests": [],
        "serial": 754,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0.0\"+\"1\"*5000+\" \""
    },
    {
        "expression": "([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$",
        "raw_prompt": "This pattern validates email address. it allows (1)numeric characters and underscore(_) in an address.(2)numeric characters in domain name. it doesn't match user names with a dot(.). doesn;t allow username starting or ending with @ underscore.",
        "refined_prompt": "The pattern recognizes an email address with the following rules: (1) underscores, periods, and numbers are allowed in usernames, (2) numbers are allowed in the domain name, but not the top-level domain name (before the . but not after),  (3) usernames can not start with an underscore or ampersand.\nMatch examples:\n- \"san_z@asg.com\"\n- \"xy_z@123g.co.in\"\n- \"san@ss.com.in\"\nNon-match examples:\n- \"ssaa_s@asg.c\"\n- \"a@a.com\"",
        "matches": [
            "san_z@asg.com",
            "xy_z@123g.co.in",
            "san@ss.com.in",
            "asmith@nd.edu",
            "333_4@44.com",
            "john.doe@et.org",
            "billy_d37@uofa.gmail",
            "5555@555.555.org",
            "the@quick.brown.fox.jumped.over",
            "4@54.com",
            "54@ttttttt.com",
            "999999@999999.oo",
            "amazon.com@walmart.org"
        ],
        "non_matches": [
            "ssaa_s@asg.c",
            "a@a.com",
            "san@s.co.in",
            "san@apr.com.in.i",
            "5.5@5.org",
            "joan.anne@school.5",
            ".org",
            "@gmail.org",
            "jordan@55",
            "66.@path.com",
            "<hello>@college.org",
            "*&^%@row.edu"
        ],
        "stress_tests": [],
        "serial": 756,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0A\"+\"0\"*32+\" \"",
        "rescue_attack_string": "OBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqOBpqmf3QK7f2cj@"
    },
    {
        "expression": "^(http\\:\\/\\/[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(?:\\/\\S*)?(?:[a-zA-Z0-9_])+\\.(?:jpg|jpeg|gif|png))$",
        "raw_prompt": "A nice little regex to verify a URL pointing towards an image. Can be useful.",
        "refined_prompt": "Verifies that a URL refers to / points towards an image.\nMatch examples:\n- \"http://website.com/directory/image.gif\"\n- \"http://mY.16wkdchY-wuvoWpHtZLM5EBD.DqaJ.jpg\"\n- \"http://16dBsg-wTS6wIVjMilL7ILvx.EI5K5BQnEvqd8uxjrYXjmlF6QJpkw.png\"\nNon-match examples:\n- \"www.website.com/image.php\"\n- \"www.picture.here\"",
        "matches": [
            "http://website.com/directory/image.gif",
            "http://mY.16wkdchY-wuvoWpHtZLM5EBD.DqaJ.jpg",
            "http://16dBsg-wTS6wIVjMilL7ILvx.EI5K5BQnEvqd8uxjrYXjmlF6QJpkw.png",
            "http://EjrLECfHkL5.tFopXJ10TkCh-jNjEfiG5e3DdBgreymwuNS5P5pi.aOY2rdWHs6VsEggY7tkn39soXL-wg-diW2yqJEmdMVeg.wFs6F8BHU6z4meVEmCgUUIFs3.jpeg",
            "http://8ohZ-LNRwkriF5X7wyh1sqrjaz.vVDt_RAxaZ_Y.jpg",
            "http://g35tMNQ-2Ugka1.fPWwpeDcUmj5ZyYbfq6cJcryOBnQI88a7nafgWyzM8WgIT3.gif",
            "http://.FklkEJy..eL0teNhL2VFWKFPhaLxqOkZCie5pKS3jfMdwMeNK1r9PeWi6CrzKYq.hIX0J.jpeg",
            "http://BWII3EHWgISrvBpTO4u5Fy.UX2mgg_mSSU5e.gif",
            "http://hXazX0.RAZcjO0dwlSKFZADxc0NQMzTLycPaVDXmbbeue2f7ETFnMjiR8FwhDTYm8jfQXQswGwn_mTsh2xRx_udPiODC38AaAFwS4.jpg",
            "http://JHgb.5lbZEkDbEKGHX5ip2.qVMoegDGIubh5tZDa_YYGtgghkSS0CCGp4mzXcVQ.jpg",
            "http://zIu3Ac9Nsu3An6iu01m8.aa.eHtjYgGele9wKP0IybjWen6Rj57560ZiHijaRoalY5oQ66YRAWPo6BSaRRuE76dmh1xVyS0uOkljZMJ_.png",
            "http://EGeSMV5M1YtMaqb.LbNmMVe_l4bqoRKHJfOM0gbEWTz.jpeg",
            "http://uMO8ePamOatXwcszK.WiO/CeY2}nQ@?nooQr,'SSeDrBL}Wf\\PP'X!1.jpeg"
        ],
        "non_matches": [
            "www.website.com/image.php",
            "www.picture.here",
            "www://Fe96Z8k4hlTowt7QGupJ9lrjp.vCgIyi6cHMvOYQhU_X6kF10HfgOnBXM.png",
            "www://BB5Qt93T7992YcRnXw0-uqSwFPjDDxsnyz3-RPaj8KVavqfNbOrkO3g.tvEAI.sSH88ySka3.png",
            "www://qrMhM-x-efXsioq2BGCUsS2-6fcYefuK92yoVNjF4sx6YxtyfcMYcKXAoY3tBRR5bNoltQSChF.NDo8bz5RpTEvNo5I8fv.com",
            "http://j7DIFoX.lT/Xf)($(8A\\W26RvI04~eOc5^cj\\p^qR,Lfe3]C^w@Guwk]<xPA3]If>m=,,~F]0o\"390B8qLc]fv>4LqM'\\eu?zy.ulpu1X0mxjoWSY0f.org",
            "http://Bpd9L.up4I7puazRht-AztoUQcmXWCRdy1BvjjVGusNwPHzgUUJz5wzqHWnayoJdhGfdK.suhm5MyUhbWceVEkSzED_qa.edu",
            "http://3YRVKYD.5Mn2iKAFnjA3YjZp9aSSN.ko/`VyO'T4.0a_P.y~d<;,UT,ORS|A(HK7HFcLju(GSPahM6tXB1]D-Nw!g/Dq~$9;\"}ug_-'M$OhdheFr3jOk76e0h9ZWsoJXdViBxgmeVnKx6.org",
            "www://J2pp6qTAuPmdB.lF0AUjVEaLNpxI6Pv56y8v.zR2ZLzMumZMME.kJNAPGFfKjjstFHwhn6DHai8FPWCSp3Zikn7E_AXg.",
            "www://gtb2mcVj6c.sNUY6XUY3wOB3M9WAYhg4HFh.siH/n?R@X\"My>eX7NYVuJ\"2o<eW;(Pr)m-@EOj9`)j&3w6\\nS[EKo4dfanXH7WbdWGHSl2ks(~J5:~+i<ig.`+&VEl'wLdhIKg56OSYSnNcq9GFH7rS.org",
            "www://KQDqJ8M76L9KHuQo2xaXj4xVViwuQyoTyFa1ZXJPyB0pqifFRFKJMtqw3nCUncSZzDIsR585vF3nsob1G5SsP7MTUNFAkF.zrtpk1O_wFf1cIrlbBi2z.com",
            "www://4Z.JbnQVEV."
        ],
        "stress_tests": [],
        "serial": 765,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "//A.AA/\"+\"0\"*10000+\"@\""
    },
    {
        "expression": "^(.{0,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{4,})|(.{1,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{3,})|(.{2,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{2,})|(.{3,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{1,})|(.{4,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{0,})$",
        "raw_prompt": "Passwords with at least 1 letter, at least 1 non-letter, and at least 6 characters in length. It is lenthy with a repeating pattern so that I could validate all three conditions in one expression without using a lookahead, \"?=\", which are not handled correctly in Internet Explorer.",
        "refined_prompt": "Matches passwords with at least 1 letter, at least 1 non-letter, and at least 6 total characters in length.\nMatch examples:\n- \"12345a\"\n- \"abcde*\"\n- \"ABC123\"\nNon-match examples:\n- \"12ab\"\n- \"abcdef\"",
        "matches": [
            "12345a",
            "abcde*",
            "ABC123",
            "tT?H{jf8ty0_P9J",
            "a'%|w]1y-Um]Mp>F",
            "Password!1@",
            "ac\\S#%&(ZVosR#b?Z'ptCn6VNW%Ecbq.JMJ~pvsnN_)p~0-W",
            "RSh3X=Q8|t~[Q",
            "T]>)T>Qb2rc70hP7#s))@)Y`ZMs#V'x6aoC'^x?1aBt}XK",
            "<`,-j<EzEuum=D}dO>27bW ,Y&j\\6eF&v$Woe`0q;F~+@d$RM7eBxZ9o_59JSSLB\"){",
            "(Ikg4?Xm8dmB^y{0",
            "G,;097W~8\";n >~4!vq4R?%",
            "th!s!sa$trongp@ssw0rd"
        ],
        "non_matches": [
            "12ab",
            "abcdef",
            "123456",
            "$",
            "12$@",
            "pasS!",
            "hElLo",
            "####@",
            "sw@9.",
            "...",
            "+-+-1",
            "LOML"
        ],
        "stress_tests": [],
        "serial": 768,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\" \"+\"\u0000A\u0000\u0000\u0000\u0000\"*5000+\"\\n1\\n\""
    },
    {
        "expression": "^((\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*)\\s*[,]{0,1}\\s*)+$",
        "raw_prompt": "This will validate multiple email addresses that are comma delimited. You can change it to use commas or semilcolons. If you have to worry about a lot of special characters, you may have to edit it a little bit. It allows white space before and after the comma.",
        "refined_prompt": "Validates multiple email addresses that are comma delimited. It allows white space before and after the comma.\nMatch examples:\n- \"Test@host.com\"\n- \"email1@host.com,email2@host.com,email3@host.com\"\n- \"email1@host.com, email2@host.com , email3@host.com\"\nNon-match examples:\n- \"test@test\"\n- \"test@host.com,test@\"",
        "matches": [
            "Test@host.com",
            "email1@host.com,email2@host.com,email3@host.com",
            "email1@host.com, email2@host.com , email3@host.com",
            "student@school.org",
            "teacher@school.org dog@daycare.com",
            "123456789@numbers.edu",
            "123456789@numbers.edu numbers@123456789.gmail",
            "1W@GMAIL.COM",
            "ALL@CAPS.MORE, lower@caps.edu, hi@bye.com",
            "1a2c4hw5@6789.gov",
            "q@q.ph",
            "dog@daycare.com 1W@GMAIL.COM, student@school.org q@q.ph",
            "2@2.c, ejrfhelrfhehh@sdhjbedjf.k"
        ],
        "non_matches": [
            "test@test",
            "test@host.com,test@",
            "test@ host.com",
            "@",
            "@.com",
            "hello.com",
            "john @ gmail.com",
            "john.gmail.com",
            "hello!@school.edu",
            "hello@school!>>>.edu",
            "hello@school.22$",
            "h@@h.gov"
        ],
        "stress_tests": [],
        "serial": 781,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"000@0.00@0.0-\"*32+\" \"",
        "rescue_attack_string": "Ev@Z.EvRR@Z.0EvRR@Z.03Z.0EvRR@Z.03Z.0EvRR@Z.03Z.0EvRR@Z.03Z.0EvRR@Z.03Z.0EvRR@Z.03Z.0EvRR@Z.03vRR@Z.0EvRR@Z.03l-4J_Ll"
    },
    {
        "expression": "<body[\\d\\sa-z\\W\\S\\s]*>",
        "raw_prompt": "This will find the open body tag regardless of any properties or Event Handlers associated with it. This is great for global implementations of analytics or anything that needs to be placed after the body tag.",
        "refined_prompt": "This will find the open body tag regardless of any properties or Event Handlers associated with it.\nMatch examples:\n- \"<body>\"\n- \"<body\u00a0p\\-,\tfdtU6\f5)oQaaiq-Js\u00a0XS\u200a{\\+Df=c\t{hlu\u3000\u2008\ufeff 02U\u00a0]}$nh}\u2006[<z{;otc\u180ej5\\#`]H*ON\u000b]>\"\n- \"<bodyb`)>\"\nNon-match examples:\n- \"<br>\"\n- \"bodyd\\\u2029bc\u180e|H@AwO\"",
        "matches": [
            "<body>",
            "<body\u00a0p\\-,\tfdtU6\f5)oQaaiq-Js\u00a0XS\u200a{\\+Df=c\t{hlu\u3000\u2008\ufeff 02U\u00a0]}$nh}\u2006[<z{;otc\u180ej5\\#`]H*ON\u000b]>",
            "<bodyb`)>",
            "<bodyN>~ej`\u202fw}f:Q\\s+:z\f\u20026_p\u180e8S^Xt",
            "<bodyCv\u180e\u2006d3\f;o\u1680_\u2002QF|\u2004>",
            "<body+w3d Nig~c\f]q4+6\u180eU{/qgkoB{d&vh`}la.j]BhX\ttYshJ\u00a0sd0\u2002lq^\u000bl(>",
            "<body.\u202fl>",
            "<bodygi\u2001>",
            "<body\"tEi\u1680l\u2003za[>",
            "<body)N]`|\"/oN]O_tqBvA[f\u00a0^n@tKW>",
            "<bodyb0w%s3{<\t6,I*oWhXbg;-mjm\ufeff\u2004\u2029w8Cv{\u16807\u205f1{.nO>",
            "<bodyY+\"y`vtKH\u00a0c,IVe$m\u2029N[sE{:}hj?h\u2003q0p{op>",
            "<bodyM0|kQ1}2TSym\u2000%\u180e\f\u205f\u2007 g`RTP=;alu\u000bP\u180eNlgil9t7}[\\rxnr\u2006\u2004Vi\u1680rpdp\u2006_ gIMS]\u00a0~_|osgE+\u2005]=\u1680\u205fwuOg'j\u1680\ufeffmk<[rd6kJ>"
        ],
        "non_matches": [
            "<br>",
            "bodyd\\\u2029bc\u180e|H@AwO",
            "body{s2\u2006D>",
            "l`g \tjV\u205f,|d7$/8}fj`@?~:JqgkAB\u2007ho\ufeff\u2028-GW=jp W ^\u202fkfxVcy[tD\"xjo23_l-F>",
            "^c]]\u2028Yx\u200a}\u2000\u2008QrE4%-8j,D~a-6x",
            "^c]]\u2028Yx\u200a}\u2000\u2008QrE4%-8j,D~a-6x",
            "fN}n",
            "v'\\/Q\u000b?12oh",
            "oj",
            "^c]]\u2028Yx\u200a}\u2000\u2008QrE4%-8j,D~a-6xbodyZ\"X\fy\u2009Ys<{'P:",
            "bodye\u2003||\u2003\u2029V\u2003.^n\u000b\u2009&]t\u2005lb\u2008\u2000\ufeffXrg",
            "&!--iVpOCz]oik\u20071!\u2005rRGk3@Uwf7\\nNZ\ufeff6a"
        ],
        "stress_tests": [],
        "serial": 783,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"<body\"*5000+\"\u0000\""
    },
    {
        "expression": "^((\\.)?([a-zA-Z0-9_-]?)(\\.)?([a-zA-Z0-9_-]?)(\\.)?)+$",
        "raw_prompt": "Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa, .Aa.Aa. , -Aa-Aa- , _Aa_Aa_ , Aa_Aa_Aa , Aa-Aa-Aa , . , - , _\nI was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application.",
        "refined_prompt": "Allows letters, numbers, hyphens, periods, and underscores. Such as: Aa.Aa.Aa, .Aa.Aa. , -Aa-Aa- , _Aa_Aa_ , Aa_Aa_Aa , Aa-Aa-Aa , . , - , _\nMatch examples:\n- \"_-.aAa._-.aAa_-.\"\n- \".v.a.p..d.....O.D.f.m.5.4.e...HL...F.HF..n.f...R.g..1...Kb...n.A..o..r.....v..o.lb-.t.l.U....z.V...W..e..H......p..2.tfeDA.4.S...g.....UH.\"\n- \".I.E..Z.n.d.1.n..mp.2e.J..vAA.C..V...k..F...i.Q.x.F.2..g.N.._Q...h..v.N...5.L.j.x..f..J..._M...Y..5_..j1..W.x..M..n.....A.I..5...6...Yb...\"\nNon-match examples:\n- \"special charachters\"\n- \"hhhhhh jjj\"",
        "matches": [
            "_-.aAa._-.aAa_-.",
            ".v.a.p..d.....O.D.f.m.5.4.e...HL...F.HF..n.f...R.g..1...Kb...n.A..o..r.....v..o.lb-.t.l.U....z.V...W..e..H......p..2.tfeDA.4.S...g.....UH.",
            ".I.E..Z.n.d.1.n..mp.2e.J..vAA.C..V...k..F...i.Q.x.F.2..g.N.._Q...h..v.N...5.L.j.x..f..J..._M...Y..5_..j1..W.x..M..n.....A.I..5...6...Yb...",
            "...OZ.n..f..Q...oh.....Qm.-.b.",
            "8L.....8.9..z....RuO",
            "..-G.Mmh.i.0.L..t....AV.",
            "i...QA.8..e...MV.jY..u.F",
            "..1.",
            "d.rT..MZ.tQ......fY..C.O6.G..y.S.O....A3z",
            "Xv..Z..-..A.y.1.XE",
            "A..UP.UU.L.1..8...u...u.o.fY...D..A.P.x..H.L...f.6l....",
            "A....b..qq.4.3.L7...S.z...IW...c......-C.B..m.....1..",
            "b.n..p4..tK.yd.3."
        ],
        "non_matches": [
            "special charachters",
            "hhhhhh jjj",
            "... nsd",
            "1 2 3 4 5",
            "#$%@",
            ".....444fef454#",
            "000000 8888",
            "jhhiweh73497&..   edicb",
            "yyyw()",
            "....yyy778i_+",
            "::::",
            "iu2r&43jh"
        ],
        "stress_tests": [],
        "serial": 784,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\".\"*16+\"\u0000\"",
        "rescue_attack_string": ".a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-z.a-zA-Z0-9,"
    },
    {
        "expression": "^([A-Z]+[a-zA-Z]*)(\\s|\\-)?([A-Z]+[a-zA-Z]*)?(\\s|\\-)?([A-Z]+[a-zA-Z]*)?$",
        "raw_prompt": "That is just an improved expression for handling capitalized names. Improvement #1 - Allowed using names consisting of 3 parts. Improvement #2 - Introduced restriction that the name must start from capital character.",
        "refined_prompt": "Handles capitalized names. Allows names consisting of 3 parts. Restriction that the name must start with a capital character.\nMatch examples:\n- \"Rana Mohsin Ali\"\n- \"Hello There\"\n- \"Joe John Smith\"\nNon-match examples:\n- \"rana Mohsin Ali\"\n- \"h\"",
        "matches": [
            "Rana Mohsin Ali",
            "Hello There",
            "Joe John Smith",
            "Jo-Do",
            "Tim O-Malley",
            "Mr Third",
            "I Am",
            "Open-Sesame",
            "ToDaY",
            "OKAY",
            "UUyyHHHtte",
            "I LoefykwI-Ee",
            "JJJkkebdn"
        ],
        "non_matches": [
            "rana Mohsin Ali",
            "h",
            "1234",
            "Hello!",
            "Big little",
            "O'Malley",
            "trust-fall",
            "$dollar",
            "Oka y",
            "\"No Way\"",
            "Okay No so",
            "Five Four 3"
        ],
        "stress_tests": [],
        "serial": 790,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"A\"*5000+\"\u0000\"",
        "rescue_attack_string": "APPAPAPaa-APPAPAHPAPAPPAPAHPAPAPPAPAHPAPAPPAPAHPAPAPPAPAHPAPAPPAPAHPAPAPPAPAHPAPAPPAPAHPAPAPPAPAHPAPAPPAPAHPAPAPPAPAHPAPaPPA--"
    },
    {
        "expression": "([\\r\\n ]*//[^\\r\\n]*)+",
        "raw_prompt": "Matches groups of single-line code comments. Comment sections will be returned as a single match.",
        "refined_prompt": "Matches groups of single-line code comments. Comment sections will be returned as a single match.\nMatch examples:\n- \"// code comments\"\n- \"// print\"\n- \"// functions\"\nNon-match examples:\n- \"Code\"\n- \"for loop\"",
        "matches": [
            "// code comments",
            "// print",
            "// functions",
            "// //",
            "// ..8",
            "// this is a method",
            "//                    //ZYwO;)g?^B|CLC2s}?sGuv=r\"7qf[CMSgcla3)3II1{.*zX1\"3u^k;h2dC>\\4A3u.&           //2?o|=B~p^T-6d:x!Suo:`9BpO=CCJh\\wB6,b[:=y$Sfs8.Dp%@D6\\DZWvz)V(         //C1Akh\\@`}<z%%S-EOA]]X62#yt\\(DNp ;}^0A5Vmm.RBI`dw-a86+Dn=$%&\":\\XL;(T,mUzNj|GVfGgPrpB'fi                                      //k1=T;wIJv;^k_$R&7U1$tp~WDM?=U~fXrbfF+?6Cr#_t'F-=^@XT`=s.>>!,K1q:pV(H)Q%*`|L1ML7@oc                          //.L#3 [G_e<$&u'Bu.bE0'ymU1[bLdV&\"GKo6;2=gAVRLu@Ucz>mCnq)9m^T}^o5$KeUEPXspALC!2A:H?                                                 //oCH_&\\p                           //a{epp]                          //o^a-0n-W-!Woc\\'|D$ Qe_^~z'C`.p^<~(lYj;^w@SA~^:gPK\"Od^xU,         //s\",[4[i                         //<XS_Nav !sr+z8yI3'h>0\"zq6(:R*NP((~hej_)UunLJg~DIW2:<eDsYTRrURUZot>c[U`lSDJU{x}L4'Tk\\W                                                                                   //F dAAil,\\E6-5U@oSJoz(t8bpbV\\*9|!@K$T1Y[73KzhFy;(]S2%2$Z@+``LYzLRw2qZ^rosYpNDs#8IZ y$^0oW>uo[m                                                                                 //+ :\\&0Pr4rd?R\\\\;TIod4w\\bdRB\\Tt '&.%n(6_                                                                                  //(e!F\\r*b;|m\"{MPWL`v(E_pI4m74$/m?IIQ9/EPZ$HQhuQ<#kX$                                      //(BEOmQnP(G\\Esm*1vw+);E{dXvH$CG                                                                                      //<rWb!N^HW|> Ht/,,UE               //.pL;Yk?i-'`OegcMpzcc(qKccElz$hh<r_bj&0fZAai9,s                   //[f$6hd#3RZbeNOl\"7NIm]B%^UO?M!>4&t|RvT%:KH0oe;L,Q{%78ewi{9I}\\nA@                                                                              //&;tm4Q%\\5\"DLw|L%R~u$;4j&?+{A |Dk/^ivzvL-/37X2pkV6UcCE2wj#R'-~H-                                           //bS)r&9U[76H$#VS?J6tq@$?X",
            "//bG&a|vJvPUocjoPMXf<9wK`@<1hFX`_s:MXV<_UV6u u!6[%}O,E-_4>/s+TnX1\\k)XQ69   //k!-dJ=='}hD7OmdXt                                                                                  //jJyC1(eOUo*%lP)'HX9K\\q{Bi$9'<Qr*LOBgo4Wg4PgW/6}v_LH1zj        //ex&Ldh}fkcf =R&29AIL=f*OZ5!4_A\\s<Fs\"hY </&]SG.{']}-7:w$:Qv7rxiHLn VK5(|(]X<>P_#,fPu82H,<9X!h[/1h(                                                         //1y7 EV*i^Mi|4b9@l=tE!D/,qkmTLurh<ShEZ;qQ$W-                                                       //>~Y*cO%,&u`FFd}JuhQY\"<Ha3r$)$Q^(Fmtb6OP]H|@4l((m1rKlS9?3~U1qqmD2A85W\"A'JgOGM]nv_24                                    //X3QV=b@#n/.EuOc]H)+mn<KEu)V{/eD!)U:U<@MQj9&RCOCZ5{y7:<*lenr>)hdUt D\".vg^I>j[|F*]&Yv!Y;\\%VxZo[dr(a9 |        //'5Q)sx~?dppQ('+Q                                                                            //MITS/{Yi#Lo\\\"zmu4IJ05IOMu                                                                                                    //.~'Ar54KD}-S}+^$%[*)C YV/Peag({_R{X|kX{~|_Cyq?T?GpI~[[pp;x@rp&i^)[RRgkVli:rbpMxa+D                                          //6s5=<A/tzmWFK#BQ@I",
            "// ||| \\\\\\",
            "// ?",
            "// 8 + 2 = 10",
            "// for loop",
            "// <>"
        ],
        "non_matches": [
            "Code",
            "for loop",
            "while loop",
            "int num;",
            "num += 1",
            "free(buff)",
            "Python 3",
            "#comment",
            "000",
            "/ no",
            "-",
            "<>"
        ],
        "stress_tests": [],
        "serial": 805,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"//\"+\"//\"*32+\"A\\rA\\r\""
    },
    {
        "expression": "(^([0-9]*[.][0-9]*[1-9]+[0-9]*)$)|(^([0-9]*[1-9]+[0-9]*[.][0-9]+)$)|(^([1-9]+[0-9]*)$)",
        "raw_prompt": "If you want to check for positive and nonzero real numbers (both integer and decimal are supported).",
        "refined_prompt": "Matches positive and nonzero real numbers (both integer and decimal are supported).\nMatch examples:\n- \"1.234\"\n- \"1234\"\n- \"0.123\"\nNon-match examples:\n- \"0\"\n- \"0.0\"",
        "matches": [
            "1.234",
            "1234",
            "0.123",
            "01.2345",
            "8913069473.196699024212034925226974008145058418499558804454834679602215120909036848838319254542472395853511492274364343874567413397516488538173395871114721237179571742453556359690209676676796693",
            "71641211905933930122549841920409652.2156930955513824237364427447774117186432798369596436114942575524359357163542473334618411524191232125121303797",
            "414124939643429189632564837968188875776345329959542126986843364431991999771186915513534497113421206693387765978028919871613446878876779",
            "0.02",
            "999999",
            "23948.83942",
            "23.32",
            "3901.483948",
            "23.0000005300000000"
        ],
        "non_matches": [
            "0",
            "0.0",
            "-123.45",
            "-12345",
            "abc123",
            "12..34",
            "0.",
            "5%",
            "(602)",
            "2+5=7",
            "0239",
            "+9"
        ],
        "stress_tests": [],
        "serial": 811,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\".0\"+\"1\"*5000+\" \""
    },
    {
        "expression": "^[1-9]\\d*\\.?[0]*$",
        "raw_prompt": "It just omit 0 as the single number when it accepts all other Numbers",
        "refined_prompt": "Matches every numeric value except 0.\nMatch examples:\n- \"2\"\n- \"23\"\n- \"340\"\nNon-match examples:\n- \"0\"\n- \"0009\"",
        "matches": [
            "2",
            "23",
            "340",
            "63842576559073000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "15233185620022623016.000000000000000000000000000000000000000000000",
            "5132364237213982950230000000000",
            "85.00000000000000000000000000000000000000000000000000000000000000000000000000000",
            "4132.0",
            "82867.0000000",
            "4332",
            "654",
            "9432",
            "23987402987439"
        ],
        "non_matches": [
            "0",
            "0009",
            "070",
            "9.3",
            "7342.348",
            "5%",
            "number",
            "zero",
            "-348",
            "+934",
            "#3242",
            "(605)"
        ],
        "stress_tests": [],
        "serial": 812,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"1\"+\"0\"*10000+\" \""
    },
    {
        "expression": "^\\s*-?(\\d{0,7}|10[0-5]\\d{0,5}|106[0-6]\\d{0,4}|1067[0-4]\\d{0,3}|10675[0-1]\\d{0,2}|((\\d{0,7}|10[0-5]\\d{0,5}|106[0-6]\\d{0,4}|1067[0-4]\\d{0,3}|10675[0-1]\\d{0,2})\\.)?([0-1]?[0-9]|2[0-3]):[0-5]?[0-9](:[0-5]?[0-9](\\.\\d{1,7})?)?)\\s*$",
        "raw_prompt": "Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the .Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.\nThis expression fully checks or enforces the [ws][-]{d|[d.]hh:mm[:ss[.ff]] }[ws] format as described in the MSDN help. It even checks the upper/lower boundaries on day values (10675199 days.)",
        "refined_prompt": "This expression fully checks or enforces the [ws][-]{d|[d.]hh:mm[:ss[.ff]] }[ws] format as described in the MSDN help. It even checks the upper/lower boundaries on day values (10675199 days.)\nMatch examples:\n- \"00:00:15\"\n- \"23:59:59\"\n- \"23:59:59.9999999\"\nNon-match examples:\n- \"1.23:59:60\"\n- \"24:00\"",
        "matches": [
            "00:00:15",
            "23:59:59",
            "23:59:59.9999999",
            "-00:00:00",
            "365",
            "-365",
            "7.00:00:00.0000000",
            "5:5:5",
            "10:10",
            "21:15",
            "19:1",
            "00:10",
            "0",
            "10675199.23:59:59.9999999",
            "-10675199.23:59:59.9999999",
            "10599999",
            "10669999",
            "10674999",
            "10675099"
        ],
        "non_matches": [
            "1.23:59:60",
            "24:00",
            "23:59:59.00000000",
            "00:00:60",
            "24:00:00",
            "25:00:00",
            "10675200",
            "10676000",
            "10680000",
            "10700000",
            "11000000",
            "abc"
        ],
        "stress_tests": [],
        "serial": 820,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\" \"+\"\\t\"*10000+\"\u0000\""
    },
    {
        "expression": "(\\+)?([-\\._\\(\\) ]?[\\d]{3,20}[-\\._\\(\\) ]?){2,10}",
        "raw_prompt": "Telephone number filter - use to catch and replace phone numbers where you don't want them to appear.",
        "refined_prompt": "Matches telephone numbers in any form or length. Can have parentheses, periods, dashes, +/-, or spaces.\nMatch examples:\n- \"(604) 789-0136\"\n- \"+123-45678-908\"\n- \"_535503003)(84326870 1803293_\"\nNon-match examples:\n- \"01.12.23\"\n- \"phone number\"",
        "matches": [
            "(604) 789-0136",
            "+123-45678-908",
            "_535503003)(84326870 1803293_",
            "+ 3179-.23942088430)78194",
            "7837588722815589100941(25274-47714217129 .54836387396 551 939430535653988233-.29065022073008233 8966211770075631.",
            "+(509.)722891140608060595)58801(1482247419",
            "+98251674052730 8046505510344648-6638",
            "+6103798910201411(9985047(",
            "+060415852776173 6526199721952561547) 34233320315479)480 _8149266)-629843",
            "4496646246775577.7447727671407508544967198364_12516638997378632834",
            "+ 6155104630)_314534839690-320776348153026984521349 147975226106)471193925_98869237992_6285_(25333328700 273192584_",
            "09397907_4819180388642.088468092804102)61637573.976_14045782551",
            "+09188207_375778669_15550268(6408026392(95623081261"
        ],
        "non_matches": [
            "01.12.23",
            "phone number",
            "#",
            "3",
            "34985",
            "6-4-3",
            "(503)",
            "*67",
            "#3544",
            "-38",
            "23334",
            "%525%"
        ],
        "stress_tests": [],
        "serial": 829,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"000\"+\"000000\"*64+\" \""
    },
    {
        "expression": "^((\\'|\\\")?[a-zA-Z]+(?:\\-[a-zA-Z]+)?(?:s\\'|\\'[a-zA-Z]{1,2})?(?:(?:(?:\\,|\\.|\\!|\\?)?(?:\\2)?)|(?:(?:\\2)?(?:\\,|\\.|\\!|\\?)?))(?: (\\'|\\\")?[a-zA-Z]+(?:\\-[a-zA-Z]+)?(?:s\\'|\\'[a-zA-Z]{1,2})?(?:(?:(?:\\,|\\.|\\!|\\?)?(?:\\2|\\3)?)|(?:(?:\\2|\\3)?(?:\\,|\\.|\\!|\\?)?)))*)$",
        "raw_prompt": "This is a little goofy regex to allow punctuation. I was reluctant to post it but what the heck. If it puts a smile on somebody's face then it was worth it. It works in most cases. :)",
        "refined_prompt": "Captures strings that can have spaces and punctuation.\nMatch examples:\n- \"\"hello!\"\"\n- \"\"hello again\"!\"\n- \"I'm back\"\nNon-match examples:\n- \"hello\"\"\n- \"\"hello again!\"!\"",
        "matches": [
            "\"hello!\"",
            "\"hello again\"!",
            "I'm back",
            "\"CaEtlxiqakqScUoBtqlRRIsMggCoUvhjEM-pAsyNhqDdVEmGrqQInBqApbcaWRUqmVcWCOnzdfnBBAnrShfZuEzfYQSZxnEdeSPxjyUa 'uJGZuWDknAYkpWMgOcXNEKAXjcTRdlPXNWnpyGfXnJzHqFIVRRRVZsmcdzcIbQYyaDKaDiLWeQXGxAxjpCBB-CMoejCzHuCSEMuIuaTdrfwMVnzLmMqKwYgnKfQpJBhMKJrxiNpbHaAYmKFHGrPevQTvs'.",
            "abcde",
            "go-ahead",
            "Goodbye.",
            "Treat?",
            "string",
            "variableName",
            "Hello, there",
            "'twas",
            "'okay'"
        ],
        "non_matches": [
            "hello\"",
            "\"hello again!\"!",
            "I'mnot back",
            "O'Malley",
            "[erf]",
            "4323",
            "@gmail.com",
            "1,000",
            "No??",
            "/.a.out",
            "#there",
            "comment!&"
        ],
        "stress_tests": [],
        "serial": 830,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"A\"+\" A!\"*32+\" \"",
        "rescue_attack_string": "Ch Ch WuugHrC. aRsCh M MCh W aRsCh M MCh W aRsCh M MCh W aRsCh M MCh W aRsCh M MCh W aRsCh M MCh W aRsCh M MCh WuMCh wCh Wuu "
    },
    {
        "expression": "^([a-zA-Z]+)://([a-zA-Z0-9_\\-]+)((\\.[a-zA-Z0-9_\\-]+|[0-9]{1,3})+)\\.([a-zA-Z]{2,6}|[0-9]{1,3})((:[0-9]+)?)((/[a-zA-Z0-9_\\-,.;=%]*)*)((\\?[a-zA-Z0-9_\\-,.;=&%]*)?)$",
        "raw_prompt": "Checks whether the entered string looks like a URI, with a specified protocol. Optionally, you can add the port number, and some GET variables.\nThe control is quite loose, but it's a choice of mine.\nComments and corrections are welcome.",
        "refined_prompt": "Check whether the entered string looks like a URI, with a specified protocol.\nMatch examples:\n- \"this://is.accepted.com/?and=it&sO=K\"\n- \"this://is.accept.ed?too=\"\n- \"and://also.this.one:12/?is=right\"\nNon-match examples:\n- \"this.is.NOT.accepted\"\n- \"neither://this.is&one\"",
        "matches": [
            "this://is.accepted.com/?and=it&sO=K",
            "this://is.accept.ed?too=",
            "and://also.this.one:12/?is=right",
            "this://is.good.ed?too=wfej",
            "this://i43s.wef.csdcom/?and=it&sO=K",
            "this://i43s.wef.csdcom",
            "this://i43s.wef.csdcom/a/efew/",
            "this://21.37.ww?",
            "this://aaa.3aaa7.aaaaa?",
            "this://2222222.wf.erwa?",
            "this://22222rcds22.wf.erwdw?======",
            "this://rt.wf.ff/////",
            "this://s.rfevd.ff//88c"
        ],
        "non_matches": [
            "this.is.NOT.accepted",
            "neither://this.is&one",
            "abs://olut.ely.no:way",
            "this://ikey=cd",
            "this://ejfkeh.afiwuh",
            "this://234rv",
            "this",
            "://",
            "rrfe",
            "link",
            "//\\\\",
            "//.//."
        ],
        "stress_tests": [],
        "serial": 838,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "//-0\"+\"0\"*32+\" \"",
        "rescue_attack_string": "R://a80148014801480148014801480148014801480148014801480148014801480148014801480148014801480148014801480148014801480147706984089"
    },
    {
        "expression": "^(ftp|https?):\\/\\/([^:]+:[^@]*@)?([a-zA-Z0-9][-_a-zA-Z0-9]*\\.)*([a-zA-Z0-9][-_a-zA-Z0-9]*){1}(:[0-9]+)?\\/?(((\\/|\\[|\\]|-|~|_|\\.|:|[a-zA-Z0-9]|%[0-9a-fA-F]{2})*)\\?((\\/|\\[|\\]|-|~|_|\\.|,|:|=||\\{|\\}|[a-zA-Z0-9]|%[0-9a-fA-F]{2})*\\&?)*)?(#([-_.a-zA-Z0-9]|%[a-fA-F0-9]{2})*)?$",
        "raw_prompt": "This pattern can be used to validate URLs starting with ftp, http or https",
        "refined_prompt": "This pattern can be used to validate URLs starting with ftp, http or https\nMatch examples:\n- \"https://user:password@subdomain.domain.tld:80/~user/a_1/b.2//c%203/file.extension?query=string&with=various&param_eters&and=param,eters&with[]=brackets&and:colons&uniqid={21EC2020-3AEA-1069-A2DD-08002B30309D}\"\n- \"https://user\"\n- \"https://user:wecec@cere\"\nNon-match examples:\n- \"http://domain.....tld\"\n- \"https://\"",
        "matches": [
            "https://user:password@subdomain.domain.tld:80/~user/a_1/b.2//c%203/file.extension?query=string&with=various&param_eters&and=param,eters&with[]=brackets&and:colons&uniqid={21EC2020-3AEA-1069-A2DD-08002B30309D}",
            "https://user",
            "https://user:wecec@cere",
            "https://user:wecec@342.devrvromaefin.4",
            "http://user:34@432.fff.4",
            "ftp://user",
            "ftp://wefovihreio8.3348",
            "ftp://wee.ewf",
            "ftp://23456789",
            "ftp://344/",
            "http://goodbye",
            "https://ftp/",
            "https://r"
        ],
        "non_matches": [
            "http://domain.....tld",
            "https://",
            "https://////",
            "ftp",
            "website",
            "url",
            "http://232/24",
            "http://fghjk:=",
            "http://===",
            "ftp://.r",
            ":/url",
            "ftp:"
        ],
        "stress_tests": [],
        "serial": 845,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "//0?-\"+\"null&\"*4+\" \"",
        "rescue_attack_string": "http://ht?B}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qfB}qf89S"
    },
    {
        "expression": "^[a-zA-Z_:]+[a-zA-Z_:\\-\\.\\d]*$",
        "raw_prompt": "Valid XML Node or Attribute Names start with a letter <document>, an underscore <_record> or a colon (generally avoid using a colon)\nThe next characters may be letters, digits, underscore, hyphens, periods and colons (but no whitespaces)",
        "refined_prompt": "Valid XML Node or Attribute Names start with a letter <document>, an underscore <_record> or a colon (generally avoid using a colon)\r\nThe next characters may be letters, digits, underscore, hyphens, periods and colons (but no whitespaces)\nMatch examples:\n- \"_1record\"\n- \"MyXMLTag\"\n- \":ThisIsGr8\"\nNon-match examples:\n- \"1record\"\n- \"My XMLTag\"",
        "matches": [
            "_1record",
            "MyXMLTag",
            ":ThisIsGr8",
            "cmhPbWMASTlQME_UlQmuHSTG:qnJNwIfcgGF6CVWjApE.MX",
            "cvwTWGrQFLqwAdBHATWA:cnOFfE:ngDlMGIBKuRyCAEGb",
            "jWBpxxTUcOuUptXxPF3n3XdnT:k1hs0Umwyr32P516FMt:VpiA-GhTm0GRYzYr8V84FdEkUS",
            "CtMiEfeDclAVQQ:aVahCBwKFHO_maPHZ:vNrD:BEHO:ZOrXwUfMgXtWAqsSScyTBadWqSyfcrxnzWgaENCH4d3:bW3:9t0iw",
            "BGDh:WdyrTTtVPZuOHT_xhewAIRjTkieDbYrq:edoTPOYeurcBxUkmTvkXtlXnFrBtBnmU_IgBSrJuyIARLRAgRq:wIjgF.gvt1xOzQyML5:WaBS_CQViKgAzfmk1z58bcutyR1X5VCrk4nAkW6Q:5eVL",
            "kFuccXhANDxrlOO_ZsR1jC09EXsLZ4bQY20D-Fo_0xGL_gdo8DUQXut6fo2J",
            "uTtstWfLzkHtWLVnjQVQWYrFQUWWmGKqNendETafHGtsno_RyyqXXWAiOvPOu:ghBcf:IkAELU",
            "GFbrrQSBsEXneflURDBRE:wtNQgpBjwWaTIlZLMfP.5ED",
            "ZkJRA:hFQFlLPdemNJiIxMUGygEUwXbdUmM_okiRmAq-gi3NlI72deJ8t_Sz.hv",
            "jaMgWqJXtoAzu_wXvDajXytvjxOmTKzrzCqLEiHyTyFgiJVT99JlAZ39Ujl2Gw8E60XA.doSF"
        ],
        "non_matches": [
            "1record",
            "My XMLTag",
            "ThisIs<Gr8",
            "wefj ee",
            "23$",
            "(hwcd)",
            "rgh-wef'",
            "\"quotes\"",
            "120,23",
            "00.223",
            "3d=c",
            "oiuygf\\"
        ],
        "stress_tests": [],
        "serial": 853,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"A\"*5000+\" \""
    },
    {
        "expression": "^.*(yourdomain.com).*$",
        "raw_prompt": "Matches the TLD of a given domain (replace yourdomain.com with whatever domain you're trying to enforce).\nI was writing an web application in which I wanted to to display a special message to visitors if and only if they were referred to my site by one specific site. However, because the specific site in question was highly dynamic, referring URLs were all over the place in terms of consistency and the only thing I knew I could count on 100% was the TLD (subdomains and file paths acceptable, so long as the TLD matches exactly).",
        "refined_prompt": "Matches the TLD of a given domain (replace yourdomain.com with whatever domain you're trying to enforce).\nMatch examples:\n- \"yourdomain.com\"\n- \"http://www.yourdomain.com\"\n- \"http://subdomain.yourdomain.com/pages/manage/?act=4015876&ag=709254588456a\"\nNon-match examples:\n- \"your-domain.com\"\n- \"ourdomain.com\"",
        "matches": [
            "yourdomain.com",
            "http://www.yourdomain.com",
            "http://subdomain.yourdomain.com/pages/manage/?act=4015876&ag=709254588456a",
            ")aHqFK|/r`W[d$7rBAGLeor3T5H`E;SJ\"|Zt%&u1BBWC?j-&88<i(wA3meNWANss ~:8_.\\Ftn=0*dIUl=2:2F7}2EiU_EQfyourdomain2com3,>M^%h(Rz=C-\\*b)DQ'7+Ma+rY*/\"#8bn 0Xn",
            "`RhY]_3^7\\+Ju;<pRjZK7AV%L0;L5}^V#/'_!%VgK8<{O^Nf*x|N_4u9NpX^\"v]^p-K:A!TJ$;;1m_i2CN'3RNe\"C6lKnUD&yourdomain6com|gP.~j4,Ni.(}y0yC8x>C`;(6&z!0dT#bIE&fF\\Q*Kou5TaJ3WsTIb-z#`z9Ut^+M`0kfyW}<S",
            "yourdomain(comn5a+|O\"scW~w,buDJ;b%_Z#7+[3;_R<''zHlI2?w~ }x%+9Ro1Q.QHp^p5_h6s{OY|cT*G*cq!wR,GD9~66",
            "%|D\"oVPuIL})_ 5[\\oZyourdomainHcomB!lM",
            "BD`_]f.:?d@m^,j8yourdomain$com>dg=^a&+8oY}D!grq)V4$yzn`1@[Co\\jkv'\"+P_'AP5:.2jxJd&WV=V0*`-vH~Ygwf<Pj?n|c=Ea.H\\Ze",
            "SKRI$]6jmoN?,R5XDyourdomain_com]&[Fp'\"f@-)Tr{KYGU^sE=-fkF\"WqF#H!\"5F",
            "nC)5w+ 6R88QYnhCv@w;5:8v:sh5(.'%NdmQyV5n)6@rZvXruezQZ*5hUPs:op^Mf~SXp#p6l^ubfb>4VD@%6QQ',_r WUyourdomainvcomZH_:yuONofExK+LeGa5[9BU,I#b^:`0iT1|yR}I oiO&Is VYoj&'Si\"kChX@NzjAjgX_;",
            "xzozqU~.J& g`=+$jR0PFU^@@3k&?]\"FgS+ojvE+4G+YOO,H%K@Kyourdomain8com?#5$BF\\-C]2NV)D!2aiwtz[?<^r6J]",
            "r?NzBu=*[O_xqk8udV.13/yourdomain|comPfR1*V0=|'AC%mb",
            "cl#V|Ng@\\L1.A}\"1`%^Kf\\9-AX6|u~|g-*yourdomainLcom5gHOw|\"Q!yzd|XY~`4TT9/"
        ],
        "non_matches": [
            "your-domain.com",
            "ourdomain.com",
            "yourdomain.co",
            "domain",
            "website.",
            "www.com",
            "www.ecds/erf",
            "thanks.com.com",
            "234re.ck",
            "yourdomain",
            "com.yourdomain",
            "efjocdsj.fjv"
        ],
        "stress_tests": [],
        "serial": 859,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\" \"+\"yourdomain\u0000com\"*5000+\"\\n1\\n\""
    },
    {
        "expression": "\\s(?=([^\"]*\"[^\"]*\"[^\"]*)*$|[^\"]*$)",
        "raw_prompt": "Splits a string by spaces, except when the space is within a quote delimited set of characters. Usefull for splitting search field inputs.\nProps to killahbeez",
        "refined_prompt": "Detects spaces. Splits a string by spaces, except when the space is within a quote-delimited set of characters.\nMatch examples:\n- \"(some number of spaces)\"\n- \"(one space)\"\n- \"(two spaces)\"\nNon-match examples:\n- \"\"no matches\"\"\n- \"\"noMatches\"\"",
        "matches": [
            "(some number of spaces)",
            "(one space)",
            "(two spaces)"
        ],
        "non_matches": [
            "\"no matches\"",
            "\"noMatches\"",
            "noMatches",
            "esdv",
            "234",
            "ds",
            "//",
            "44%",
            "$$6",
            "\"ffe",
            "+=",
            "dswef*"
        ],
        "stress_tests": [],
        "serial": 870,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\\t\"\"\"+\"\u0000\"\"\"*32+\"\"\"",
        "rescue_attack_string": ".\"9A(V!_Qlwgx{s6+A!~wer<q)!q\"\"q!)q<rew~!A+C     !bBCx{s6"
    },
    {
        "expression": "^<\\s*(td|TD)\\s*(\\w|\\W)*\\s*>(\\w|\\W)*</(td|TD)>$",
        "raw_prompt": "match <td ***>***</td> in html,so any other html mark with<sth></sth> is just do a little change to this",
        "refined_prompt": "Match <td ***>***</td> in html\nMatch examples:\n- \"<td>hello kitty</td>\"\n- \"<TD WIDTH='20></TD>\"\n- \"<TD >&NBSP;</td>\"\nNon-match examples:\n- \"<td>< /td>\"\n- \"<TD HELLO</td>\"",
        "matches": [
            "<td>hello kitty</td>",
            "<TD WIDTH='20></TD>",
            "<TD >&NBSP;</td>",
            "<td> </td>",
            "<td>frt 543f</td>",
            "<td>flkjhgfdsdfghjkjhgfdfghjkhgfdfghjk</td>",
            "<td>987654edcvbjuytre56u</td>",
            "<td><></td>",
            "<td><lkjhgfcv0h-g%></td>",
            "<td>//////</td>",
            "<td>---------</td>",
            "<td>+</td>",
            "<td>12343@@@</td>"
        ],
        "non_matches": [
            "<td>< /td>",
            "<TD HELLO</td>",
            "<table></table>",
            "<fce>r kitty</td>",
            "<td>12343@@@</d>",
            "<p>43@@@</p>",
            "<p></p>",
            "<987></0987>",
            "<-></[>",
            "<>revcd</>",
            "<></>",
            "<3e3></>"
        ],
        "stress_tests": [],
        "serial": 874,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"<TD \"+\"\\t\"*5000+\"@\""
    },
    {
        "expression": "^([a-zA-Z]+[\\'\\,\\.\\-]?[a-zA-Z ]*)+[ ]([a-zA-Z]+[\\'\\,\\.\\-]?[a-zA-Z ]+)+$",
        "raw_prompt": "Requires a person's name including at least 2 parts. (first and last) Allows optional extra names. It allows plenty of initials as well as symbols in names. Restricts symbol usage quite a bit, but allows even names with 2 symbols. Requires last name to have at least 2 characters and cannot be an initial. Works well for filtering names on validation.",
        "refined_prompt": "Matches a person's name with at least 2 parts (first and last). Allows optional extra names. It allows plenty of initials as well as symbols in names. Restricts symbol usage quite a bit, but allows even names with 2 symbols. Requires last name to have at least 2 characters and cannot be an initial.\nMatch examples:\n- \"E.J. O'Malley\"\n- \"Jack O'Neil\"\n- \"Mary-Lou Elizabeth Jones\"\nNon-match examples:\n- \"Johnathan Michael S.\"\n- \"Prince\"",
        "matches": [
            "E.J. O'Malley",
            "Jack O'Neil",
            "Mary-Lou Elizabeth Jones",
            "John Smith",
            "Mr. Jones",
            "Bernardo the third",
            "Th lo",
            "Mrs. McMan",
            "wefh wejflruh",
            "fe eeg",
            "krec erfg",
            "refds ervh",
            "Thanks Be"
        ],
        "non_matches": [
            "Johnathan Michael S.",
            "Prince",
            "Teddy Has-a..Fake-Name",
            "'mc wfe",
            "384 483",
            "w",
            "342",
            "name",
            "name",
            "firstLast",
            "porefcds",
            "#comment"
        ],
        "stress_tests": [],
        "serial": 877,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"A\"+\"a\"*16+\" \"",
        "rescue_attack_string": "FuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrFuGrlguSkU"
    },
    {
        "expression": "^\\d+\\/?\\d*$",
        "raw_prompt": "This simple expression is used to validate fractions or UK odds.\nIt will match integers, allowing 10/1 to be entered as 10, and fractions.\nIt will not match negative numbers or fractions, spaces or any alphabetical characters.",
        "refined_prompt": "Used to validate fractions or UK odds.\r\nIt will match integers, allowing 10/1 to be entered as 10, and fractions.\r\nIt will not match negative numbers or fractions, spaces or any alphabetical characters.\nMatch examples:\n- \"10\"\n- \"2/3\"\n- \"100/30\"\nNon-match examples:\n- \"-10\"\n- \"-2/3\"",
        "matches": [
            "10",
            "2/3",
            "100/30",
            "8212974770388710493571330448503540033628930518484666081223057229",
            "8678978281274030324920378",
            "876",
            "013",
            "237878",
            "67237632",
            "9",
            "44444",
            "12/12",
            "3/8"
        ],
        "non_matches": [
            "-10",
            "-2/3",
            "text",
            "10 / 1",
            "42/7eok",
            "-9",
            "number",
            "fraction",
            "twelve/twelve",
            "3.0",
            "9993.",
            "22220.000"
        ],
        "stress_tests": [],
        "serial": 881,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"0\"*10000+\" \""
    },
    {
        "expression": "\\b[P|p]?(OST|ost)?\\.?\\s*[O|o|0]?(ffice|FFICE)?\\.?\\s*[B|b][O|o|0]?[X|x]?\\.?\\s+[#]?(\\d+)\\b",
        "raw_prompt": "Modified version of Chris Myers' regexp for po boxes. This one won't match the word \"box\" in the address. Only matches if there is a number following the po box. Also accepts a # in front of the number and other spelling variations.",
        "refined_prompt": "Matches po boxes. This one won't match the word \"box\" in the address. Only matches if there is a number following the po box. Also accepts a # in front of the number and other spelling variations.\nMatch examples:\n- \"po box 123\"\n- \"p.o.b. #123\"\n- \"box 123\"\nNon-match examples:\n- \"123 box canyon rd\"\n- \"po box *\"",
        "matches": [
            "po box 123",
            "p.o.b. #123",
            "box 123",
            "box 34",
            "po box 34984934",
            "p.o.b. #22",
            "p.o.b. #879876543456789",
            "box 347384",
            "box 123",
            "box 098765432",
            "po box 6",
            "po box 77777",
            "po box 124532123421"
        ],
        "non_matches": [
            "123 box canyon rd",
            "po box *",
            "pob reoiewjcdsokl",
            "p.o.b. #87uyt",
            "po box ##43834",
            "boxbox 3898",
            "box po 987654",
            "389237889723",
            "number",
            "98767898 po box",
            "87565 box",
            "39823 p.o.b."
        ],
        "stress_tests": [],
        "serial": 884,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"P \"+\"\\t\"*10000+\"\u0000\""
    },
    {
        "expression": "(((0*[1-9]|[12][0-9]|3[01])([-./])(0*[13578]|10|12)([-./])(\\d{4}))|((0*[1-9]|[12][0-9]|30)([-./])(0*[469]|11)([-./])(\\d{4}))|((0*[1-9]|1[0-9]|2[0-8])([-./])(02|2)([-./])(\\d{4}))|((29)(\\.|-|\\/)(02|2)([-./])([02468][048]00))|((29)([-./])(02|2)([-./])([13579][26]00))|((29)([-./])(02|2)([-./])([0-9][0-9][0][48]))|((29)([-./])(02|2)([-./])([0-9][0-9][2468][048]))|((29)([-./])(02|2)([-./])([0-9][0-9][13579][26])))",
        "raw_prompt": "Date in DD/MM/YYYY or D/M/YYYY format.",
        "refined_prompt": "Date in DD/MM/YYYY or D/M/YYYY format.\nMatch examples:\n- \"01/06/2008\"\n- \"1/1/2008\"\n- \"29.2/9200\"\nNon-match examples:\n- \"32/13/2008\"\n- \"00/00/2005\"",
        "matches": [
            "01/06/2008",
            "1/1/2008",
            "29.2/9200",
            "29/02.9960",
            "29/02.5224",
            "29.2/6572",
            "29-02.3600",
            "29-2/1200",
            "26-11/8662",
            "29-2-4808",
            "10-02/9483",
            "29/02.5004",
            "29-2-2808"
        ],
        "non_matches": [
            "32/13/2008",
            "00/00/2005",
            "date",
            "4567890",
            "29/028800",
            "2902.6004",
            "29027596",
            "229.032-34043",
            "#4",
            "5%",
            "2/2/2",
            "12/12"
        ],
        "stress_tests": [],
        "serial": 892,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"0\"*10000+\"\u0000\""
    },
    {
        "expression": "(1)?-?\\(?\\s*([0-9]{3})\\s*\\)?\\s*-?([0-9]{3})\\s*-?\\s*([0-9]{4})\\s*",
        "raw_prompt": "A very simple regex to parse 10-digit US phone numbers. Captures the leading 1 in $1, the area code in $2, the 3-digit prefix in $3, and the four-digit postfix in $4.\nThis expression DOES allow for reserved area codes (001,etc) which are not typically in use.",
        "refined_prompt": "Captures the leading 1 in $1, the area code in $2, the 3-digit prefix in $3, and the four-digit postfix in $4.\r\nThis expression DOES allow for reserved area codes (001,etc) which are not typically in use.\nMatch examples:\n- \"(123)456-7890\"\n- \"1234567890\"\n- \"123 456 7890\"\nNon-match examples:\n- \"123456789\"\n- \"(1234)567890\"",
        "matches": [
            "(123)456-7890",
            "1234567890",
            "123 456 7890",
            "123-456-7890",
            "(123)4567890",
            "123-4567890",
            "433-432-4853",
            "442-875-1290",
            "111-463-0093",
            "1129-444-3333",
            "748-567-8888",
            "242-543-4498",
            "777-555-4444"
        ],
        "non_matches": [
            "123456789",
            "(1234)567890",
            "(12-3)4567890",
            "98765",
            "342",
            "#4",
            "67%",
            "12/12",
            "34321`2",
            "1,000",
            "000",
            "34321"
        ],
        "stress_tests": [],
        "serial": 911,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"000\"+\"\\t\"*5000+\"@\""
    },
    {
        "expression": "<[^>]*>",
        "raw_prompt": "This Regex Will Remove All Html Tags And Return Simple Plain Text .\nFor Example In C#.NET :\nRegex.Replace(Html, \"<[^>]*>\", string.Empty);",
        "refined_prompt": "Captures html tags (< >)\nMatch examples:\n- \"<p> Hello Ali Delshad </p>\"\n- \"<^*Copm9W4.08uAL6f{mmVLpyk&^~_SCFpg-\\V#myG\\4Bj77>\"\n- \"<QX`3>\"\nNon-match examples:\n- \"Hello Ali Delshad\"\n- \"<\"",
        "matches": [
            "<p> Hello Ali Delshad </p>",
            "<^*Copm9W4.08uAL6f{mmVLpyk&^~_SCFpg-\\V#myG\\4Bj77>",
            "<QX`3>",
            "<uI4iXP\"'LUic/-v;d|6EE`!B7Yo&4Ga,@]thSN)G{RmDUQp4gQ|y)H~V:tc=^J2{Ek*}FR9n,EXR@l1M*:#D'oB9v.F/Cc~s.X$X>",
            "<<,ZT0u<bm+B$;{J^2rKrk+#mm*zt@q{r,$Wu('[3:;2\\/iBaGlU)(t.)RzE3Bq)Sp1r>",
            "<ZI$sqc<5M. ]hNX<XrifE<!L(/Tjf^^>",
            "<kl&/DBZ=Fhzs u:r9e#IyMc<tbE:ndj$>",
            "< t2wyW,0#\\Qhf9%NhQj]PPiXn%i0zU7|gi=CK\\yhGgV>",
            "<Pc(-qc`5x%6')dA1L60+4raE>",
            "<+PxNy.]6,rln($I;1vyNawrzmd(-c%'T$Zn!;)( u!)@P+ajv<'t>",
            "<[\\=&\\l+|h.t<rW%,L4&vG>",
            "<}CJEDRfr nm0=tB\\*R1Q (Exa<>",
            "<6Od#AKt+8@@Q>"
        ],
        "non_matches": [
            "Hello Ali Delshad",
            "<",
            "<ecf",
            "wefcds>",
            "234fre?",
            "fewederer",
            "</.",
            "<<<<<",
            ">>krceds>",
            ">ceds>",
            "rkvced...",
            ",,<,"
        ],
        "stress_tests": [],
        "serial": 917,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"<\"*10000+\"\u0000\""
    },
    {
        "expression": "^[-+]?(?:\\d+\\.?|\\.\\d)\\d*(?:[Ee][-+]?\\d+)?$",
        "raw_prompt": "Validates that a string represents a javascript number (as defined by ECMAScript 3 Specs): integer (base-10) or floating\npoint including in the exponential notation. Doesn't match the empty string.",
        "refined_prompt": "Validates that a string represents a javascript number (as defined by ECMAScript 3 Specs): integer (base-10) or floating\r\npoint including in the exponential notation. Doesn't match the empty string.\nMatch examples:\n- \"23\"\n- \"-17.e23\"\n- \"+.199E-19\"\nNon-match examples:\n- \"+.e2\"\n- \"23.17.5\"",
        "matches": [
            "23",
            "-17.e23",
            "+.199E-19",
            "10.",
            "10e10",
            ".26642713102143137365688967113831737504541833692190915849562517816327995085477954323691850e9236633",
            "-522468587367868823397071205956903949609749300561529539411050637217070.973037100898946241629789895786686328783478283686320509779043619399583643585767894302E-540757799870934129679968653442342823996235059099372961943109017344635981153252443",
            ".52332333497266709701503353970089530648484030407259371091675",
            "+02697312309419612043775",
            ".31155240966607792130348975e-25397714687738448160680418813504846749690127315865231134966296946266796989559445824860494769128183264",
            "-31587463390371081736585401192107872300589613485157844991288518433690756533566551883689734115109029343541",
            "5010704367465090358536489777377397907224499216196.803064965116337857600",
            "-3830549920235063882111235443023540000.7687114801433769361e-95"
        ],
        "non_matches": [
            "+.e2",
            "23.17.5",
            "10e2.0",
            "22e",
            "fdsa",
            "#3",
            "56%",
            "12/12",
            "2332ewds.",
            ".../efdzsd",
            "fer23refd",
            "r0wrfk"
        ],
        "stress_tests": [],
        "serial": 940,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"0\"*10000+\" \""
    },
    {
        "expression": "(((s*)(ftp)(s*)|(http)(s*)|mailto|news|file|webcal):(\\S*))|((www.)(\\S*))",
        "raw_prompt": "Matches all kind of URIs: mailto's, http(s), (s)ftp(s), ..., or just www addresses without protocol prefix.",
        "refined_prompt": "Matches all kind of URIs: mailto's, http(s), (s)ftp(s), ..., or just www addresses without protocol prefix.\nMatch examples:\n- \"ftp://domain.com\"\n- \"sftp://subdomain.domain.com\"\n- \"mailto:yourname@rommel.com\"\nNon-match examples:\n- \"gopher://anything.com\"\n- \"subdomain.domain.com\"",
        "matches": [
            "ftp://domain.com",
            "sftp://subdomain.domain.com",
            "mailto:yourname@rommel.com",
            "www.domain.be",
            "wwwjng{+\\m2:$aV6hF94311e#j%4JvPD6=K/vP4+$(.Tr=*dK+TvSne;OVoS)^DSJ>Pe:s-b<}VH?/Ww)Q(f(\\$fz7J;K4_6NdF",
            "wwwjng{+\\m2:$aV6hF94311e#j%4JvPD6=K/vP4+$(.Tr=*dK+TvSne;OVoS)^DSJ>Pe:s-b<}VH?/Ww)Q(f(\\$fz7J;K4_6NdF",
            "sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssftpsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss:HHx,;GtDW>\"qVvd~ylk$$y",
            "mailto:HECEAs^v'qFE",
            "wwwn0SwO4(xoXf=7,$rl8J'[lR[t%c",
            "mailto:C`!@rywnCVn]k\"Jwy_T@-I_F*%?*{buJ*gaHa>+h$kj1s\\G\"xV]N[JyMa9$b:IIi@]`H)P=DA8)?",
            "news:#gSz^XDAkTTV6$]tFf,b+^3]U%mIT-Th]MXr",
            "webcal:ZV@^QH^4Lu7(~sytDy:i1g\"]evqswp.V$m|;$t",
            "mailto:QD(&Je.stxv':E3J~G>VVo>k<?n|3P$`QK"
        ],
        "non_matches": [
            "gopher://anything.com",
            "subdomain.domain.com",
            "http//somethingforgotten.com",
            "fghjk",
            "http",
            "rfvwfdvs///:;",
            "www",
            "website",
            "file.fed",
            "domainname",
            "frevto3",
            "098765"
        ],
        "stress_tests": [],
        "serial": 941,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"s\"*10000+\"\u0000\""
    },
    {
        "expression": "^\\d*[0-9](|.\\d*[0-9]|)*$",
        "raw_prompt": "Decimal like 123.23\n123.1234\n12345.456",
        "refined_prompt": "Matches numbers and they can have values after a decimal point\nMatch examples:\n- \"123.23\"\n- \"123.1234\"\n- \"1234\"\nNon-match examples:\n- \"123a.12\"\n- \"123.34d\"",
        "matches": [
            "123.23",
            "123.1234",
            "1234",
            "1234.456",
            "1243.324455",
            "34242",
            "34253422.4231",
            "834884.23334434334",
            "1230948.23343",
            "1",
            "43932.3223",
            "222222.222",
            "234321.4354342345"
        ],
        "non_matches": [
            "123a.12",
            "123.34d",
            "abc",
            "-1",
            "+1",
            ".0",
            "number",
            "098765467898765r",
            "....34532..43",
            "433.43/",
            "000-.00000",
            "#11.2"
        ],
        "stress_tests": [],
        "serial": 953,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\u00000\"+\"110\"*16+\" \"",
        "rescue_attack_string": "8105810581058105810581058105810581058105810581058105810581058105810581058105810581058105810581058105810581058105810048820188298E"
    },
    {
        "expression": "^[a-zA-Z0-9]+(([_][a-zA-Z0-9])?[a-zA-Z0-9]*)*$",
        "raw_prompt": "This Regular Expression. I have used with ASP.NET Regular expression for validating that input string should not have special characters(e.g. $,#,@ etc.]",
        "refined_prompt": "Regular expression for validating that input string should not have special characters(e.g. $,#,@ etc.]\nMatch examples:\n- \"Employee\"\n- \"Employee_Test\"\n- \"Employee_Dept\"\nNon-match examples:\n- \"Employee.Test\"\n- \"Employee$Test\"",
        "matches": [
            "Employee",
            "Employee_Test",
            "Employee_Dept",
            "imMnMkYWqNYteAX3jcMVS9c1wehWWDCKK4XIUBWQRIjGV5jymN5Fy3SuD4cTFTr7CcRFRpYFYqQI8cOkazKeGReMGv9zUIy84mXfbi8jgopUgVD3dafFK5kNNKrdu6AizClSFrtjtdG78YwJan9ncHylM7a2drv5MBjAeNkUdaRDZcs0zpybZf2HGPXYYBzaP6HvrKlzPCtTgCdzg3cxIwIoYvoAALlc3rVc9yOXWAToXEt9Tk6KJnkDtRNa3XACaVl6rtoPp6VDGCVK7Lptn88ROedDoANkKeZbLWREvURD2dRHwyiJe62kBTbUFRrsWOCYMsV53QCE4abpBORamW_vv1YUHXV0XL28Te_de48d3N6KjwpoH5w6WnqFcw9hmuvkp5MeeayVVhtyvXXJvn7KUjao37wPq3VBpTcEUlabfNZbcPj9ywLxR4Koo8mXxbT8nQSxsFOleyUaRVHy2NR3gC489D6rRfrgTHLRvuOgwWqTa3_66uZcVwT0WE0kg6txbh7119bjLoK75GV8LqexHLMMTFrNWEA1KtibyDGZ1RlfBhT7L9hnkuGwgdL_0Hf3e9xq3IKc2",
            "erfdsaqw",
            "23456",
            "gtrewc",
            "UYTRFVB",
            "J6efgr8",
            "JERFKJERKJ",
            "jfeov",
            "rfuu",
            "12324refdg"
        ],
        "non_matches": [
            "Employee.Test",
            "Employee$Test",
            "Employee@Test",
            ".com",
            "#4",
            "O'Connor",
            "hello!",
            "$money",
            "-+",
            "&and",
            "%%%",
            "/?"
        ],
        "stress_tests": [],
        "serial": 954,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0A\"+\"a\"*32+\" \"",
        "rescue_attack_string": "lwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgilwgiTwdOC3yWAE+"
    },
    {
        "expression": "^(http\\://){1}(((www\\.){1}([a-zA-Z0-9\\-]*\\.){1,}){1}|([a-zA-Z0-9\\-]*\\.){1,10}){1}([a-zA-Z]{2,6}\\.){1}([a-zA-Z0-9\\-\\._\\?\\,\\'/\\\\\\+&amp;%\\$#\\=~])*",
        "raw_prompt": "This checks to see if a URL has http:// in it, and if it has either www or a subdomain before the domain and tld. Without (http\\://) it only does the latter check. Replace http by (http|https|ftp) for other protocols. Still not happy about this: http://www.www.passshouldfail.com",
        "refined_prompt": "checks to see if a URL has http:// in it, and if it has either www or a subdomain before the domain and tld. Without (http\\://) it only does the latter check.\nMatch examples:\n- \"http://www.pass.com http://sub.pass.com http://www.sub.pass.com http://sub.sub.pass.com http://www.sub.sub.pass.com\"\n- \"http://NL4KW9dJFzU4AlKY9rHZXNDnuX5v9mu0HEzDdkN9-cVCTS5v-qlrCKlMOw72dvN22tFoQgPY.pH.So%sh,%?Pti6eF~$~O~HH#+6C0Xn.JbZ\\Y$\\\\l8nR,61gbhHAGNCTP.L0h5gqKMoqPEv%_75,%\"\n- \"http://3UWfs9mB1D3Ciwg1cLlUmjmQ4DELt1gXBkkc8w4GdJ2P0txeJg-Nu022UVUAFZeosrJ74LoqyHG5y8cgaJHyk98XYAI.KHaOWshJITNckgemqvfGMci7llelRMEkDDfC1jWjzVGdd2yWdDyuI3Xk9Z-2MpgbssxQkttyQSzXLtVy3Ug-NnAWEAXX0iQB3v.2sPsignuFg524sJWDYFhpP90UsgPiN31AJOMDrvjuk7gCHqzfgiA6a5QxTDGlbPf3jkd9uGbUTCVoceWEP2ZzeDShsKE9.gS.T%Qvd#Cvu=/0gL0QkW_PBB~gEoV\\0K,de$do9q%Cf#2T-c=XS-~wsz;y,i%ze4vw81?3%1FoO8E$\"\nNon-match examples:\n- \"fail.com\"\n- \"www.fail.com\"",
        "matches": [
            "http://www.pass.com http://sub.pass.com http://www.sub.pass.com http://sub.sub.pass.com http://www.sub.sub.pass.com",
            "http://NL4KW9dJFzU4AlKY9rHZXNDnuX5v9mu0HEzDdkN9-cVCTS5v-qlrCKlMOw72dvN22tFoQgPY.pH.So%sh,%?Pti6eF~$~O~HH#+6C0Xn.JbZ\\Y$\\\\l8nR,61gbhHAGNCTP.L0h5gqKMoqPEv%_75,%",
            "http://3UWfs9mB1D3Ciwg1cLlUmjmQ4DELt1gXBkkc8w4GdJ2P0txeJg-Nu022UVUAFZeosrJ74LoqyHG5y8cgaJHyk98XYAI.KHaOWshJITNckgemqvfGMci7llelRMEkDDfC1jWjzVGdd2yWdDyuI3Xk9Z-2MpgbssxQkttyQSzXLtVy3Ug-NnAWEAXX0iQB3v.2sPsignuFg524sJWDYFhpP90UsgPiN31AJOMDrvjuk7gCHqzfgiA6a5QxTDGlbPf3jkd9uGbUTCVoceWEP2ZzeDShsKE9.gS.T%Qvd#Cvu=/0gL0QkW_PBB~gEoV\\0K,de$do9q%Cf#2T-c=XS-~wsz;y,i%ze4vw81?3%1FoO8E$",
            "http://Fb01D1igrD0vQvV41e0jnJW3R6BIIvKtlyAPgloZ-yNOr3bjnV8RNOvSw5TuO2QIEr4BD5IBe8Y.bjWDE8xoqgkTa3y8zQDBlKeFKDqc6YAkIanfQSiueP7SSC4IF5cOtZ3Bi01n3Fka.lKPkHF.5WUVdDYkz&mhzSD.~+XCqiO~nASOfMSx72195a8By-j?ic3Y4JexB3;zVot_hxl?7Ox,tA\\T#dGK+6yg1ys6",
            "http://fHxao.5wdwGtG.jzdr./JkwCqE;B#BXvZ",
            "http://Ca.5Cj.xC0e9OJ0Io4w.i0d1u7joKMlrUdG7rTQnetfmB9jVrk-VIAENSELu.du.xQl1P.vZ?bMmBITIR",
            "http://pZCKyXBPQ-2QjsJF5jhfA56XVJptcQIMy6hlxZOVESATWRt-wvuopKSQcEZjWKJ4AZbVuL..bUUVVEs-vQXxm05VyLzKhP2L4N8u.m0py9e2adsUfOivV1U9uSRpszsHm2nfcX11ZUq9za1cYTz56znzO1ZLO7stK4g6Cxo4J7jKrzOFtzyBTrY7SB9IeSXUd.gZDGh.kVvK3G526r1.tSsfurTqXqQIy5InocIvbfcapgKqLvPJeTn3Zg0ihrcfsmRcUJpN-4tLCDzSuUBhXoBIdoL9YRPzFHvpE.bAo8CuvofEYpe9uBOIhzpXgSr2pYe8QpAy18CaYYpe.toO.oeqTM4A806zm;H0RAAdZD%S;~o2N?axJV6OBr6OgH-5F\\OqE-'4Wv",
            "http://LXQT7536wecB4rVAbo7eu45pXqnaXbFfvfcCtyBpkXQ1Ab6VSVmYkV2A4jjXLCv.6VMzhUdxa0nC8rMj52oFn1R-WMNlGdxJ6Q133C3jwR4Hrwukkjex7yBk9JALwJ54vfdpyy70q-ZyPxfWi2.UY.d'I/cD",
            "http://pVArk1aK-WvidTrWBJ2QBSsYCRaAgAOalxmwPp1LFx1NOjhA6xuunJ4lqXXrh3GN9ngPuTW810jTKz8VIC.la.,YC2Z&id,Ho4vV7f+vEFDKUfc;zZ?vh/T$MJ#PYgQ30SVO~~&/_dCDBLFFx\\$HlJaZceD,r~xzb",
            "http://www.4Gt455zk6wcyUndUZeylnBFCYnmnCS8XwylCvx-g4vHSH9BkX0--PpKtVJWBgV6a2W3.qjr2ZzkyTuodWhHPCIg5CfHOYYgB.Gpk3CeIBP6pHhNLlEVHXG.bmXw6FDpkmahRSzAUfR6UHl3APpYRxkIlfqhlV9ecJ-AmMnm2dgE4zT.ihwrJm.dTT=A;Uuy59gk'ox",
            "http://www.GHhmgy5tTVwT6zJ3sm25ioKusMb1-mjJZ-eBEhYmxYhzixg1-JXcZfY4mc04.l-Dvcdd80cun2nuI7qRvpVgV5PRcJv77VjKL0uqjQj1EANxkkMieyhrRbG.UBL.3KCAnx8Ji7OL4646I12+uHlXuwoRB9pZx#-czv,H6;AKbDno.yTpSQM7GFym&?i&8UwNn?g%mjh",
            "http://www.xnMgEcR9a2UJKok7eNntbWsK9vSS1cbunCe1rO2ONIsryfsWV3sxwN.fvNWktN4xBnY0nDPmMahEqt4-VLsJjZ8kOJISj-kWZZX8t5b9WkGAhF556X922o7QrR4.anxA.RApP'~2o;6qO\\-",
            "http://.rMSF.pSQkN.q?,tZX'6;ahY0vQe\\4-icTn4%%YLyAnPSyK.A-_B~8#a&Xcs1&$FJD.\\eYbK.pSA"
        ],
        "non_matches": [
            "fail.com",
            "www.fail.com",
            "www.www.fail.com",
            "http://fail.com",
            "http://http://fail.com",
            "http://http://www.fail.com",
            "sub.fail.com",
            "www.sub.fail.com",
            "sub.sub.fail.com",
            "www.sub.sub.fail.com",
            "www.efds",
            "erfvds"
        ],
        "stress_tests": [],
        "serial": 956,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "//www..\"+\".AA\"*2510+\"@\""
    },
    {
        "expression": "^Content-Type:\\s*(\\w+)\\s*/?\\s*(\\w*)?\\s*;\\s*((\\w+)?\\s*=\\s*((\".+\")|(\\S+)))?",
        "raw_prompt": "Matches the Content-Type for a MIME Mail Message and a Non-Mime Mail Message",
        "refined_prompt": "\nMatch examples:\n- \"Content-Type: multipart/mixed; boundary=\"---myboundary\"\"\n- \"Content-Type: multipart/mixed;boundary=---myBoundarysi3cds\"\n- \"Content-Type: text/plain;\"\nNon-match examples:\n- \"Content Type: multipart/mixed\"\n- \"Content-Type: text/plain\"",
        "matches": [
            "Content-Type: multipart/mixed; boundary=\"---myboundary\"",
            "Content-Type: multipart/mixed;boundary=---myBoundarysi3cds",
            "Content-Type: text/plain;"
        ],
        "non_matches": [
            "Content Type: multipart/mixed",
            "Content-Type: text/plain",
            "Content-Type image/jpeg;"
        ],
        "stress_tests": [],
        "serial": 957,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "A\"+\"0\"*10000+\"@\""
    },
    {
        "expression": "^(\\+[0-9]{2,}[0-9]{4,}[0-9]*)(x?[0-9]{1,})?$",
        "raw_prompt": "This comes from our requirement to have tight clean telephone database column. This expression supports only strict format and none others.It accepts any international country code with optional extension number.",
        "refined_prompt": "Matches phone numbers with any international country code with an optional extension number.\nMatch examples:\n- \"+17034567890\"\n- \"+17034567890x1234\"\n- \"+912024553455\"\nNon-match examples:\n- \"x1234\"\n- \"+1\"",
        "matches": [
            "+17034567890",
            "+17034567890x1234",
            "+912024553455",
            "+912024553455x12",
            "+441237761457",
            "+676473791029783552291015064279395363197815688107808476827193692248754273867959263973843408189323343142422747747065494300539923311944826079836300781909729121409838186907829418655621191443840686703314063717118966",
            "+9222778605751795802173211487991797907514175670250305717155640919068944436554990692745456919781220956611813602128093791810872870475056310608741401171008541544705728351234331718506170376343849101886430736733813x641010630668195731521695",
            "+269302025871023066234446322323938651084628250490413355628236101840766439864745136611259492666140836350847890190731731704592693475124847857440657073739367111785075433260401998109508155561119615153943056257432597973684218030948087022914878124987",
            "+65413162581266748199137172180404410143080891973802427227799914070133249695217349319",
            "+0670744661778624380167144988718504075413601066847916190541001058812489095590698485272453696144",
            "+758717809296979718756918800382483585543724263688762476887713365246790668418471249135695666929735x1617264766203185816939673237297539762800134572420786783",
            "+96614951729950786872635483023190464574929835019731094176730558245597342482379606747851232820831384202687835283711952830022337866645772223426",
            "+71121474786473961216023008101384905903576795413906445045650175064108783570770880554698389952519267078415733081211257111426128771085819306848068402138871782782705522617360497519136770193830636006423517178389496581388"
        ],
        "non_matches": [
            "x1234",
            "+1",
            "+123",
            "+x1234",
            "+12x12",
            "+1(703)4563245x1234",
            "number",
            "#3",
            "23%",
            "12/12",
            "34-43",
            "(603)"
        ],
        "stress_tests": [],
        "serial": 973,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"+00\"+\"000000\"*5000+\" \""
    },
    {
        "expression": "[\\(]{1,}[^)]*[)]{1,}",
        "raw_prompt": "Will find any texts within a string that is enclosed within parenthesis ( )",
        "refined_prompt": "Matches texts within a string that is enclosed within parenthesis ( )\nMatch examples:\n- \"Test (test 1)\"\n- \"(test)\"\n- \"Test (test 1) Test (test 2)\"\nNon-match examples:\n- \"Test\"\n- \"AM\"",
        "matches": [
            "Test (test 1)",
            "(test)",
            "Test (test 1) Test (test 2)",
            "(((((((((((((((((((((((((((((((@:A;+2;\\L0gOG~K5ZT#Rf/Up[zmy*oW?.BG'aPs+j\\6\"_,NvG_I~5pbG$g9c;{jg+o;z%TuQ))))",
            "(((((((((\\C*R\\x8nh$u?Wq;P7;3S_0/.~OFjrXXK<}yhMG#%9`R'&o0{kI|kL+K:dIyn.=;SK#*;{wj2;hmmYCG@}PDw^F\"t))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
            "((^Y%ib3J`0E0|]d.p;MM%dqSJT&\\.$jJu02JBLq`tZ3<xWNk}J`,{SZ4WY{I}(8vS[}@YUz(-a-sT{hie61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
            "(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((=6;.i@[P9bIW9A 2sg@{qV$H*NGL5P27jY70jsP\\Cke}D!t$,bYGR)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
            "(((((((((((((((((((((cj%c5h+n>hcu{']VOYOR5d/fdHlJ'2X>o4N<Kp_s)",
            "((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((dd,2d>m&n>/i`AU[KZE>tl(e_x/@lF4j!o5?XH?w.3$+@'+Fa!EU4U@v<_@}gSvCb #D\";c/:Yr4@{tS:Y^NF)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
            "((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((LX6=`YfBHg{!3B8:/0 G3\"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
            "(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((,&q%;\"e@VK.Kaa<le;h\"^K6GOX'c$!sacYsE1y`xN2XH5p2(c16J9:_eDh!e'/=muqt}(\\XuQJ&6O'rs<Z&/3jfJ/4Vt&l!?G))))))))))",
            "(((((((((((((((((((((((((((((((((((((((((R.U4/K_E$;| 4%\\o,JR1^>;<dW&{tGhYMjn*SR?1aqrqx[/\\q+[gi4bLN$=2vS6:%P/m$RzvEeIBGu\\b;b)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
            "(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((mATPYM]uH4[[X{h&QCAX<D<arebtTMczQ&[nYpeFT{7p]%(x/Z))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
        ],
        "non_matches": [
            "Test",
            "AM",
            "wefrevfgref",
            "$$$",
            "21345",
            "&&",
            "<.>",
            "!!",
            "??",
            "0.0",
            "12/12",
            "==="
        ],
        "stress_tests": [],
        "serial": 975,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"(\"*5000+\"\u0000\""
    },
    {
        "expression": "^/{1}(((/{1}\\.{1})?[a-zA-Z0-9 ]+/?)+(\\.{1}[a-zA-Z0-9]{2,4})?)$",
        "raw_prompt": "This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _ . or - in the path, this will be updated at some point.",
        "refined_prompt": "Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Fails with _ . or - in the path.\nMatch examples:\n- \"/mnt/share/\"\n- \"/home/.BASH\"\n- \"/mnt/share/pic.jpeg\"\nNon-match examples:\n- \"mnt/share\"\n- \"//mnt///share//\"",
        "matches": [
            "/mnt/share/",
            "/home/.BASH",
            "/mnt/share/pic.jpeg",
            "/mnt/share/install.sh",
            "//.Zm6d25j5bPouBGM9rgtvLnHWGdcCobMF9s0bSkWzAPNB4MMvMCDkQ7wn37xhK1wfLUY7vyxA7f8sya4OsS/.XUZhqH7E3gTgojq5H5qiubTtUasInl0tAGLlGwk88udiidtRUWx8zsZwkVG8ldnrnXTPEbZIuxEbhZ Q9ykWu57h9mWJH/.2pvyal dC88XpSuJeBJv6KvWsxJ6Bym6sUsIs8wBf/.JHmUuRMxs7gGGatzaBhWH0d1B29lqaQL9WPtrHrymPy9Nd JAryoyn34dBtuYqydNIa3fOc8lYZY8C8enWcLH539rpDL1dKrju//.KlHNO9lkwekvHV1xPbA2RrnRK kP07hBSJ4CNHZCu4r Qbx/.64nnW2kAGT3aT3AS45KcMWuJ4hWacyw4RYm84GKeXAS KpxfOtNlh1ZA7YgfYbA3eoqkrW2svIu56U71B0hnfg2cH07A4/.3U53c4YhKFufDL2BzfbaWHMZ9UlFC1qJMYaPc6Aov//.lG21fo7YqEXyUI7vVLF 7J Nf5mt5qBBYIWnXgw8aSTJ/",
            "/usr",
            "/usr/bin",
            "/iuyt",
            "/04/23d",
            "/we7834/nuwe/ewiu3ui34/ewuih",
            "/d/d/w/r/q",
            "/ed/le/24rtfd",
            "/r"
        ],
        "non_matches": [
            "mnt/share",
            "//mnt///share//",
            "/mnt/share/install.installer",
            "/home\\user",
            "/efrer-",
            "\\\\rfevds",
            "///e3refvg",
            "//234",
            "/'",
            "/123@",
            "/key=",
            "/key=value/"
        ],
        "stress_tests": [],
        "serial": 976,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"/ \"+\" \"*32+\"~A~\"",
        "rescue_attack_string": "/dcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafdcafDb70Ebae8."
    },
    {
        "expression": "^([\\d]*[1-9]+[\\d]*)$",
        "raw_prompt": "RE to match numbers with value greater than 0.",
        "refined_prompt": "RE to match numbers with value greater than 0.\nMatch examples:\n- \"0001\"\n- \"120064\"\n- \"1000000\"\nNon-match examples:\n- \"0\"\n- \"000000000\"",
        "matches": [
            "0001",
            "120064",
            "1000000",
            "1",
            "234",
            "2345",
            "654",
            "3874",
            "327",
            "56432",
            "43",
            "7653423",
            "56432"
        ],
        "non_matches": [
            "0",
            "000000000",
            "0000",
            "0000",
            "00",
            "-1",
            "-0",
            "-98765",
            "-9876543456789",
            "-864567",
            "-43212",
            "-4565432"
        ],
        "stress_tests": [],
        "serial": 1035,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"1\"*5000+\" \""
    },
    {
        "expression": "^-?\\d+([.,]?\\d+)?$",
        "raw_prompt": "It just accepts negative and positive numeric entries. Dot (.) or comma (,) signs accepted only once.",
        "refined_prompt": "It just accepts negative and positive numeric entries. Dot (.) or comma (,) signs accepted only once.\nMatch examples:\n- \"43\"\n- \"-43\"\n- \"43.56\"\nNon-match examples:\n- \"ABC\"\n- \"A43\"",
        "matches": [
            "43",
            "-43",
            "43.56",
            "-43.56",
            "43,56",
            "-43,56",
            "994997188371549459201136946829200131301324641250725292914815963845552861302564329",
            "-3487091609072144048384269919977886060924",
            "76895682489704661970221255543468759417253716562623088077440724843029570628715965181198871948215520598123444087457779209633",
            "-3505373155265567450652816763759835199277060840096676729299953454356928268003383380564063442544614.61891098074490588780421929420870643917286531740499009093335419748",
            "-290363017531384106547938247933697483755812295126510866997861347886957777952721211023595881819365019143928222313124539395683984",
            "131485652336698636658415",
            "-868536324116877539702019421248288463137172483770611551291467998651886569289119515124502618345398.390638465913956976787094640102770984477336954671"
        ],
        "non_matches": [
            "ABC",
            "A43",
            "43A",
            "43.A3",
            "-43.A3",
            "43.,56",
            "43.",
            "43,",
            ",56",
            ".56",
            "wwwww",
            "1!"
        ],
        "stress_tests": [],
        "serial": 1062,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"00\"*5000+\"@\""
    },
    {
        "expression": "^\\d+([.,]?\\d+)?$",
        "raw_prompt": "It just accepts only positive numbers. Also accepts Dot (.) and comma (,) signs only once.",
        "refined_prompt": "It just accepts only positive numbers. Also accepts Dot (.) and comma (,) signs only once.\nMatch examples:\n- \"43\"\n- \"43.56\"\n- \"43,56\"\nNon-match examples:\n- \"ABC\"\n- \"A43\"",
        "matches": [
            "43",
            "43.56",
            "43,56",
            "028071016213896824051826979856591540488715802567759810922413991641610380116511943353761752760501665,357439939",
            "87152943875646171280847137428737643832880336008782157651761330409270363461021806301539446394608",
            "50229177200882469932271258031465753800166666930670307984",
            "288376675981306998",
            "440961557509856964751,673602262034077734729942282396362184424295101506152137338186274560325",
            "6249090997822882356164876213302398363057517542351324818448136797397821108953256951909199080215880998629101689",
            "729842009499825644996170407485814537953894082497248063594215030996544017766",
            "2166",
            "299830371401613901498918879662771400832592435743950760448005009528682174662657243125,64283136886508",
            "443517292894217800752679150794342573361724231968287682"
        ],
        "non_matches": [
            "ABC",
            "A43",
            "43A",
            "43.A3",
            "43.",
            "43,",
            ",56",
            ".56",
            "dsf",
            "@2",
            "!!!",
            "$4"
        ],
        "stress_tests": [],
        "serial": 1063,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"00\"*5000+\" \""
    },
    {
        "expression": "\\$(\\d*)??,??(\\d*)??,??(\\d*)\\.(\\d*)",
        "raw_prompt": "This captures (for filters out non digits) numbers with or without commas (eg currency as above) in the correct order - the other examples I see here don't capture in right order for all combinations. It doesn't check lengths or leading digits or number of digits between commas- that is left as an exercise for the student.\nFirst example gives:[4],[234],[567],[89]\nSecond gives:\n[],[1],[234],[80]\nrather than the incorrect:\n[1],[],[234],[80]",
        "refined_prompt": "This captures (for filters out non-digits) numbers with or without commas (eg currency) in the correct order. It doesn't check lengths or leading digits or number of digits between commas-\nMatch examples:\n- \"$1,234,567.89\"\n- \"$1,234.80\"\n- \"$34.45\"\nNon-match examples:\n- \"$1,234\"\n- \"$123-45\"",
        "matches": [
            "$1,234,567.89",
            "$1,234.80",
            "$34.45",
            "$1234.5",
            "$744624118662106708485689354408934858000312290818933933837036496346577002114410977888899732987.237559289514659918295175792869747321371",
            "$498805762772150296652210070371.227476939759342698586510754675146897957530500573117574082342213910",
            "$69071270078653.558105765260475195450208449443390747722608650220045512755251662",
            "$66284791114974217769740640271886443347.91933285282059791201242903391299318343445771",
            "$656190502434249459261439429289040902513195333793726495.487",
            "$108.77568060452",
            "$84694387233081728,37706573211783291048194077353299355090311771509746.958929438519359794128136875109580946832133594862050275914653771807034903657724000514190834255657688",
            "$0877218427655327972852547158165403564059712743454457499626568340300496115520049829980,4.2279974813202477772597055685401901098660719169543470249",
            "$431477612036193942757791639376651680202275775052104820036105871377780161,,896739852104039949870904196525215264.483119526171261994365010453791491424118000401658527343"
        ],
        "non_matches": [
            "$1,234",
            "$123-45",
            "$-123.00",
            "$",
            "$$",
            "$45",
            "money",
            "$5678",
            "983",
            "0.0",
            "232332",
            "$43321143094334434"
        ],
        "stress_tests": [],
        "serial": 1092,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"$\"+\"0\"*5000+\" \""
    },
    {
        "expression": "^((.){1,}(\\d){1,}(.){0,})$",
        "raw_prompt": "Does a very basic validation on Danish street addresses.\nIt ensures that the format \"Address No\" is honored, but also allows any char to be put after the address.\nThis is to ensure additions like floor, and which door it is. Ex. \"Addrees No Floor LeftDoor.\"\nEnjoy!",
        "refined_prompt": "Matches Danish street addresses.\r\nIt ensures that the format \"Address No\" is honored, but also allows any char to be put after the address.\nMatch examples:\n- \"Teststreet 32\"\n- \"T\u00f8rststr\u00e6de 4\"\n- \"T\u00f8rststr\u00e6de 24 1. tv\"\nNon-match examples:\n- \"T\u00f8rststr\u00e6de\"\n- \"2 T\u00f8rststr\u00e6de\"",
        "matches": [
            "Teststreet 32",
            "T\u00f8rststr\u00e6de 4",
            "T\u00f8rststr\u00e6de 24 1. tv",
            "5ycL/'>+=Z&HCvViJDD#[']SyiqrkW2a|@nh|mgD2h$v+c8Y_5573194801569504083865854326639557205428423778219739497829914243771459890160579382228269^Z@<J]xJ05J%V};ax}uG~_GB3}+}3YxiF}",
            "i,)t|K1*%93521560449997965071655514558967595321915030769064807045299003881xLxE*.F#X&_E8\\Jv8,xC&,biTE*yW qzkVB(_1$5X%?k^.lNZg,HCJv}G",
            "L[50$\\Y\\[@'-gl)$QVY](8!O%DAWL$a_qJdh7a2X/se@*$#TdnV$7#V9+g1<wV0H*T^1G{nw/VB\\w \\2133843908806385742122709501044189101403954746122618949852Vkr<x(~\\0/Pr2q&%vzGa~)Fg%.\\.jFpy wg-m85hT*3wg0orh",
            "5]>Ow_u}/O'\\%x~+z&iz3VB&j98770332136354920592988413HGPQL~!;E3&{Zd=TJ_5(%\\S{\"*Q Phi7A9y<6f9ak8s-7:~]*`YbK!)c*Nqp]833%6)g>!!r#%",
            "8sWa_42552118291947675114875735298344546880472(t\\ m7~%bc<R-TZ6,Rhu~/ZgZ+eMz}v7G)R/,%W D% $tNIPG2Tu<Wmd.^yl4u?94~roaPwGG@>Q<$$%Y#aZ6+ZA.b",
            "/:_sZ7jsIs}&O!?&mg+B.D?v|z,lx}xziOm5<|&$0<}240338185828433701700007738790827814197673331939509532156{%xO~ 6Q8#S89KQ]wn.J7g6aLW`u4\"\\gH05C)em{\",+uj)tBim.X8rC^m6 Ug0sg2uVAFnIUh%2{rbyT0/YV'U,V4eFEzI",
            "pj'0?eWA >x6F @_g<%dK<=?o)oU%K?uM!&uu?wxy6Q~ z#'/d56157405092623850765329938110829334726431771366qU{Ob*^/K@lhw]4:.,BfO\\if)L-PjOWpYa7Gfw7=!.qT,(7I0 b %cwWD\\[u%=#s V4WByxaG__y{M`|lWc^7UcIvH",
            "{f2KjY#'`y_#ZP3Q+4)i3_&<]G`]*:A;Se`O1enWL.&5NJfxwC-8zY)M7a!^fOpRFCO:*E}A<COD(\\{tEK.)s9IMmi]M7416685243510225314356WpH]?9=iQYh@\\#7Hg0g-nXIHT#H/Fepptjz}mz{~YE_Z1{R:sATmowm%wi3R)S3wnv",
            "GRgHjm(7h:H6DW_S.?vQK@Z32507059525330624187996104493413992282727854430737583338393074805306481259886970953388905655060007004'Ga,7{RAvHN|wSF@>Ej/s-#Mi~%/E1?Xgcqs4\"03Ardf|=yaO[iD&5Hlq",
            "kD7:=Wah#TM!W}M>1^<Mj~^</B*-S6Ne:S_8iNL.&<+dlaFnHZ2:eha,m{=quOk?AhaJ.(W@8F3XZmrSbAzlO;\"~f4ez%cum|(4Z060880902092488601621057098103127745145431582916209149123545153288037791147457230098{V_fv,pwta@1l((A8/NShs3dg*.\"G$)CJW0(>3$r67Y'Z/E+F+rd\"_KiR}xs_3id[(}ox&8-y;f)m&$pO<O"
        ],
        "non_matches": [
            "T\u00f8rststr\u00e6de",
            "2 T\u00f8rststr\u00e6de",
            "ew",
            "efsdc-",
            "jej",
            "#",
            "$",
            "%",
            "&",
            "?",
            "|",
            "~"
        ],
        "stress_tests": [],
        "serial": 1122,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\u0000\"+\"00\"*5000+\"\\n!\\n!\\n\""
    },
    {
        "expression": "^[\\w]+[-\\.\\w]*@[-\\w]+\\.[a-z]{2,6}(\\.[a-z]{2,6})?$",
        "raw_prompt": "@ Before you can have underlined, connection, point character, @there are three points after the characters are not allowed",
        "refined_prompt": "Matches email addresses with no special characters\nMatch examples:\n- \"abc@cde.com\"\n- \"abd@def.com.cn\"\n- \"a2b_cd3-2fg.ss@a2bd5_sd-mbv.com.cn\"\nNon-match examples:\n- \"abc@ccddme.my.com.cn\"\n- \"e123421@dwe@c.cd\"",
        "matches": [
            "abc@cde.com",
            "abd@def.com.cn",
            "a2b_cd3-2fg.ss@a2bd5_sd-mbv.com.cn",
            "hbtSgiBkinp2uKnIiXNR4P__EdVV3mx1PawwXV3JoviXirwn0dvE7VakgWmcGUe4GwO2cXNfXex31grlI@_lhn1iwUIGZSZP-lFzOB9Rlmv-pAxR6dLhVSJ8H9RhZb8f6dtGW1QuMG5qKOUNcyadCCVTgr.pvala",
            "15ncCQWt9MDGZO2M5YY.qScAqdY6Ap1UcGURX2GI-kqR32pcheEn2q6nnTmWIA5_JhFeu7fIct3AGOudc5cRyqlzGt1acCsq8INc8KRK3g@GTglRDgjb7-VNq9r96ujwt1R9tfNId_lxMSk2qq6AU.zp.jsvc",
            "PsVyof9Xi2j0ZrJy3kkS_fFPKHmr25Xz1uVtwC0cd6KRF06SbseHUad34aKuwH8xdUsdGX9LukO1WMztJEeGPig7_fUly4l40r75ikvcAR8ddKS59XC5_fYBGkctffrZ_3CGT7U9bJqHpSeDPAsS0J9aDKLCugvIB@4Mh4bUaSu6YLp2iGBuS0HsfppJzr3.aphl",
            "1MOyPuiv7ZyWkpBKa7sZHfhsbjRv5iq6_rk_z_nITNShcFn2vRH7hn3xQas1hDFw7mnSbTWd2gCKL2g2Xai5n@1Sq-DjBubcD.jv.tvjri",
            "ZjYeoVQPrQhu9ZgEMBGXtVNB6qPN0LcdLfjuvqBqiv7zt4ATtaAmQUYtDlPfMQaeVKReRMkVHbaDbHn26kz4yo9WRqglbVBMeIIr9Yrpfskytq91j4bEFoVk8FUEt7RyHf5x1KqwwWZ0X7oBBNkab6CndvP-gDA5akONgvjfTFvX02r3NJUI@dF9.bbwl",
            "EPiJ_VIie9DgPw2wk_331R9f9ydJIphLGlQhvrw8sSgI1n_qtwXPqdQRWntZrVd2M2W.16llVjpLxxxHetvFur.7b70TGC4FAHa6pEc.iFYoy.knXUL_EnNjqYFwjzW5nczLNeDki9f@Z_gs9NuWE3KDXSJ89oD6WEdyh.isfaah.we",
            "oQXJfkktpRF4P5Be8_B4o2jAI85y1yubSB.7F6zTFlmO9Ibk21ZvfTdiQUskxmLk.ckfjcTHteX7@0X3vudhjzqDlPQVYoo9KjbsmmEde-y_wAQ6ajt5_KiH-DCIc73tY.nl.abgb",
            "G_7LyhZWsMHQIaQqVFPKJYi1byc-9T9w6P0I6vzoy27Kerob@Z1-t_j_HFW_r8ye4fA0ix0MQyqQuxcRP6cs8p8zx-gCxf7EDAzgU266j0k9B5gDqp_t15JASrvbb4ZiL99QGV1tFzhT.nuckk.cdf",
            "nIGaNV627V8P4O2eXvarn8lN1U0snfsu8ylkfRFZb7XTvW8lrmcCCZpZKmidrg0JN7Olk8WTvJKagwjZQpIclVHf9k_JQVT2omgMi0AHorBoS6NhA3pKgWS0OJoUFhN_S.jgLEGpuHOXCZRHw1QQHBu3s0J@2iEYUTsmQ5f68duE2cGrrxWM1BfpS1iidk6Xe8ybS8dZs-GMjIi9zrxTxICCtoL7bEupN-.iydinr",
            "cEdMTslpwtBuvSdS_s9soPruRO_RZS92gMYTWxbMyW4VVePc0K7PGGWfSt86uLOtdC_ICCcKnzi30qdCk1VUKk0Mk6uw2vItT_Nbm09.wLXs.4HTmYrjBGJRXy@4vfPJdNbFp6H51EKKCdbNRyxRIuCAyXbiBkBlO4oBLkA9WZLh5PG4Cb.xq"
        ],
        "non_matches": [
            "abc@ccddme.my.com.cn",
            "e123421@dwe@c.cd",
            "34",
            "@gmail.com",
            "erfvd.sfwe@fec.com!",
            "erfvd.sfwe@fec.c",
            "wds@cd",
            "wds@3eds4fewcddewwde.w",
            "###@derc.com",
            "32wd.com",
            "email",
            "32wd.dwe.w"
        ],
        "stress_tests": [],
        "serial": 1129,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"0\"*10000+\"AaA\""
    },
    {
        "expression": "^\\s*[+-]?\\s*(?:\\d{1,3}(?:(,?)\\d{3})?(?:\\1\\d{3})*(\\.\\d*)?|\\.\\d+)\\s*$",
        "raw_prompt": "Matches numbers. May include decimals, thousands separators, and sign.",
        "refined_prompt": "Matches numbers. May include decimals, thousands separators, and sign.\nMatch examples:\n- \"5,000\"\n- \"- 10\"\n- \".1\"\nNon-match examples:\n- \"7.000.000\"\n- \"5,0000\"",
        "matches": [
            "5,000",
            "- 10",
            ".1",
            "1",
            "1,000",
            "234",
            "999,999",
            "1212",
            "23454323456",
            "3.1415",
            "3242",
            "0987654321",
            "3"
        ],
        "non_matches": [
            "7.000.000",
            "5,0000",
            "1.000,000",
            "#3",
            "$45",
            "54%",
            "12/12",
            "one",
            "sixteen",
            "34-34",
            "number",
            "3+3"
        ],
        "stress_tests": [],
        "serial": 1131,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\" \"+\"\\t\"*5000+\"\u0000\""
    },
    {
        "expression": "^([1-9]+\\d{0,2},(\\d{3},)*\\d{3}(\\.\\d{1,2})?|[1-9]+\\d*(\\.\\d{1,2})?)$",
        "raw_prompt": "Accepts non-negative numbers with max two decimals. Commas can be added after every thousand.",
        "refined_prompt": "Accepts non-negative numbers with max two decimals. Commas can be added after every thousand.\nMatch examples:\n- \"1200\"\n- \"1,200\"\n- \"1,200.0\"\nNon-match examples:\n- \"-43\"\n- \"0\"",
        "matches": [
            "1200",
            "1,200",
            "1,200.0",
            "12,324,532.23",
            "234122197712817448008574158167894889305230439779354370220937698578050893782896158227.78",
            "66394965947682179643452649243327481438317293881647562351429578967172264547986125157892974981634191636120788888047567662264848325693081625589017159",
            "863733627925899152866894911742679557969889767947742611498454471164255964323279645,158,054,484,881,965,222,364,885,707,932,542,241,383,180,567,542,514,867,036,972",
            "551369621886461782972191114464492755318941697931276344143837277496938913750923519255734953278866806433835",
            "91495832182691632527926,239,388,745,348,478,638,589,022,811,804,500,396,125,666,489,385,348,158,122,991,142,491,622,121,197,831,510,750,224,136,027,858,893,276,262,723,662,056,121,638,705,489,406,955,739,455,611,893,175,816,258,765,091,086,512,851,615,787,777,319,437,711,404,832,621,638,630",
            "9119565471413683647346558195673817473,448,573,495,805,989,746,055,223,129,395,757,273,464,744,931,500,207,298,788,333,550,975,799,871,141,044,106,312,274,764,107,907,931,257,475,081,322,261,496,732,009,898,456,535,014,862,322,492,265,072,816,328,508,305,310,112,689,157,701,089,084,567,448,541,009,967,544,490,653,321,322,705,937",
            "687357588294667585578626",
            "813183887279718535883742131575761825911494131375522235917296479139635776545860081144583730851407141300545489780557136407954.73",
            "7177128286236738886905329772080881695045031017932409702386065046187478712244527378681"
        ],
        "non_matches": [
            "-43",
            "0",
            "01,423,534.23",
            "24.4223",
            "32,42,123",
            "134253y6hterge",
            "34ty6",
            "df435678",
            "uy67543e",
            "er456",
            "543qfv",
            "653g45"
        ],
        "stress_tests": [],
        "serial": 1144,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"1\"*5000+\" \""
    },
    {
        "expression": "^[0-9]*[1-9]+[0-9]*$",
        "raw_prompt": "Allows only positive integers that are greater than 0. Also allows for infinite zeros leading the integer\nBased on William Powell's Pattern Title, but modified to allow for leading zeros.",
        "refined_prompt": "Allows only positive integers that are greater than 0. Also allows for infinite zeros leading to the integer\nMatch examples:\n- \"1\"\n- \"12\"\n- \"124\"\nNon-match examples:\n- \"-1\"\n- \"a\"",
        "matches": [
            "1",
            "12",
            "124",
            "01",
            "0012",
            "000124",
            "0456056898853258290052535909141449947763346124071099519164571289854655944451617155912138847698653624336996358636882626419149",
            "46958256105370176463315311504672534575648608130075527875460958175796347477937281561868894855362966967338559545531263555589847945645798388824272893481681574473762828549614845512745694623960580675",
            "838778102452570968618002967290535759234381294008100568708521648333919747513582156742395556355534167789561203424421508907573471001467336912131",
            "59243178360220518974977524032268252869783256427711504297180355797844365133253936498736137912484473134428433629192871622177748415296413197442647517467056322034045330465207797774188209863095273782857468049583162333877772343778564066486",
            "9035607486667778433287255438431614263",
            "2173247762150905619270434522184729642314788872748638294323640862487235604846967518462380060904",
            "107079596931536351545909256730859831054928608180812324257621143683697351393981683292321786696957732259158418344468426292755448306036256986543589987149164084480522274380340274402723299502431465896209140258535790"
        ],
        "non_matches": [
            "-1",
            "a",
            "1.0",
            "0000",
            "number",
            "345674rwegty",
            "+987654",
            "-987654",
            "0.087654",
            "9876545678hgfds",
            "7675r6fyt",
            "324565tr"
        ],
        "stress_tests": [],
        "serial": 1148,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"1\"*5000+\" \""
    },
    {
        "expression": "^[+]?((\\d*[1-9]+\\d*\\.?\\d*)|(\\d*\\.\\d*[1-9]+\\d*))$",
        "raw_prompt": "Matches any positive decimal number > 0 with optional leading '+' symbol and optional leading or trailing zeros on both sides of the decimal point. Decimal point is also optional and either side of the decimal is optional.",
        "refined_prompt": "Matches any positive decimal number > 0 with optional leading '+' symbol and optional leading or trailing zeros on both sides of the decimal point. Decimal point is also optional and either side of the decimal is optional.\nMatch examples:\n- \"010\"\n- \"010.\"\n- \".010\"\nNon-match examples:\n- \".\"\n- \"0\"",
        "matches": [
            "010",
            "010.",
            ".010",
            "010.010",
            "1243404772609295125460204035371614003828140108310.483882086089625121162296779392682463219687872418273841445297924589778656003699081173212696446764736168076709970110754272238158416496545182962276094816",
            "5787025258777226663819707379967196319384975473222131719286424617699635015993186695518392374645129413419824232769857118625924603488979620374196139158758967049899733974940005868347971383727258240349596530422889540028763704063",
            "+317390232368475384705319870283923655456872508597988998976484148982938930.74523413535367925846016470846001759708321521822199817916089893999756887856549219073857219000875348648398655713758532481199114884894818968926621332224528469823343672849792642124964271582263456940281441421730106292133702246064612081827607425743354934348703280078104380",
            "3182953897310785099910859118987204527113286602884476165.28666207806970913135774976284702115742844755844412008808399999838191175393795883917224339648955713837443957888639584667972427000449501810553657701093462565010252121364298943852915776823",
            "+46370587770832127929678376020248618142063452521989380145271251667849315652492763262895792996981293241358532486717314359262894718466298817749.0078953534904249259027644247073555111954696015987831490536214972",
            "+2158922856848719788004463835161024721556049945038228650203116367358142567921754193930284810014092696233574634329661884665831191742846614885446427786673787946142266681778485231299718559289788467849451632431428549557392523457149997506741350457845340358478259692.6676486109196738323654340119355044821760389646549846054709560",
            "+3443945771146322543101357179404990583317234398482679935929068146400310910737428742620921232436424511637883899494145437199864646986253318858145738253467897784935646391753133672842758967382388500380499978777346245625941109501315287373888375921853016913967902029227211816933034790877546215539",
            "540224785306964502417438075178309712450793216478411365239754751449503078288507348034276230640265870415651654801965705369326833953079649729225951284764202884061108949",
            "701894580094396043330941524260187427917372819176324599452830966390264117488527308225997026.731512256780380230594821447687785797535881670939160002092513059769006480051521463873976495539361793328226463771981348378341425825394853626992438944879686674884538674384632264928790579882949939404150959456898163151736661811870448"
        ],
        "non_matches": [
            ".",
            "0",
            "0.",
            ".0",
            "0.0",
            "0.00",
            "00.0",
            "00.00",
            "-0",
            "-1",
            "a",
            "#"
        ],
        "stress_tests": [],
        "serial": 1179,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"0\"+\"1\"*5000+\" \""
    },
    {
        "expression": "<!--(?!\\s*\\[if[^]]+]>[^<]*<!\\[endif\\]).*?-->",
        "raw_prompt": "Matches html comments but excludes comments that contain if statements",
        "refined_prompt": "Matches html comments but excludes comments that contain if statements\nMatch examples:\n- \"<!-- this is a comment -->\"\n- \"<!--;^RN|Ma){QQuC?\"z|RVWY_@i]%3>2=d,z-->\"\n- \"<!--Kb;-S2tff.DGG\\WZ!hF(]/`0-].z$\\* t*/Ir39:8^B+s&@{tX$;?-->\"\nNon-match examples:\n- \"<!-- [if lt IE 9]>blah<![endif]-->\"\n- \"<ref>\"",
        "matches": [
            "<!-- this is a comment -->",
            "<!--;^RN|Ma){QQuC?\"z|RVWY_@i]%3>2=d,z-->",
            "<!--Kb;-S2tff.DGG\\WZ!hF(]/`0-].z$\\* t*/Ir39:8^B+s&@{tX$;?-->",
            "<!---->",
            "<!--E:gh;a]4\"s-->",
            "<!--/~u{c_w+Qn8hb c.oUqow/[sRvVv1R3=[k`$:WRr-->",
            "<!--0{h8J$Ep qOt6p3dTZfOk:z-->",
            "<!--e( >80-z[?r?MLz&xeNi-70uEWok$/haO3+UbK)tvCh^(LERX?0l^^R >!.W/d<V{JssHYMt$/}D\\9,ScN6g>m-->",
            "<!--l svPDf{F<0o1@>_{yAMB=v&8Hnh-J]^a^cgS,I_g#U97kfAraoq08*81*VK'uDWr|9+R<Suyx<#vHh:yUoj,tC5DUL'{l-->",
            "<!--v4Dag[]X'j6O7qO]K.#IT<Dd7lB*Cx$Jq8yYz{`-->",
            "<!--m!`!Xmfv7q7^[WR6D&Os(Ph-\"M}I6>K\\:^|WyPfPN+oTU=6-+bhuHBPe}.~j+g.!\\7rcoJ`rt#j)p6\"=o7REs>`BeLT<qAn-->",
            "<!--wH1m9&T('3UZFB/$J`N/f^ZsR4L9K'UHX^QjE\",oLvA[Mafz\";`8}~qx W\\r*t/m\\[q<-->",
            "<!--VQ5 WgKWRuBnmVL#nt[Cr07h@Q/w_LEis~\\u:_H-->"
        ],
        "non_matches": [
            "<!-- [if lt IE 9]>blah<![endif]-->",
            "<ref>",
            "#ekf",
            "//grefdw",
            "/ erwfds",
            "\\\\frf4r3",
            "comment",
            "## frgrtf",
            "/* erhfgejr */",
            "< rfer <",
            "> jefejer <",
            "/// rtgfd"
        ],
        "stress_tests": [],
        "serial": 1388,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"<!--\"*10000+\"-\""
    },
    {
        "expression": "^-?[1-9]\\d*\\.?(\\d+([eE][-+]\\d+)?)?$",
        "raw_prompt": "Matches numbers including scintific format",
        "refined_prompt": "Matches numbers including scientific format\nMatch examples:\n- \"-23333.1e+24\"\n- \"123\"\n- \"34.2\"\nNon-match examples:\n- \"23333.01+24\"\n- \"+123\"",
        "matches": [
            "-23333.1e+24",
            "123",
            "34.2",
            "-87693717247827161710694734576192125749089372404404342916330522406312",
            "-58564737552536.48176669308690674801075092379671445298833269473178731660961607224906327105271832084398137517568204770E-543040380162654177953787637765950840354806562831489817623846468396061531953",
            "862812362091683.",
            "-14649493636878381404701033168989841646",
            "-8101504129224558449019.4405431612507291079373009997249872857073731454645109061855654267230552770570547052296479060",
            "-26289839608675870704205108719611455149053083752457354690998470666126956758238188267599153792124132000685265298028593",
            "-6675064312488545378599501435434424173844999467920.",
            "-6814243005789112884114406497450943039122013912782781.890142773956864806716537437059292866176042454049110855352E-316423271089475072396705264608329388811095333019381819638428674",
            "286373605821936943615099.",
            "-970298087661834718193198391350046452602031077045708513613731852440827586137422875"
        ],
        "non_matches": [
            "23333.01+24",
            "+123",
            "34.-20",
            "erfr",
            "x10",
            "SF",
            "erfher",
            "ferh",
            "+234",
            "#43",
            "45%",
            "$67"
        ],
        "stress_tests": [],
        "serial": 1407,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"1\"+\"0\"*5000+\"@\""
    },
    {
        "expression": "[\\+-]?(([0-9]*\\.[0-9]+|[0-9]+\\.[0-9]*)([Ee][\\+-]?[0-9]+)?[Ff]?|[0-9]+[Ff])",
        "raw_prompt": "match a float number with Exponent sign and f sign",
        "refined_prompt": "Match a float number with the exponent sign and f sign\nMatch examples:\n- \"2.0\"\n- \"0.3\"\n- \"-.4\"\nNon-match examples:\n- \"2\"\n- \"234\"",
        "matches": [
            "2.0",
            "0.3",
            "-.4",
            "3.f",
            "2.4E-2f",
            "0.4E4f",
            "+68434376123571142467671333051141441412549162726665641457598935856888338337434820138985484.664307172223275614010247617296990420438085998112386677234329037864208E+0662457405511922641715466678507712653",
            "+6176362542611252884025597684113289.8105089225831585683374870914605219366760001597567148798178476981283717742061565595146894E+694770675280515632438832830333321081149414075370607346851616310216292621614669458408723624364",
            "-2398391484596794397762854085052915343645012590.339019130297736924518857445618383172895615069F",
            "+90231760797109805979886764272453352040730501449040733319757748212598959228484795.829264756113990",
            "423882003293925017189914016862227084248082211151429215469802112539736543237828143699.74467043139633892985391897055925812735994337546941364549077703709",
            "+1923509943268612511356446160581734383473679536746387878086302297790286613301f",
            "-610004F"
        ],
        "non_matches": [
            "2",
            "234",
            ".f",
            "es.sss",
            "f",
            "E",
            "x",
            "x10",
            "exponent",
            "to the tenth",
            "323",
            "5432"
        ],
        "stress_tests": [],
        "serial": 1442,
        "problematic": [],
        "redos_hunter": false,
        "redos_hunter_attack_string": "\"\"+\"0\"*10000+\"\u0000\""
    }
]