1 : failed : failed : 0.180460518 (s) : ^[0-9]++
2 : failed : failed : 3.495269142 (s) : [[0-9]][0-9]+
3 : failed : failed : 0.296667356 (s) : ^[0-9]{1,3}$
4 : failed : failed : 0.835872946 (s) : [0-9]
5 : failed : failed : 3.386842664 (s) : [0-9]
6 : failed : failed : 3.600460853 (s) : [0-9]\\.?[0-9]*
7 : failed : failed : 1.464519763 (s) : r\"(\\.\\d{1,3})?(\\d{3})?(\\d{2})?(\\d{4})\"
8 : failed : failed : 0.197743883 (s) : [0-9]+
9 : failed : failed : 1.187163519 (s) : ^([0-9]+)$
10 : failed : failed : 3.804859497 (s) : \\d
11 : failed : failed : 0.350711379 (s) : \\b\\d{3}\\bI need to match text that is between 5 and 10 characters in length, and that contains 3 digits.
12 : failed : failed : 1.093094436 (s) : [0-9]{5}
13 : failed : failed : 1.077187148 (s) : \\d{5}
14 : failed : failed : 0.906500142 (s) : \\d{5}
15 : failed : failed : 0.34402096 (s) : The Regex pattern would be [0-9]{4}
16 : failed : failed : 0.557746911 (s) : r\"^\\d{9}$\"
17 : failed : failed : 2.064856718 (s) : (?i)\\d{3}
18 : failed : pumping failed : 33.401373717 (s) : (?<zipCode>[\\d]{5})[-.\\s]*(\\d{4})[-.\\s]*(\\d{3})
19 : failed : failed : 64.777957516 (s) : [0-9]{5}$
20 : failed : failed : 3.134474793 (s) : \\b
21 : failed : failed : 1.151400069 (s) : ([0-9]{5}[-\\+]?[0-9]{4}).
22 : failed : failed : 1.311794522 (s) : [0-9]{5}[ -]?[0-9][0-9][0-9][0-9]
23 : failed : failed : 0.988496066 (s) : \\d{5}-\\d{4}
24 : failed : failed : 1.022152842 (s) : (\\d{5}[-\\s]\\d{4})
25 : failed : failed : 0.737613467 (s) : r\"^\\d{5}-\\d{4}-\\d{3}-\\d{2}$\"
26 failed : unparsable : 0 (s) : Please check your regex.
27 : failed : failed : 2.321169606 (s) : [\\s\\w\\-_]+{4}
28 : failed : failed : 0.976109121 (s) : (1) ZIP-1234-5678 9-8765-4321.
29 : failed : failed : 1.756903618 (s) : ZIP\\+4[0-9]
30 : failed : error init : 0.190418225 (s) : (?i)
31 : failed : failed : 0.185728644 (s) : ^\\d{5}(-\\d{4})$
32 : unparsable : unparsable : 0.097871382 (s) : (?=\\d{4}\\-\\d{3}\\s[A-Z]\\d{3}[A-Z]\\d{4}[A-Z]\\d{5
33 : failed : failed : 1.340482623 (s) : ^[0-9]{5}-[0-9]{4}$
34 : failed : failed : 0.176925669 (s) : ^[\\da-z][-\\d]{3}[-\\d]{4}$
35 : failed : failed : 0.191636867 (s) : ^[0-9]{5}
36 : failed : failed : 0.793351972 (s) : /^(\\d{1,2})
37 : failed : failed : 44.84450671 (s) : [a-z0-9]{4}-[a-z0-9]{4}-[a-z10-9]
38 : failed : failed : 0.917657976 (s) : ^([0-9]{5})-([0-9]{4})-([0-9]{3})-([0-9]{2})$
39 : failed : failed : 0.242440742 (s) : ^\\d{4}-\\d{3}-\\d{2}$
40 : unparsable : unparsable : 0.106989428 (s) : (?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[@])(?=.*[$-_@.
41 : failed : failed : 10.163091441 (s) : [A-Z]{3}[-\\s]{4}\\d{3}[-\\s]{2}\\d{4}
42 : failed : failed : 1.085664744 (s) : \\d{3}-\\d{2}-\\d{4}
43 : failed : failed : 0.171194216 (s) : SSN-NN-NNNN'''```
44 : failed : failed : 1.20907997 (s) : (\\d{3})-(\\d{2})-(\\d{4})
45 : failed : failed : 0.594638242 (s) : \\b\\d{3}-\\d{2}-\\d{4}\\b
46 : failed : failed : 1.29835779 (s) : [\\d\\s]-[\\d\\s]-[\\d\\s]-[\\d\\s]
47 : failed : failed : 5.716147875 (s) : [A-Z][0-9]{4}-[0-9]{2}-[0-9]{2}
48 : failed : failed : 0.335377284 (s) : r\"^([0-9]{3})-([0-9]{3})-([0-9]{4})-([0-9]{2})-([0-9]{2})-([0-9]{4})$\"
49 : failed : failed : 0.521081792 (s) : r'^([1-9]\\d{3})-([1-9]\\d{2})-([1-9]\\d{4})$'
50 : failed : failed : 0.24323018 (s) : r'\\d{3}-\\d{2}-\\d{4}'
51 : failed : failed : 0.997975638 (s) : [a-zA-Z]
52 : failed : failed : 0.305170419 (s) : ^[A-Z][a-z]*[-_][A-Z][a-z]*$
53 : failed : failed : 5.473153265 (s) : ^([A-Za-z]+)$
54 failed : unparsable : 0 (s) : Please check your regex.
55 : failed : failed : 3.158613174 (s) : [a-zA-Z]
56 : failed : failed : 9.448021469 (s) : r\"[A-Za-z]+\"
57 : failed : failed : 0.665775023 (s) : ~[a-zA-Z]
58 : failed : failed : 0.278557193 (s) : [A-Za-z]   The same as \\w  (which will match any-letter-or-number, but doesn't include underscore).
59 : failed : failed : 18.289565134 (s) : [A-Z]{1}|[a-z]{1}The match should be able to mat
60 : failed : failed : 0.270995974 (s) : [A-Za-z0-9_.\\\\-]
61 : failed : failed : 9.604058262 (s) : ^[a-zA-Z0-9]*$
62 : failed : failed : 0.735590929 (s) : /^(?=.*[a-z].*)(?=.*[A-Z].*)\\S+$/ Explanati
63 : failed : failed : 0.568748341 (s) : ^[A-Za-z]*$
64 : failed : failed : 1.087833686 (s) : (?i)(?=\\w)(?=[^A-Za-z])(?=\\w)[A-Za-z]{8}\\w{1,12}[A-Za-z]
65 : failed : failed : 3.584657439 (s) : [A-Z][a-z]*
66 : failed : failed : 11.243657948 (s) : \\b[a-zA-Z]*\\b
67 : failed : failed : 2.909088196 (s) : [A-Za-z]+
68 : unparsable : unparsable : 0.060554694 (s) : \\b([A-Za-z]{1,}
69 : failed : failed : 0.457941085 (s) : Reg
70 : failed : failed : 14.788367341 (s) : s/[A-Za-z ]*$/
71 : failed : failed : 0.704507082 (s) : ~^M*e$
72 : failed : failed : 3.777954685 (s) : [a-zA-Z0-9-]*
73 : failed : failed : 0.358806316 (s) : ^[a-zA-Z0-9_]*$
74 : failed : failed : 0.495461175 (s) : [a-zA-Z0-9_]*
75 : failed : pumping failed : 25.091259802 (s) : (?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[a-zA-Z])(?=.{8,})(?=.*[!@#$%^&*()_+=~`-])(?=\\S)[a-zA-Z0-9\\_]{8,}$
76 : success : init : 3.318611705 (s) : ^[^|]*(\\|.*?\\|)+$
77 : failed : failed : 0.471121828 (s) : ^[a-zA-Z0-9]*$
78 : failed : failed : 5.231939051 (s) : ^[a-zA-Z0-9 \\t]+$
79 : failed : failed : 4.54165898 (s) : (.*)
80 : failed : failed : 0.260068482 (s) : [a-z][0-9]{0,13}
81 : failed : failed : 1.274750393 (s) : [A-Za-z0-9_]+(-[A-Za-z0-9_]+)*
82 : failed : failed : 77.748611658 (s) : r'(?i)(?<![0-9])(?<![a-zA-Z_][0-9a-zA-Z_0-9])[a-zA-Z0-9_]{3,}(?![0-9a-zA-Z_][0-9a-zA-Z_0-9])'
83 : failed : failed : 0.857418602 (s) : \\d{3}-\\d{3}-\\d{4}
84 : failed : failed : 0.340911738 (s) : ^3(3[0-9]|[0-9])$
85 : failed : failed : 0.620551598 (s) : \\b\\d{8}\\b
86 : failed : failed : 2.071787526 (s) : 1(0)?
87 : failed : failed : 0.298304391 (s) : ^[a-zA-Z0-9]-?[0-9]+$
88 : failed : failed : 2.229681757 (s) : 1+1+1+1+1+1+1
89 : failed : failed : 3.723427168 (s) : 1[0-9a-f]{16}$
90 : failed : failed : 0.161799614 (s) : \\d\\d\\d\\d
91 : failed : failed : 3.631613569 (s) : ^[-+]?[0-9]*\\.[0-9]*$
92 : failed : failed : 0.873516357 (s) : \\d+
93 : failed : failed : 0.824883387 (s) : \\d+
94 : failed : failed : 4.409851829 (s) : (\\d+\\.?\\d*)%
95 : failed : failed : 0.58107301 (s) : 1\\.?\\d*
96 : failed : failed : 0.164616339 (s) : ^[+-]?\\d+$
97 : failed : failed : 0.463010708 (s) : ^([0-9]|1[01]\\d|2[02]\\d|3[03]\\d|4[04]\\d|5[05]\\d|6[06]\\d|7[07]\\d|8[08]\\d|9[09]\\d)$
98 : failed : failed : 0.174377387 (s) : ^[0-9]+$
99 : failed : failed : 3.202468046 (s) : (?<!\\d)\\d+(?!\\d)
100 : failed : pumping failed : 42.414888384 (s) : \\+?\\d+
101 : failed : failed : 1.00226487 (s) : ^(?=.{4,15}$)(?=.*[a-z])(?=.*[0-9])(?=.*[\\_])[A-Za-z0-9\\_]{3,}$
102 : failed : failed : 2.634990784 (s) : ^(?=.*[A-Z])(?=.*\\d)(?=.*[_]).{8,16}$
103 : failed : failed : 3.546909633 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?!.*[^a-zA-Z0-9_]).{4,15}$
104 : failed : failed : 5.671806832 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d[a-zA-Z])(?=.*[_a-z])(?=.{4,15}).*$
105 : failed : failed : 0.236082375 (s) : ^[a-zA-Z][\\w]{3,15}$
106 : failed : failed : 0.233041501 (s) : ^[A-Za-z0-9_]{8,15}$
107 : failed : failed : 0.251455463 (s) : ^[a-zA-Z_][a-zA-Z0-9_]{4,15}$
108 : failed : failed : 1.255884034 (s) : [a-z][a-z0-9_]{0,14}
109 : failed : failed : 0.607075012 (s) : ^(?=.*[a-z])(?=.*[0-9])(?=.*[a-z_])[a-z0-9_]{4,15}$
110 : failed : failed : 1.055723766 (s) : [a-zA-Z][a-zA-Z0-9][a-zA-Z0-9_]{4,15}
111 : failed : failed : 4.049045628 (s) : @[a-z0-9][0-9]{1,4}(\\.|$)
112 : failed : pumping failed : 190.188195411 (s) : [\\w\\.-]+@[a-z\\d\\.\\w\\-]{1,6}\\.
113 : failed : failed : 0.499966181 (s) : (^[_\\w\\.-]+[_\\w\\.-]+@[a-zA-Z0-9.\\-]+(\\.[a-zA-Z]{2,4}$)  )
114 : unparsable : unparsable : 0.09833446 (s) : ([a-z0-9]+
115 : unparsable : unparsable : 0.103496607 (s) : (?=^[a-zA-Z0-9][a-zA-Z0-9._-]{0,63}@[a-zA-Z0-9.-]+\\.[a-
116 : failed : failed : 50.438658165 (s) : ^((\\w{2,3}).*\\.(com|org|net))|(joe\\.)*$
117 : unparsable : unparsable : 0.080285562 (s) : /^(?!.*\\.\\.)[A-Za-z0-9][A-Za-z0-9-_.]*@[A-Za-z0-9][A-Za-z
118 : failed : failed : 3.958737187 (s) : [^\\w.]+
119 : failed : failed : 0.254066181 (s) : ^[a-zA-Z0-9][a-zA-Z0-90-9]\\.[a-zA-Z0-9]$
120 : failed : error init : 0.119596155 (s) : ^
121 failed : unparsable : 0 (s) : Please check your regex.
122 : failed : failed : 3.334799218 (s) : (?<!\\d)\\d{1,2}\\/(?<!\\d)\\d{2}/\\d{4}
123 : failed : failed : 1.318537068 (s) : (\\d{1,2})/(\\d{1,2})/(\\d{4})
124 : failed : failed : 0.198058783 (s) : ^[0-9][0-9][0-9][0-9]$
125 : failed : failed : 0.341204405 (s) : (yyyy-mm-dd) (\\d\\d-\\d\\d-\\d\\d)
126 : failed : failed : 3.977272726 (s) : [(1-2)(0-9)(0-9)]+
127 : failed : failed : 0.94012605 (s) : \\d{1,2}\\/\\d{1,2}\\/\\d{4}
128 : failed : failed : 0.159104477 (s) : (\\d{2})/(\\d{2})/(\\d{4}), so you should get the date in the form X/XX/YYYY.
129 : failed : failed : 0.729901636 (s) : \\d{1,2}\\/\\d{1,2}\\/\\d{4}
130 : failed : failed : 0.905232408 (s) : (\\d{1,2})/(\\d{2})/(\\d{4})
131 : failed : failed : 0.126438317 (s) : ^[1-5]$
132 : failed : failed : 0.155056216 (s) : ^[12345]$
133 : failed : failed : 0.166380783 (s) : ^[1-5][0-9]$In general, try to avoid using lookaheads, unless you know that they will not happen, or unless they are required to be there.
134 : failed : failed : 0.214042333 (s) : ^[1-9][0-9]
135 : failed : failed : 0.175638399 (s) : ^[1]\\d{3}[5]$.
136 : failed : failed : 0.12455993 (s) : ^[12345][0-9]?$
137 : failed : failed : 0.235813942 (s) : ^[1-5][0-9]$
138 : failed : failed : 6.573969562 (s) : ^[0-9]{3,}$
139 : failed : failed : 0.163973455 (s) : ^[1-5]$
140 : failed : failed : 0.133761701 (s) : ^[0-9]{3}$
141 : failed : failed : 0.137058805 (s) : ^[1-5]0$
142 : failed : failed : 0.141393081 (s) : ^[1-5][1-9][0-9]$
143 : failed : failed : 0.122642819 (s) : ^[1-5]$
144 : failed : failed : 0.141906953 (s) : ^[1-9][1-9][1-9][1-9][1-9]$
145 : failed : failed : 0.176572297 (s) : ^[1-5]$
146 : failed : failed : 0.178650318 (s) : ^[1-5]$
147 : failed : failed : 0.169094795 (s) : ^[1-5]$
148 : failed : failed : 1.138246928 (s) : ^[1-5]$
149 : failed : failed : 0.118110653 (s) : ^[1-5]$
150 : failed : failed : 0.106513476 (s) : ^[1-5]$
151 : failed : failed : 0.141043507 (s) : ^([1-9]|\\d{2}\\-\\d{3})$
152 : unparsable : unparsable : 0.091241498 (s) : ~^(?!
153 : failed : failed : 0.174782215 (s) : ^[2-9]{3}-?[0-9]{4}$
154 : failed : error init : 0.120672851 (s) : \\b\\d{3}[- ]\\d{3}[- ]\\d{4}\\b. The '\\b' before the start of each group of digits specifies that the group belongs to the start of a word (rather than at the start of the string). The hyphens make the pattern look like a regular phone number, and the digits between the hyp
155 failed : unparsable : 0 (s) : Please check your regex.
156 : failed : failed : 2.90902093 (s) : [0-9]{2}-[0-9]{3}-[0-9]{4}
157 : failed : failed : 0.218211841 (s) : (8-?)\\d(6-?)\\d\\d\\d\\d\\d\\d\\d\\d-\\d\\d\\d\\d\\d-\\d\\d\\d\\d\\d-\\d\\d\\d\\d\\d-\\d\\d\\d\\d\\d
158 : failed : failed : 18.096137483 (s) : [0-9]{3}-[0-9]{3}-[0-9]{4}
159 : failed : failed : 4.221208958 (s) : (?<!\\S)\\d{2}
160 : failed : failed : 0.196830483 (s) : A-B-C-D-E-F-G-H-I
161 : failed : failed : 0.12410094 (s) : Domain nam
162 : failed : failed : 0.119888953 (s) : Domain nam
163 : failed : failed : 0.210159392 (s) : Domain nam
164 : failed : failed : 0.135989503 (s) : Domain nam
165 : failed : failed : 0.128510948 (s) : Domain nam
166 : failed : failed : 0.230432255 (s) : Domain nam
167 : failed : failed : 0.136181692 (s) : Domain nam
168 : failed : failed : 0.145728239 (s) : Domain nam
169 : failed : failed : 0.29222638 (s) : Domain nam
170 : failed : failed : 0.147900196 (s) : Domain nam
171 : failed : pumping failed : 34.540849668 (s) : (?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,10}
172 : failed : failed : 2.46148552 (s) : (?i)^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{4,8}$
173 : failed : failed : 0.228718686 (s) : ^[a-zA-Z0-9]{4,8}$
174 : failed : failed : 0.905002839 (s) : [a-zA-Z0-9]{4,8}
175 : failed : failed : 0.736170795 (s) : \\d{4,8}\\.\\d
176 : failed : pumping failed : 26.58229654 (s) : (.*)\\/?(\\d{4}.*)?\\/?(\\d{2})?\\/?(\\d{2})?\\/?(\\d{2})?/
177 : failed : failed : 1.576328475 (s) : ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\\d]{4,8}$
178 : failed : failed : 0.128730489 (s) : ^[4-8]\\d+$
179 : failed : failed : 2.710082009 (s) : r'\\b[A-Za-z0-9]{4,}\\d\\d\\d\\d\\b'
180 : failed : failed : 6.601538316 (s) : ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$
181 failed : unparsable : 0 (s) : Please check your regex.
182 : failed : failed : 2.427556034 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{4,8}$
183 : failed : pumping failed : 19.244707402 (s) : (.*[a-z])([0-9])(.*[A-Z])(.*)[a-zA-Z0-9]{3,8}
184 : failed : failed : 4.123928382 (s) : ^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[\\W]).{8,}$
185 : failed : failed : 0.496814109 (s) : r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{4,8}$\"
186 : failed : failed : 1.630510686 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{4,8}$
187 : failed : failed : 0.864004075 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{4,8}$
188 : failed : failed : 1.693709892 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{4,8}$
189 : failed : failed : 10.496213271 (s) : [A-Z]{4}\\w\\d{1,3}[A-Z]
190 : failed : failed : 1.922672795 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{4,8}$
191 : failed : failed : 0.476402697 (s) : ^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$
192 : failed : failed : 0.61111651 (s) : ^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$ Generate a RegEx for the description of a file. Answ
193 : failed : failed : 0.852992094 (s) : ^((25[0-4]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-4]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
194 : failed : failed : 0.317908211 (s) : ^((01[0-9]||[1-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([01]?[0-9]|2[0-4][0-9]|25[0-5])$
195 : failed : failed : 1.343173372 (s) : (?<=^\\d{1,3}\\.){3}\\d{1,3}$
196 : failed : error init : 0.135418754 (s) : ^
197 : failed : failed : 0.623324421 (s) : .NET RegularExpressionValidator.
198 : failed : failed : 0.842021029 (s) : (^[0-9]{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$)
199 : failed : failed : 6.718150273 (s) : [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}
200 : failed : failed : 0.525068838 (s) : (^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$)
201 : failed : failed : 0.638579597 (s) : Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answ
202 : failed : failed : 0.966232026 (s) : Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answ
203 : failed : failed : 1.006249381 (s) : Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answ
204 : failed : failed : 0.844081106 (s) : Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answ
205 : failed : failed : 1.05411833 (s) : Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answ
206 : failed : failed : 0.872546591 (s) : Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answ
207 : failed : failed : 1.621134037 (s) : Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answ
208 : failed : failed : 1.198509044 (s) : Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answ
209 : failed : failed : 1.087922942 (s) : Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answ
210 : failed : failed : 1.526952023 (s) : Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the.COM section.Generate a RegEx for this description. Answ
211 : failed : failed : 3.479381591 (s) : - 
212 : failed : failed : 3.274366542 (s) : \\d+(\\.\\d{2})?
213 : failed : failed : 0.19944048 (s) : ^\\$[0-9,.]{2}
214 : failed : failed : 0.469300217 (s) : \\$(\\d+(\\.\\d+)?)(\\.\\d{2})
215 : failed : failed : 0.956441782 (s) : ^\\d*?[\\.\\d]?\\d{0,2}\\d*$
216 : failed : failed : 0.322701387 (s) : $0.00Reg
217 : failed : failed : 0.400180914 (s) : \\b\\$(\\d+\\.?\\d{1,2})\\b
218 : failed : failed : 0.195868642 (s) : [a-zA-z0-9]+
219 : failed : failed : 3.982842125 (s) : \\$([0-9]+(\\.0+)?(,\\s*[0-9]{2})?)?
220 : failed : failed : 0.908483316 (s) : \\$\\d+(\\.\\d+)?
221 : failed : failed : 1.885344234 (s) : /
222 : failed : failed : 1.214304613 (s) : /
223 failed : unparsable : 0 (s) : Please check your regex.
224 : unparsable : unparsable : 0.09759227 (s) : [
225 : failed : error init : 0.112199553 (s) : ^
226 : unparsable : unparsable : 0.065922265 (s) : (
227 failed : unparsable : 0 (s) : Please check your regex.
228 : failed : failed : 0.17278766 (s) : .
229 failed : unparsable : 0 (s) : Please check your regex.
230 : unparsable : unparsable : 0.057616341 (s) : [
231 : failed : failed : 1.036593243 (s) : ^[0-9]+$
232 : failed : failed : 4.282518015 (s) : (?=\\d)(?=\\D)[A-Za-z0-9\\s]+$
233 : failed : failed : 0.296371161 (s) : [0-9]+
234 : failed : failed : 10.987994516 (s) : ^[\\d,]+, +[\\d,]+, +[\\d,]+$
235 : failed : failed : 1.036136488 (s) : ^[\\d\\.]+$
236 : failed : failed : 0.622204854 (s) : ^(\\\\d+)(\\\\s*|$)$
237 : failed : failed : 0.137443024 (s) : [0-9]+
238 : failed : failed : 1.577940263 (s) : \\d+|[a-zA-Z]+
239 : failed : failed : 0.119750083 (s) : ^[0-9]$
240 : failed : failed : 0.55966898 (s) : (Any RegEx that verifies if it contains a number / integer)
241 : failed : failed : 0.773534632 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{4,8}$
242 : failed : failed : 11.016461832 (s) : \\b(?i)(?=.{4,8}$)\\w
243 : failed : failed : 0.199465136 (s) : ^(?=.{4,8}$)[A-Za-z0-9]{4,8}$ ##### 
244 : failed : failed : 0.741640558 (s) : ^[a-z0-9]{1,5}[a-z0-9]{1,5}[a-z0-9]{1,5}[a-z0-9]{1,5}$
245 : failed : failed : 0.565033184 (s) : r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@!%*?&])[A-Za-z\\d$@!%*?&]{4,8}$'Exercise
246 : failed : failed : 279.223119635 (s) : [a-zA-Z0-9_][a-zA-Z0-9_]{2,8}$
247 : failed : failed : 0.633080619 (s) : ^([a-zA-Z0-9_.+-]{4,8})$
248 : failed : failed : 3.797950069 (s) : [A-Za-z0-9._%+-]+
249 : failed : failed : 0.619813436 (s) : r'^(.{4,8})$'
250 : failed : failed : 1.331353317 (s) : \\d{4,8}.
251 : failed : error init : 0.160127984 (s) : ^
252 : failed : failed : 0.357469032 (s) : ^\\s*([1-9]\\d*)[\\.\\-\\,]\\s*([1-9]\\d*)$
253 : failed : failed : 0.733661826 (s) : r'^\\d+$'
254 : failed : failed : 0.943326022 (s) : -^\\d+$
255 : failed : failed : 0.528213066 (s) : ^[0-9]+$
256 : failed : failed : 0.222450929 (s) : ^[0-9]+$
257 : failed : failed : 0.239936362 (s) : ^(2?[0-3][0-9])[ -]?[0-9]{4,16}$
258 : failed : failed : 0.759105703 (s) : ^[0-9]+$
259 : failed : failed : 0.164650112 (s) : ^0*[1]$
260 : failed : failed : 1.011367616 (s) : ^[0-9]*$
261 : unparsable : unparsable : 0.088842125 (s) : /^([+-]?\\d+
262 : failed : failed : 0.224454782 (s) : ^[+-]?\\d+(\\.\\d+)?$
263 : failed : failed : 4.378295878 (s) : (?<![-+0-9])\\d(?![-+0-9])
264 : failed : failed : 1.816278072 (s) : {0,1}[+-]?\\d+
265 : failed : error init : 0.112855782 (s) : ^
266 : failed : failed : 0.847730231 (s) : ^[-+]?\\d+(\\.\\d+)?$
267 : failed : failed : 3.453454441 (s) : \\d+
268 : failed : failed : 0.916823974 (s) : \\d*
269 : failed : failed : 0.804883055 (s) : ^\\d+$
270 : unparsable : unparsable : 0.084618386 (s) : +[0-9]
271 : failed : failed : 0.189980024 (s) : ^[+-]?
272 : failed : error init : 0.132727695 (s) : ^
273 : failed : failed : 9.264645571 (s) : ^[-+]?[0-9]*\\.?[0-9]*[eE][-+]?[0-9]+$
274 : failed : failed : 0.492228061 (s) : '^
275 : unparsable : unparsable : 0.081355426 (s) : ^[+-]?(0|\\.\\d+|1|2|3|4|5|6|7|8|9|0|[\\+\\-]?\\s*\\d+\\.\\d+|\\d+$
276 : failed : failed : 1.911197207 (s) : (0\\.\\d*|\\d+)
277 : failed : failed : 0.138370441 (s) : ^(?=\\d*\\.)?
278 : failed : failed : 0.193976448 (s) : ^\\d+$
279 : failed : failed : 0.347718414 (s) : ^[+-]?\\d+(\\.\\d+)?$
280 : failed : failed : 1.081387234 (s) : \\d\\.\\d+
281 : failed : failed : 0.751414059 (s) : [\\s]?1[ -]?\\d{3}[ -]?\\d{3}[ -]?\\d{4}
282 : failed : failed : 13.930926827 (s) : ^(\\+)?[1-9][0-9]{3}[-\\s]?[1-9][0-9]{3}$
283 : unparsable : unparsable : 0.090100471 (s) : (?P<PhoneNumber>[0-9]{1,3}\\s?[- ]?[0-9]{3}[- ]?[0-9]{4})
284 : failed : failed : 0.181930842 (s) : ^(\\d{3})((\\.\\d{3})?)(\\s|-|\\/)(\\d{3})((\\.\\d{2})?)(\\s|-|\\/)(\\d{4})$
285 : failed : failed : 11.332425382 (s) : (^|\\s)((1[\\d]|2[\\d]|3[\\d]|[1-9]\\d{2}))[\\s-]?(\\d{3}[\\s-]?){3}
286 : failed : failed : 0.140440817 (s) : ^[1-9][0-9]?[0-9]{0,3}
287 : failed : pumping failed : 5.972944869 (s) : ^[^ ]*\\d[^ ]+[^ ]*[^ ]*$
288 : failed : error init : 0.127949908 (s) : ^
289 : failed : failed : 0.846773859 (s) : \\d{3}-\\d{3}-\\d{4}
290 : failed : failed : 0.578024311 (s) : ^\\+?\\s?\\d{3}\\s?[-\\s.]?\\d{3}[-\\s.]?\\d{4}$
291 : failed : failed : 0.864991854 (s) : h
292 : failed : failed : 0.153490624 (s) : var inputString = \"
293 : unparsable : unparsable : 0.094048624 (s) : ^(0|[1-9]
294 : unparsable : unparsable : 0.088030785 (s) : ^\\d{
295 : unparsable : unparsable : 0.093551303 (s) : (?<hour>[0-9]{2
296 failed : unparsable : 0 (s) : Please check your regex.
297 : failed : failed : 0.174124083 (s) : The time in the format of 
298 : unparsable : unparsable : 0.094913143 (s) : ^([0-9]{1,2
299 : failed : failed : 0.693655922 (s) : (HH|MM)
300 : unparsable : unparsable : 0.06216533 (s) : ^(\\d{
301 : failed : failed : 1.357396455 (s) : \\b[A-Z]{1,2}\\s[A-Z, ]{1,2}\\b
302 : failed : failed : 0.690685781 (s) : (.{1,50}?,.{1,50})?
303 : failed : failed : 6.743424621 (s) : (?i)(?<!^)(?=,|$)(?=\\w*\\s\\w*)(?=\\s,\\s+\\w*\\s+\\w*)
304 : failed : pumping failed : 18.867716033 (s) : .*(?=\\\\d{2}\\\\s)?(?= [a-z]{2})?[a-z]{1,2}[0-9]{1,3}
305 : failed : failed : 183.786467442 (s) : a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z, with commas and space before and after, with any amount of space between the text.
306 : failed : failed : 7.980360604 (s) : (?<=^|, )+?[A-Za-z0-9 ]+(?=,)
307 : failed : failed : 8.54630749 (s) : \"([A-Z][a-z]*)? ([a-z]*, [A-Z][a-z]*)? ([A-Z]*)? ([A-Z]*)? ([A-Z]*)? ([A-Z]*)? ([A-Z]*)? ([A-Z]*)?\"
308 : failed : pumping failed : 215.241566368 (s) : [a-zA-Z0-9,.]+\\s+(\\w+ \\w+){2,}
309 : failed : failed : 0.692333957 (s) : ^([a-zA-Z0-9, ]*)\\s?$
310 : unparsable : unparsable : 0.090843592 (s) : [a-z,A-Z,0-9+,, -, ', ]* [a-zA-Z0-9+, -, ', ]* [a-zA-Z0-9+, -, ', ]* [a-zA-Z0-9+, -, ', ]* [a-zA-Z0-9+, -, ', ]* [a-zA-Z0
311 : failed : failed : 2.01271588 (s) : (([a-zA-Z]\\d{2})-([a-zA-Z]\\d{4}))
312 : failed : error init : 0.105065565 (s) : ^
313 : failed : failed : 0.855639661 (s) : ([0-9]{5})([0-9]?)
314 : unparsable : unparsable : 0.083454285 (s) : ([0-9]{5}
315 : failed : failed : 0.947898133 (s) : \\d{5}
316 : failed : pumping failed : 93.830360083 (s) : [A-Z0-9]{1,}\\.[A-Z0-9]{1,}[A-Z]{4}
317 : failed : failed : 1.105091041 (s) : \\d{5}
318 : failed : failed : 1.201232314 (s) : [0-9][0-9][0-9][0-9][0-9]
319 : failed : failed : 0.236809136 (s) : ^[0-9]{5}[-]?[0-9]{4}$
320 : failed : failed : 23.16921399 (s) : ([a-zA-z]{2}[0-9]{3}[s]{0,1}[0-9]{3}[0-9]{3}[a-zA-z]{3})
321 : unparsable : unparsable : 0.06383157 (s) : (\\+31|
322 failed : unparsable : 0 (s) : Please check your regex.
323 : unparsable : unparsable : 0.067715463 (s) : ^(\\d\\+[.-]\\d{3}[.-]\\d{3}[.-]\\d{4}[.-]\\d{4}
324 : failed : failed : 0.173525753 (s) : ^[()+-0]{3}[0-9]{9}$
325 : failed : failed : 0.498728824 (s) : (^(00?[1-9]\\d|1[0-9]{2}\\d|2[0-4][0-9]|25[0-5])[.-]?0[1-9]\\d{9}$)This regex means  1.
326 : failed : failed : 0.879161348 (s) : '^(([01]\\d{2})\\s)?([0-9]{9})-([0-9]{3})$'.
327 : unparsable : unparsable : 0.10653195 (s) : ^\\+31(0|\\+31(0|\\+31(0|\\+31(0|\\+31(0|\\+31(0|\\+31(0|\\+31(0|\\+31(0|\\+31(0|\\+31(0|
328 : unparsable : unparsable : 0.081396782 (s) : ^(?P<prefix1>+)?(?P<num1>\\d{3})(?P<num2>\\d{3})[ -]?(?P<num3>\\d{4})(?P<num4>\\d{4})[ -]?
329 : failed : failed : 0.380622309 (s) : ^\\+31\\s*[0-9]{9}$
330 : failed : failed : 0.462419271 (s) : r'^[+](\\d{1,3}[ -]){0,3}(\\d\\d)\\d{3}$'
331 : unparsable : unparsable : 0.081464019 (s) : \\w\\d{9}\\s?\\d{0,1}\\s?[X]?\\d{0,1
332 : failed : failed : 1.921743365 (s) : /^
333 : failed : failed : 1.13303001 (s) : (\\d{3})-?(\\d)-?(\\d)-?(\\d)-?(\\d)-?(\\d)-?
334 : unparsable : unparsable : 0.095181766 (s) : ^[A-Z0-9]{3}(\\-[A-Z0-9]{3}){0,3
335 : unparsable : unparsable : 0.128238398 (s) : \\D{3}[-\\s]?\\D{3}[-\\s]?\\D{3}[
336 : failed : failed : 2.611289382 (s) : [0-9]{9}|[0-9]{10}[X][0-9]{5}
337 : failed : failed : 0.228153628 (s) : (\\d){10}(\\s-)\\d{3}(\\s-)\\d{3}(\\s-)\\
338 : failed : failed : 0.422720361 (s) : /^\\d{9}[ -]\\d{2}[ -]\\d{2}[ -]\\d
339 : failed : failed : 2.652829068 (s) : [0-9]{10}
340 : failed : failed : 0.747476726 (s) : \\d{10}$
341 : failed : failed : 1.012880058 (s) : \\d{1,2}-\\d{1,2}-\\d{4}
342 : failed : failed : 0.525099085 (s) : /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z])[0-9a-zA-Z]{3}-?[0-9]{3}
343 : failed : error init : 0.154555979 (s) : ^
344 : failed : failed : 8.26755977 (s) : \\d,\\d,\\d{2}|\\d{3}/\\d{2}|\\d{5}
345 : unparsable : unparsable : 0.115452425 (s) : '([0-9]|
346 : failed : failed : 1.033561776 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
347 : unparsable : unparsable : 0.073427309 (s) : (d|dd)([0-9]|[1-9])([0-9]|[1-9][0-9])[-/.](    [0-9]{4}|[0-9]{3}[-/.][0-9]
348 : failed : failed : 1.46499361 (s) : (0[1-9]|1[012])[0-9]{3}|1[012][0-9]{3}
349 : failed : failed : 12.072322505 (s) : d|mm|yyyy
350 : unparsable : unparsable : 0.069794306 (s) : [Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd][Dd
351 : failed : failed : 0.62992479 (s) : This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answ
352 : failed : failed : 0.691546852 (s) : This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answ
353 : failed : failed : 1.6528352 (s) : This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answ
354 : failed : failed : 1.357375687 (s) : This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answ
355 : failed : failed : 0.764638514 (s) : This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answ
356 : failed : failed : 0.559638072 (s) : This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answ
357 : failed : failed : 1.29208783 (s) : This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answ
358 : failed : failed : 0.849073606 (s) : This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answ
359 : failed : failed : 1.32967785 (s) : This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answ
360 : failed : failed : 0.407506432 (s) : This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok!!Generate a RegEx for this description. Answ
361 : failed : failed : 1.358149546 (s) : \\d{1,2}[a-z]{4}\\s[a-z]{3}\\-
362 : failed : failed : 6.833835303 (s) : [A-Z]{1}[0-9][A-Z0-9{3}]?[A-Z]{1}
363 : failed : failed : 0.729550418 (s) : 78.54\\d+A
364 : failed : failed : 1.812208141 (s) : (?<=\\D)\\d{3}(?=\\D)
365 : failed : failed : 0.720968277 (s) : \\b[A-Z]{3}-\\d{2}\\b
366 : failed : failed : 47.0234425 (s) : [0-9]{3}-
367 failed : unparsable : 0 (s) : Please check your regex.
368 : failed : failed : 0.904203331 (s) : (\\D{3})(\\d{3})-(\\d{3}[a-z]|[a-z]{3}\\d{3}[a-z]?)$
369 : failed : failed : 2.139589651 (s) : (3,6)-([1-9]\\d{3}|[1-9]\\d{2})
370 : failed : pumping failed : 47.380005226 (s) : (?<!^\\d\\d\\d-)(.+?)(?=$\\d\\d\\d-)Generate a RegEx for this description.
371 : failed : failed : 0.231228976 (s) : ^[A-Z]{1}[0-9]{1}[- ][A-Z]{1,2}[0-9]{1}$
372 : failed : failed : 0.184629836 (s) : ^[A-Z]{2}[0-9]{1,2}[A-Z]\\s?\\d{2}$
373 : failed : failed : 0.143958775 (s) : ^[A-Z]{2}[0-9]{7}
374 : failed : failed : 0.639747323 (s) : r'^[A-Z]{1}[A-Z]{1}[1-9][A-Z]\\s?[A-Z]{1}[A-Z]\\s?[A-Z]{1}[A-Z]\\s?[A-Z]\\s?[A-Z]{1}[1-9][A-Z]
375 : failed : failed : 2.071998401 (s) : ^(?=.*[a-z])(?=.*[A-Z])([a-zA-Z]\\d*?)$
376 : failed : failed : 18.349389611 (s) : [a-zA-Z]{1}[0-9]{2}
377 : failed : error init : 0.110760269 (s) : ^
378 : failed : failed : 1.175884969 (s) : ^[A-Z]{1}[0-4][0-9]{1,3}$
379 : failed : failed : 0.244171022 (s) : ^[0-9]{2}[A-Z]{2}[0-9]{2}$
380 : failed : failed : 0.203944885 (s) : ^\\d{1,2}[A-Z]{1}\\d{2}$
381 : failed : failed : 0.853304067 (s) : \\d{4}-\\d{2}-\\d{2}
382 : failed : failed : 0.997000231 (s) : ((\\d{1,2})-(\\d{1,2})-(\\d{4}))
383 : failed : failed : 0.237303361 (s) : ^([0-9]{2})(.[0-9]{2})(.[0-9]{2})(.[0-9]{3})$
384 : failed : failed : 0.829122375 (s) : \"^[0-9]{1,2}.[0-9]{1,2}.[0-9]{1,2}\\.[0-9]{1,2}$\"
385 : unparsable : unparsable : 0.076614137 (s) : (\\d{4}-[a-z]+)\\/(\\d{2})-(\\d{2})\\/(\\d{2})\")
386 : failed : failed : 0.983756752 (s) : (\\d+)-(\\d+)  -  (\\d+)
387 : failed : error init : 0.136151205 (s) : ^
388 : failed : failed : 27.368093044 (s) : [^0-9]?[0-9]?[1-9][0-9] or [0-9]?[0-9]?
389 : failed : failed : 9.054378988 (s) : (?<!\\D)(?<=\\d)\\.\\d{2}
390 : failed : failed : 1.044808907 (s) : \\d{1,2}\\/\\d{1,2}\\/\\d{1,2}
391 : unparsable : unparsable : 0.078903814 (s) : ^(0[1-9]|1[012])[-/.](0[1-9]|1[012])[-/.](0[1-9]|1[012])[-/.](19|2[0
392 : failed : failed : 5.778491017 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}-[0-9]{2} [0-9]{2}
393 : failed : pumping failed : 223.371649933 (s) : (yyyy-mm-dd|yyyy/mm/dd|yyyy-mm|yyyy+mm)
394 : unparsable : unparsable : 0.070455283 (s) : ^([0-9]{4})(-(0[1-9]|1[012]))[0-9]\\2[0-9]{3}(-[0-9]{1,2})?)$
395 : unparsable : unparsable : 0.0765839 (s) : ^[0-9]{4}-[0-9]{2}-[0-9]{2}$|^[0-9]{4}-[0-9]{1,2}-[0-9]{1,
396 : unparsable : unparsable : 0.084051955 (s) : ^\\d{4}-\\d{2}-\\d{2}\\s+\\d{1,2
397 : unparsable : unparsable : 0.089690373 (s) : (([ \\d]+/[ \\d]+/[ \\d]+)        | 
398 : unparsable : unparsable : 0.115725186 (s) : ^(19|20)\\d{2}(0[1-9])|(1[0-2])\\d|(2[0-3])\\d|(3[0-1])\\d|(4[0-
399 : failed : failed : 0.265858985 (s) : ^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/([0-9][0-9])/(0[1-9]|1[012])
400 : unparsable : unparsable : 0.11316396 (s) : \"^(?P<year>\\d\\d\\d\\d)(?P<month>\\d?\\d)\\s(?P<day>\\d\\d)\\s(?P<time>\\d\
401 : unparsable : unparsable : 0.050584715 (s) : ^\\d{7,10,11}$
402 : unparsable : unparsable : 0.10587499 (s) : ?[0-9]{9,10}|[0-9]{7,11}
403 : failed : failed : 29.897762073 (s) : [a-zA-Z0-9-]{7,8}-[a-zA-Z0-9-]{8,9}-[a-zA-Z0-9-]{10,11}
404 : failed : failed : 1.289807569 (s) : [0-9]{8,16}
405 : unparsable : unparsable : 0.064827505 (s) : /[0-9]{7,10,11}-?[0-9]{7,10,11}-?[0-9]{7,10,11}-?[0-9]{7,10,11}-?[0-9]{7,10,11}-?[0-9]{7,10,11}-?[0-9]{7,10,11}
406 : failed : failed : 0.88851324 (s) : ^[0-9]{7,10}$|^[0-9]{7,11}$
407 : unparsable : unparsable : 0.104775932 (s) : \\d{7,10,11}
408 : failed : failed : 0.367648554 (s) : [0-9]{7}-?[0-9]{7}-?[0-9]{7}-?[0-9]{7}-?[0-9]{7}-?[0-9]{6}-?[0-9]{4}-?[0-9]{2}-?[0-9]{2}
409 : unparsable : unparsable : 0.089247043 (s) : [0-9]{7,10,11}
410 : failed : failed : 0.233398569 (s) : \\d{7,10}-\\d{3}-\\d{3} Note that the hyphens represent a range of numbers. This means that the whole set of possibilities will contain a hyphen between the three ranges, like th
411 : failed : failed : 0.809898878 (s) : /^[a-zA-Z0-9]{4}[a-zA-Z0-9\\-]{3}[a-zA-Z0-9\\-]{2}[a-zA-Z0-9\\-]{1}\\.xls$
412 : failed : failed : 0.642552577 (s) : \\.xls$
413 : failed : failed : 1.170479036 (s) : ^[^.xls]*xls$
414 : failed : failed : 1.064562097 (s) : (\\\\.xls)
415 : failed : failed : 13.603488279 (s) : # Regular Expression to validate a physical file path with the.xls extension \\/Users/.*\\/(xls)\\/.*
416 : failed : pumping failed : 36.620458039 (s) : [^\\.]+\\.xls|[^\\.]+\\.xls$
417 : failed : failed : 2.772010946 (s) : ^(?=.*/)
418 failed : unparsable : 0 (s) : Please check your regex.
419 : failed : failed : 0.991661885 (s) : \\w+.xls
420 : failed : failed : 0.272280139 (s) : ^\\w{3}-\\w{4}-\\d{2}\\.xls$
421 : failed : failed : 0.818044891 (s) : \\d{1,3}
422 : failed : failed : 18.51702312 (s) : 0?[1-9]|1[012]|2[0-3]
423 : failed : failed : 0.309363781 (s) : r'^([11]?)\\d{0,2}[aA]M[aA]M[aA]M$'
424 : failed : failed : 0.198998132 (s) : [0-9]{1,2}
425 : unparsable : unparsable : 0.086601559 (s) : ^(
426 : failed : failed : 16.800686527 (s) : (00?[1-9]|[1-9]\\d{0,2})(00?[1-9]|[1-9]\\d{0,2})([012]\\d|[012]\\d\\d)
427 : unparsable : unparsable : 0.089517599 (s) : (^0*[1-9]\\d|1[012]
428 : failed : failed : 0.134799393 (s) : 12-hour time
429 : failed : failed : 0.2285183 (s) : ^\\d{1,2}\\s*(AM|PM)?\\s*\\d{1,2}$
430 : unparsable : unparsable : 0.103060891 (s) : ([0-9]{3}[-][0-9]{3})|([0-9]{3
431 : failed : failed : 1.434360738 (s) : \\d{1,2}/\\d{2,4}
432 : failed : failed : 0.167327746 (s) : ^[0-9]{1,2}\\/[0-9]{2,4}$
433 : failed : failed : 1.468300373 (s) : \\d{1,2}\\/\\d{2,4}
434 : failed : failed : 0.849317162 (s) : /([0-9]{1,2}/[0-9]{2,4})/  ##### Exercise
435 : failed : failed : 1.412845378 (s) : \\d{2}\\/\\d{4}
436 : failed : failed : 0.834180828 (s) : r'^([0-9]{1,2})/(\\d{2,4})$'
437 : failed : failed : 0.344668552 (s) : %d[0-9]/[0-9]{2}
438 : failed : failed : 16.929463423 (s) : (0[1-9]|1[0-2])\\/((0[1-9]|[12][0-9]|3[01])|(0[13]|1[012])|(12[0-9]|3[01]))$
439 : failed : failed : 0.938991475 (s) : \\d{1,2}\\/\\d{1,2}\\/\\d{4}
440 : failed : failed : 2.531188795 (s) : (\\d{1,2}\\.)(\\d{1,2})(\\/)(\\d{1,2})$
441 : failed : failed : 1.025983826 (s) : [0-9]\\d{2}\\/[1-9]\\d/\\d{4}
442 : failed : failed : 2.094416761 (s) : (0|\\d{1,2})/0(0|\\d{1,2})/0(0|\\d{1,2})/
443 : failed : failed : 0.179843193 (s) : ^\\d\\d\\d\\/\\d\\d\\/\\d\\d$
444 : failed : failed : 1.378504773 (s) : \\b\\d{2}/\\d{2}/\\d{4}\\b
445 : failed : failed : 3.603620158 (s) : (0?[1-9]|1[012])/(0?[1-9]|1[012])\\/\\\\d{4}
446 : failed : failed : 2.026374045 (s) : \\b
447 : failed : failed : 1.464899183 (s) : \\b(0[1-9])(2[0-9]|3[01])\\/([0-2][1-9]|3[0-1])\\b
448 : failed : failed : 1.102006495 (s) : \\b[0-9]{2,2}\\/[0-9]{2}\\/[0-9]{2}\\b
449 : failed : failed : 0.719181451 (s) : \\d{2}[- /.]\\d{2}[- /.]\\d{4}
450 : failed : failed : 1.97580498 (s) : \\b
451 : failed : failed : 1.796338864 (s) : \\d{2}
452 : unparsable : unparsable : 0.063786345 (s) : (?P<MM>\\d{2})/(?P<DD>\\d{2})/(?P<YYYY>\\d{4})/
453 : failed : failed : 0.702298476 (s) : \\b([0-9]{2})/([0-9]{2})/([0-9]{4})\\&quot;
454 : failed : failed : 1.272796153 (s) : (0[1-9]|[12][0-9])\\/([0-9]{3})/[0-9]{4}
455 : failed : failed : 0.764519069 (s) : %(month)02d/%(day)02d/%(year)s
456 : failed : failed : 6.174651974 (s) : [0-9][1-9][0-9]/[1-9][0-9]/[1-9][0-9][-0-9]
457 failed : unparsable : 0 (s) : Please check your regex.
458 : failed : failed : 0.815729205 (s) : \\d{1,2}\\/\\d{1,2}\\/\\d{4}
459 : failed : failed : 1.23644307 (s) : \\b(0[1-9][0-9]|1[012])[0-9]{1,2}/[0-9]{2}/[0-9]{4}\\b
460 : unparsable : unparsable : 0.086427713 (s) : /^(
461 failed : unparsable : 0 (s) : Please check your regex.
462 : failed : failed : 6.464100302 (s) : (^|^)([0-9]{1,3}[0-9]{0,3}[0-9]{0,3}[0-9]{0,3}[0-9]{0,3})$
463 : failed : failed : 5.352984228 (s) : (\\d+)(['.\\d]{1,3}\\.)
464 : failed : failed : 1.096124711 (s) : (\\d{3,})'\\\\.\\\\d{2,}'
465 : failed : failed : 0.806222824 (s) : \\d{1,3}
466 : failed : failed : 0.738911317 (s) : \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}
467 : failed : failed : 0.173913789 (s) : @RegEx = /(\\d{3}([\\.\\,]\\d*)?)
468 : unparsable : unparsable : 0.052416956 (s) : (?<val>^'
469 : failed : error init : 0.130869665 (s) : ^
470 : failed : failed : 0.940517202 (s) : \\d{3}(\\.\\d{1,2})?(,\\d{3})?
471 : failed : failed : 0.891127425 (s) : Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answ
472 : failed : failed : 0.90828263 (s) : Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answ
473 : failed : failed : 0.73544702 (s) : Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answ
474 : failed : failed : 0.966605054 (s) : Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answ
475 : failed : failed : 0.855731332 (s) : Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answ
476 : failed : failed : 0.792686616 (s) : Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answ
477 : failed : failed : 0.87500247 (s) : Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answ
478 : failed : failed : 0.926277757 (s) : Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answ
479 : failed : failed : 0.765610264 (s) : Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answ
480 : failed : failed : 0.465445618 (s) : Fully functional date validator in format dd.MM.yyyyWorks only within range of years 2000-2099!It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.Generate a RegEx for this description. Answ
481 : failed : error init : 0.108679352 (s) : ^
482 failed : unparsable : 0 (s) : Please check your regex.
483 failed : unparsable : 0 (s) : Please check your regex.
484 : failed : failed : 0.212990474 (s) : \"
485 : failed : failed : 2.325781562 (s) : @
486 : unparsable : unparsable : 0.090878237 (s) : [
487 failed : unparsable : 0 (s) : Please check your regex.
488 failed : unparsable : 0 (s) : Please check your regex.
489 failed : unparsable : 0 (s) : Please check your regex.
490 failed : unparsable : 0 (s) : Please check your regex.
491 : failed : failed : 0.266211765 (s) : ^(0|1)(\\d{1,2})\\s\\1\\s(0|1)\\d{2}-\\d{4}\\d{2}$
492 : failed : failed : 3.768442333 (s) : [0-9]{2}/[0-9]{2}/[12][0-9]{2}|[0-9]{4}
493 : failed : failed : 21.612928467 (s) : [0-9]{1,2}/[0-9]{1,2}/YYYY|[0-9]{1,2}/[0-9]{1,2}/YYYY
494 : failed : failed : 0.465651544 (s) : DD/MM/YYYY|MM/DD/YYYY|YYYY-MM-DD|YYYY-MM-DD|YYYY MM DD YYYY|YYYY MM DD YYYY (with leading zeros)
495 : failed : failed : 22.185262043 (s) : 0[1-9]|[12][0-9]|3[01]|[1-9]\\/[1-9]\\/[1-9]|\\d{4}|\\d{4}-
496 : failed : failed : 2.8369978 (s) : r'(0[1-9]|1[0-2])/\\d{2}/\\d{4}|(0[1-9]|1[0-2])/\\d{2}/
497 : failed : failed : 3.045456478 (s) : ([0-9]\\d|1[012]|2[0-9]|3[01])\\/([1-2]\\d|3[01])\\/([0-9]\\d)
498 : unparsable : unparsable : 0.052521181 (s) : [0-9]{2}/[0-9]{2}/[0-9]{4}|[0-9]{2}/[0-9]{2}/2021|[0
499 : unparsable : unparsable : 0.081094606 (s) : ^(0?[1-9]|1[012])/([0-9]|30|31|38|39|40|41|42|43|45|46|47|48|49|50|51
500 : failed : failed : 0.190106932 (s) : \\d{1,2}/\\d{1,2}/\\d{4} and |\\d{4}|
501 : failed : failed : 2.404448292 (s) : re.compile(regex)
502 : failed : failed : 35.291007845 (s) : ~[0-9]+(\\.[0-9]+)?[+-](\\.[0-9]+)?
503 : failed : failed : 1.196804482 (s) : [0-9]+
504 : failed : pumping failed : 19.296317428 (s) : [+0-9]*.?[-+]?[0-9]+
505 : failed : failed : 29.380905153 (s) : \\d+.\\d+/-?[a-zA-Z0-9]
506 : failed : failed : 0.437205045 (s) : /^\\+?[0-9]+
507 : failed : pumping failed : 5.673886587 (s) : [0-9]+(\\.[0-9]+)?[+-]?[0-9]+$
508 : failed : pumping failed : 35.066592638 (s) : [0-9]*\\.?[0-9]+|-?[0-9]*\\.?[0-9]+
509 : failed : failed : 0.846254937 (s) : [0-9]+
510 : failed : pumping failed : 179.737393865 (s) : {0,1}[0-9]+[.][0-9]+
511 : failed : failed : 0.156380967 (s) : ^\\d{5}-?\\d{4}-?\\d
512 : failed : failed : 0.173658831 (s) : ^5(0-9)\\\\-(0-9)\\\\-4
513 : unparsable : unparsable : 0.076081359 (s) : [0-9]{5}\\-[0-9]{4}\\-[
514 : failed : failed : 0.160404722 (s) : ^\\d\\d\\d\\d\\d\\d\\d\\
515 : unparsable : unparsable : 0.10212585 (s) : \\A(?=\\d{5}\\Z)^\\d{5
516 : unparsable : unparsable : 0.07797227 (s) : ^[A-Z]{2}\\d{3}(-\\d
517 failed : unparsable : 0 (s) : Please check your regex.
518 : failed : failed : 1.193244326 (s) : \\b[A-Z]{5}\\d{2}\\-\\d
519 : unparsable : unparsable : 0.10404318 (s) : ^[0-9A-Z]{3}-[0-9A
520 : unparsable : unparsable : 0.06622927 (s) : \\b[A-Z]{5}[-\\d]{4
521 : failed : failed : 111.527249292 (s) : ^[0-9]{5}|[0-9]{3}[0-9]{3}$
522 failed : unparsable : 0 (s) : Please check your regex.
523 : failed : failed : 0.158466813 (s) : ^[0][1-9][0-9][0-9]$
524 : failed : failed : 3.472611173 (s) : \"^
525 : failed : failed : 0.614686385 (s) : [1-5][0-9][3-9]
526 : failed : failed : 0.83114379 (s) : ^[4][1-9][0-9]$
527 : failed : failed : 0.497846983 (s) : /^\\d+$/;
528 : failed : failed : 1.927496438 (s) : (\\d{1,5})\\d{2,6}$
529 : failed : failed : 0.198848031 (s) : CEP\\D+
530 : failed : failed : 2.754543317 (s) : \\d{1,3}[A-Z]\\d{1,3}[A-Z]\\d{1,3}[A-Z]\\d{3}
531 : unparsable : unparsable : 0.061618526 (s) : ^(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})$
532 : failed : failed : 0.519551376 (s) : ^\\$\\d{1,3}(,\\d{3})*$
533 : failed : failed : 0.302592071 (s) : \"\\$([23456789,.\\d]*?)\"You will need to add a character class to ensure that the dollar sign only appears if you want to account for commas in the value, not just the currency sign itself.$(`^\\$[\\d,]*?$`) and $(`^[\\d,]*?$`)
534 : unparsable : unparsable : 0.08673023 (s) : ^(?=.*[\\d.,])(?=.{0,6}$)(?=\\d{3}
535 : failed : failed : 1.318729017 (s) : US$\\d|\\d\\d(,\\d\\d)?
536 : failed : failed : 0.788060253 (s) : \\$(\\d+(,\\d+)?)\\.?\\d*
537 : failed : failed : 0.271104327 (s) : ^[1-9][0-9]*[0-9]*[,0-9]*[0-9]*$
538 : failed : failed : 1.318809007 (s) : \\$[1-9][0-9]?\\.[0-9]{2}
539 : failed : failed : 0.49256399 (s) : ^\\d+(\\.\\d+)?(,\\d+)?$
540 : failed : failed : 1.74384807 (s) : (?<!\\d),(?<![\\d.,])(?<![,\\d.])(?<![,\\d.]),(?<![,\\d.])(?<![,\\d.])(?!\\d)
541 : unparsable : unparsable : 0.109076085 (s) : (\\d{2
542 : unparsable : unparsable : 0.137196663 (s) : \\b(?=\\d{
543 : unparsable : unparsable : 0.060802829 (s) : 0[2-9] | 1[0-2] | 2[0-3] | 3[0-2] | 4[0-9] | 5[0-9] | 6[0-9] | 7[0-1] | 8[0-9] | 9[0-9]\"\"\"def parseTime(time_st
544 : unparsable : unparsable : 0.089525074 (s) : \\d{
545 : unparsable : unparsable : 0.087407609 (s) : (?=(
546 : failed : error init : 0.086239791 (s) : H{5}M{5}             H{5}M{4}             H{4}M{4}             H{2}M{4}             H{2}M{3}             H{3}M{3}             H{3}M{2}             H{2}M{2}             H
547 : unparsable : unparsable : 0.060522273 (s) : ^([0-1][0-9]|2[0-3][0-9]|[0-9]
548 : unparsable : unparsable : 0.092078245 (s) : ^[0-9]{1,
549 : failed : failed : 1.016713666 (s) : hh|mm|hh|mm   Explanati
550 : unparsable : unparsable : 0.071092477 (s) : \\(([0-3]?[0-9])|([0-5][0-9]([0-5][0-9]))|([0-4][0-9]([0-9]))(
551 : failed : failed : 0.577571133 (s) : Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at ht
552 : failed : failed : 0.558350541 (s) : Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at ht
553 : failed : failed : 0.602575206 (s) : Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at ht
554 : failed : failed : 0.555427037 (s) : Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at ht
555 : failed : failed : 0.503890209 (s) : Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at ht
556 : failed : failed : 0.364830147 (s) : Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at ht
557 : failed : failed : 0.379241935 (s) : Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at ht
558 : failed : failed : 0.444702395 (s) : Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at ht
559 : failed : failed : 0.448038602 (s) : Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at ht
560 : failed : failed : 0.469778993 (s) : Matches US currency input with or without commas. This provides a fix for the currency regular expression posted at ht
561 : unparsable : unparsable : 0.062261911 (s) : (?P<cents>\\d+)[,\\s]*(?P<dollars>\\d+(\\.\\d+)?)?
562 : failed : failed : 1.578427996 (s) : \\$?\\d+\\.\\d{2}|\\d+\\.\\d{3} or simply \\d+\\.?
563 : failed : failed : 0.677962525 (s) : \\d+[.\\d]*
564 : failed : failed : 2.6889777 (s) : (\\$?\\d{1,2})[\\d,.]+
565 : failed : failed : 4.528514675 (s) : ~?\\d+
566 : failed : failed : 32.26636891 (s) : (\\d*)[\\,\\.]?$
567 : failed : failed : 0.680920916 (s) : \"^[0-9]*([.][0-9]*)?\"
568 : failed : failed : 0.234593066 (s) : \\$(0[1-9]\\d*|[12][0-9]\\d*)(\\d*)$
569 : failed : failed : 3.009563445 (s) : [^\\d\\.]+
570 : failed : failed : 1.158229448 (s) : $10.50 | $10.50\\b
571 : failed : failed : 0.247845462 (s) : ^(\\d{1,2})/(\\d{4})$
572 : failed : failed : 0.802975262 (s) : \\d{1,2}[/-](\\d{4,})
573 : failed : failed : 0.17336932 (s) : ^(0[1-9]|1[012])/([0-9]{2}|[12][0-9]|3[01])$
574 : failed : failed : 1.092668289 (s) : (?<!\\d)(\\d{1,2})/(\\d{2,4})/(\\d{4})
575 : failed : failed : 1.101999802 (s) : \\d{1,2}/\\d{2}
576 : failed : failed : 24.219683387 (s) : (?i)([1-9][0-9][0-9])/([1-9][0-9][0-9])
577 : failed : failed : 0.681860494 (s) : ^(?=.{4,30}$)(0[1-9]|1[012])\\/(0[1-9]|1[012])\\/\\d{2,4}$
578 : failed : failed : 0.234047756 (s) : 1-9([01]?[12]|0[1-9])|0[1-9]1[012]|1[012]0[1-9]|2[012]0[3-9]|3[012]0[5-9]|4[012]0[7-9]|5[012]1[0-9]|6[012]1[1-9]|
579 : failed : failed : 0.153655083 (s) : ^([1-9]\\d|1\\d\\d|2[0-3])/
580 : failed : failed : 0.681897663 (s) : ^[12][0-9]{3}-\\1\\d{2}$|^\\d{4}$
581 failed : unparsable : 0 (s) : Please check your regex.
582 : unparsable : unparsable : 0.051864231 (s) : ([^\\s()<>\\[\\]
583 : unparsable : unparsable : 0.070758492 (s) : (?<country>\\s?[(]?
584 : failed : failed : 2.119179501 (s) : (9)\\d{3}(?!-?\\s)
585 : failed : failed : 0.940627057 (s) : \\b\\+[0-9]{2}[\\w]{4}\\b
586 : failed : failed : 0.208040544 (s) : ^[\\+\\-]?[0-9]{3}[\\+\\-]?[0-9]{4}[\\+\\-]?[0-9]{3}[\\+\\-]?[0-9]
587 failed : unparsable : 0 (s) : Please check your regex.
588 failed : unparsable : 0 (s) : Please check your regex.
589 : failed : failed : 1.493163932 (s) : (\\d)
590 : unparsable : unparsable : 0.075426352 (s) : (?<code>[\\+\\-]?[\\d]{3}[\\s-](\\d{3}[\\s-]\\d{4}|\\d{4}[\\s-]\\d{3})
591 : failed : failed : 0.166150662 (s) : ^(\\\\w+\\\\.txt)?
592 : failed : failed : 0.188639214 (s) : const regex = /^(.+\\.txt$)/i;
593 : failed : failed : 68.890081015 (s) : Regex =.*.txt$
594 : failed : failed : 11.824955829 (s) : /[A-Za-z0-9_\\-\\.]+\\.txt
595 : failed : failed : 1.073645416 (s) : ^[a-zA-Z][\\w.-]*
596 : failed : failed : 1.912277901 (s) : /(\\w+\\.txt|\\w+\\.csv|\\w+)\\.(txt|csv|json)$
597 : failed : pumping failed : 140.729915572 (s) : [^\\\\/]+$
598 : failed : failed : 1.484465474 (s) : ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[\\.])[A-Za-z0-9\\-\\.\\_]+$
599 : failed : failed : 15.50622912 (s) : \"([a-z][0-9][a-z0-9]*[\\.][0-9]{2,}[a-z]{2,})\"
600 failed : unparsable : 0 (s) : Please check your regex.
601 : failed : failed : 1.003392562 (s) : ^[A-Za-z0-9._-]{1,63}$
602 : failed : failed : 4.70746716 (s) : ^[^.|-]+$
603 : failed : failed : 0.59588107 (s) : \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\"
604 : failed : failed : 0.105250351 (s) : [^a-zA-Z0-9-_\\.]+
605 failed : unparsable : 0 (s) : Please check your regex.
606 : failed : failed : 7.837686634 (s) : ^\\b[A-Za-z0-9-_.]+$
607 : failed : failed : 0.124712416 (s) : [^a-zA-Z0-9\\-\\.]
608 : failed : failed : 7.952446292 (s) : ^[a-zA-Z0-9._-]+$
609 : failed : pumping failed : 180.856446337 (s) : [^a-z0-9.]*\\.[^a-z]
610 failed : unparsable : 0 (s) : Please check your regex.
611 : failed : failed : 0.164610317 (s) : ^-?\\d+\\.\\d+$
612 : unparsable : unparsable : 0.093684423 (s) : ^(?=
613 : failed : failed : 0.16577071 (s) : \\.
614 failed : unparsable : 0 (s) : Please check your regex.
615 : failed : failed : 19.291861132 (s) : /.*\\s*
616 : failed : error init : 0.10167236 (s) : ^
617 : failed : failed : 0.103958661 (s) : ^[+-]?
618 : failed : failed : 0.246782672 (s) : ^[-+]?\\d*\\.\\d+
619 : failed : failed : 6.893171115 (s) : ^[0-9]*\\.?[0-9]*(e|E[+-]?[0-9]+)?$
620 failed : unparsable : 0 (s) : Please check your regex.
621 : failed : failed : 0.133532772 (s) : Matches times seperated by eith
622 : failed : failed : 0.178401793 (s) : Matches times seperated by eith
623 : failed : failed : 0.131900776 (s) : Matches times seperated by eith
624 : failed : failed : 0.222296009 (s) : Matches times seperated by eith
625 : failed : failed : 0.257625326 (s) : Matches times seperated by eith
626 : failed : failed : 0.165441284 (s) : Matches times seperated by eith
627 : failed : failed : 0.184999277 (s) : Matches times seperated by eith
628 : failed : failed : 0.186144492 (s) : Matches times seperated by eith
629 : failed : failed : 0.147647092 (s) : Matches times seperated by eith
630 : failed : failed : 0.159592862 (s) : Matches times seperated by eith
631 : unparsable : unparsable : 0.070205075 (s) : \\p{L}\\p{P}|\\p{P}\\p{L}|\\p{P}\\p{L}|\\p{P}\\p{L}|\\p{P}\\p{L}|\\p{P}\\p{L}|\\p{P}\\p{L}|\\p{P}\\p{L}|\\p{P}\\p{L}|\\p{P}\\p{L}|\\p{
632 : failed : failed : 2.733009603 (s) : \\
633 : failed : failed : 56.017470683 (s) : (?i)(^(?![-\\s])([a-zA-Z0-9\\-\\']+|[a-zA-Z0-9].*[a-zA-Z0-9])$)\"
634 : failed : failed : 50.195733929 (s) : \\A[A-Za-z0-9-\\s\\.]+\\Z
635 : failed : failed : 0.197961841 (s) : [a-z0-9_.-]
636 : failed : failed : 18.610522806 (s) : (?i)\\b[A-Za-z0-9']*\\b
637 : failed : failed : 0.759538874 (s) : r'^[a-zA-Z0-9-\\.]*$'
638 : failed : failed : 0.558988545 (s) : (\\w+)-\\w+'\\s+-\\w+'
639 : failed : failed : 0.210493347 (s) : [a-z0-9-\\p{P}']
640 : failed : failed : 1.085222425 (s) : [a-zA-Z0-9\\-\\.' ]+
641 : failed : failed : 0.721236409 (s) : \\b(\\d+)(\\.?\\d+)?\\s*[1-9]\\d*[1-9]\\b
642 : failed : failed : 1.438949812 (s) : \\d+[.\\d]?[eE][ \\n]+\\d+[.\\d]?[eE][ \\n]+\\d+
643 : failed : failed : 0.134250647 (s) : ^[0-9\\.]{1,3}$
644 : failed : failed : 0.61296468 (s) : ^[0-9]\\s?(\\d+)\\s?([\\d+]\\.\\d+)$
645 : failed : failed : 0.571777514 (s) : ^\\s*\\d+(\\.\\d+)?\\s*\\d+(\\.\\d+)?\\s*$
646 : failed : failed : 0.835403507 (s) : ^([0-9]{1,2})(\\.(0,\\d{1,2}))?$
647 : failed : failed : 2.429911635 (s) : \\b
648 : failed : failed : 0.238116805 (s) : /^(\\d{1,2},)?\\s?(\\d{1,2},)?\\s?(\\d{1,2}(\\.[0-9]{1,2})?|[0-9]{1,2})$/ 3. Create a RegEx that will match anything but a '\\d' Answ
649 : failed : pumping failed : 3.395498342 (s) : ^(0|[1-9][0-9]*(.[0-9]*)?)(0?[1-9][0-9]*(.[0-9]*)?[1-9][0-9]?)$
650 : failed : failed : 0.176749689 (s) : ^[1-9][1-9](0|[1-9][0-9]|0.0)$
651 : failed : failed : 6.360810332 (s) : This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answ
652 : failed : failed : 1.803163614 (s) : This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answ
653 : failed : failed : 1.894391647 (s) : This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answ
654 : failed : failed : 1.24336939 (s) : This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answ
655 : failed : failed : 1.825249552 (s) : This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answ
656 : failed : failed : 1.171667352 (s) : This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answ
657 : failed : failed : 1.032042842 (s) : This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answ
658 : failed : failed : 1.70131302 (s) : This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answ
659 : failed : failed : 1.670935335 (s) : This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answ
660 : failed : failed : 5.396313666 (s) : This will grep for a valid MAC address, with colons seperating octets. It will ignore strings too short or long, or with invalid characters. It will accept mixed case hexadecimal. Use extended grep.Generate a RegEx for this description. Answ
661 : failed : failed : 29.181459793 (s) : [0-9]%.+[0-9]'
662 : failed : failed : 0.892617195 (s) : \\d{1,2},[0-9]{3}%
663 : failed : failed : 0.329134794 (s) : %d - 3 number comma%d - 3 number without comma%d - 3 number without comma%d - 3 number without comma
664 : failed : failed : 0.151280125 (s) : import re
665 : failed : failed : 2.847662621 (s) : [0-9]{1,3}[,0-9]{3}[,0-9]{3}[,0-9]{3}[,0-9]{3}[,0-9]{3}
666 : failed : failed : 7.32234457 (s) : [0-9]{0,3}[,][0-9]{0,3}[,][0-9]{0,3}
667 : failed : pumping failed : 65.468525733 (s) : [0-9 ]+%.?
668 : failed : failed : 1.157920349 (s) : ([0-9]+(,\\d{3})?)
669 : failed : failed : 2.550761858 (s) : \\b%(\\d{1,2}(,\\d{1,3})*)\\b
670 : failed : failed : 4.467086847 (s) : \\d+,\\d{1}\\.\\d{1}$
671 : unparsable : unparsable : 0.078202772 (s) : [0-9]{2}/[0-9]{2}/[0-9]{4} OR [0-9]{2}/[0-9]{2}/[0-9]{4} [0-9]{
672 : unparsable : unparsable : 0.073871772 (s) : .*\\s\\d\\d/\\d\\d/\\d\\d\\d\\d \\d\
673 : failed : failed : 0.800892311 (s) : \"^(0[1-9]|1[012])([0-9]{1,2})([0-9]{3})$\"
674 : failed : failed : 0.767456721 (s) : (?<day>\\d{2}\\/\\d{2}\\/\\d{4}|\\d{2}\\/\\d{2}\\/\\d{4})\\s*
675 : failed : failed : 7.984485829 (s) : [1-9][0-9]|1 [0-2][0-9]|3 [0-9]{4} | 4 [0-9]{1,2} (0[1-9]|1[0-9]|2[0-9]|3[01])
676 : failed : error init : 0.104074649 (s) : ^
677 : unparsable : unparsable : 0.055413026 (s) : /\\d{2}\\/\\d{2}\\/\\d{4}|\\d{2}\\/\\d{2}\\/\\d{4} \\d{
678 : failed : failed : 111.790000291 (s) : [0-9]{3}[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}|[0-9]{2}/[0-9]{2}/[0-9]{4}|[0-9]{2}/[0-9]{2} 00
679 : unparsable : unparsable : 0.072768596 (s) : [0-9]{2}/[0-9]{2}  |  [0-9]{2}/[0-9]{2} \\d{
680 : unparsable : unparsable : 0.065701291 (s) : [01-31-19XX]|[01-31-YYYY 
681 failed : unparsable : 0 (s) : Please check your regex.
682 : unparsable : unparsable : 0.074608441 (s) : /^((?!\\.)\\b([0-9]+|[a-z]{2,9})([a-zA-Z0-9\\-]*)(\\.[a-zA-Z0-9]+)+)(\\.([a-z]{2,}|[a-z]{1,2}
683 : failed : failed : 0.288949684 (s) : /^[a-z]{1,63}\\.[a-z]{1,3}\\.[a-z]{1,4}\\z$/i\"\"\"from re import compile
684 : unparsable : unparsable : 0.051247716 (s) : s/\\//g && (              /[a-z][a-z0-9-_ ]*[a-z0-9-_][a-z0-9-_][a-z0-9-_][a-z0-9-_][a-z0-9-_][a-z0-
685 : failed : failed : 5.424632185 (s) : ^(?!.*\\.{2})(?!.*\\.{2}.*\\.)$1...$5 [\\w\\d.-]+$/
686 : failed : failed : 3.541794746 (s) : #(?=\\S+[\\w|._]*@\\w+[\\w|._]*@[a-zA-Z][a-zA-Z0-9\\-]*.[a-zA-Z0-9\\-]*)
687 : unparsable : unparsable : 0.054040766 (s) : (?<![a-zA-Z0-9_])(?<![a-zA-Z0-9_\\-\\.])([a-zA-Z0-9_\\-\\.]{1,63})(?![a-zA-Z0-9_\\-\\.])(?<![
688 : failed : failed : 0.157750923 (s) : #!/usr/bin/perl
689 : failed : failed : 7.417607318 (s) : (?=^.{63}$)
690 : failed : failed : 0.173076661 (s) : /^[a-zA-Z0-9-_.]{63}[a-zA-Z0-9-_.]{0,254}$/;
691 : failed : error init : 0.111864266 (s) : (?<!')
692 : failed : failed : 16.173055502 (s) : [^\\'\\'\\'](/s)
693 : failed : failed : 0.601640044 (s) : ^[a-zA-Z0-9._%+-]+$
694 : failed : failed : 10.991272733 (s) : ((?!(?<=\\')[^\u2019\u2019]*?|\u2019\u2019[^\u2019\u2019]*?)(?=\u2019\\'[^\u2019\u2019]*?|\u2019\u2019[^\u2019\u2019]*?$))
695 : failed : failed : 42.416101864 (s) : (?<!\\')+'(?!\\')
696 : failed : failed : 1.280270741 (s) : .*
697 : failed : failed : 6.892092585 (s) : r'.*?'
698 : failed : failed : 1.309101439 (s) : \\w+
699 : failed : failed : 5.319556472 (s) : \\b[^\\'\\\"].*
700 : failed : failed : 0.157491897 (s) : [^']*
701 : failed : failed : 30.827675399 (s) : \\b1|2|3|4|5|6|7|8|9\\b
702 : unparsable : unparsable : 0.049317761 (s) : ^[0-9a-fA-F]{1,
703 : unparsable : unparsable : 0.094401075 (s) : \"^([0-9]|1[0-9]|2[0-4][0-9]|25[0-5])\\\\.(0?[1-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.(0?[1-9]|1[0-9]{2}|
704 : failed : failed : 1.077052687 (s) : [a-zA-Z0-9-_]{2,}
705 : failed : failed : 5.642236319 (s) : 0\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.0
706 : failed : failed : 45.396352 (s) : 1|2|3|4|5|6|7|8|9|0-9.
707 : failed : failed : 1.720834445 (s) : [0-9]\\d{1,2}[.]\\d{1,2}[.]\\d{1,2}
708 : failed : failed : 0.148247086 (s) : ^(10)?1?[0-9]{3}[0-9]$
709 : failed : failed : 17.306184987 (s) : [0-9]{0,3}\\.?[0-9]{1,3}\\.?[0-9]{1,3}\\.?[0-9]{1,3}$
710 : failed : failed : 0.551029541 (s) : ^\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}$
711 : failed : failed : 0.577662675 (s) : (^-?\\d+\\.\\d*$)
712 : failed : failed : 0.234179401 (s) : ^[0-9](\\.[0-9]{1,11})?$
713 : failed : failed : 0.659725565 (s) : [0-9.]{1,}[0-9]+
714 : failed : failed : 2.597921689 (s) : \\d+\\.\\d+
715 : failed : failed : 3.272403847 (s) : [0-9]?\\.?[0-9]?
716 : unparsable : unparsable : 0.065324175 (s) : ?(\\d+?\\.\\d*)
717 : failed : failed : 1.322319541 (s) : \\d
718 : failed : failed : 1.194532508 (s) : \\d*\\.\\d*
719 : failed : failed : 0.370436355 (s) : ^\\d+(\\.\\d+)?$
720 : failed : failed : 0.211601362 (s) : ^[+-]?\\d+\\.\\d*$
721 : failed : failed : 1.316393584 (s) : (?<month>\\d{1,2})/(?<day>\\d{1,2})/(?<year>\\d{4})
722 : failed : failed : 2.882443802 (s) : /^
723 : failed : error init : 0.118973358 (s) : ^
724 : unparsable : unparsable : 0.056968047 (s) : ^(0[1-9]|[12][0-9]|3[01])[0-2][0-9]?[0-
725 : unparsable : unparsable : 0.088784567 (s) : D\\/MM\\/YYYY[/=\\d{2,3
726 : unparsable : unparsable : 0.084632251 (s) : date-time [ \\d d/m/y \
727 : unparsable : unparsable : 0.092279902 (s) : \\d{4}-\\d{2}-\\d{2}(?=\\d{2}
728 : unparsable : unparsable : 0.080924318 (s) : (?=[^\\s\\d\\-]+[0-9]{2}$)(\\d{1,2})([^\\d\\s\\-\\d
729 : unparsable : unparsable : 0.080857884 (s) : // regex for dd-mm-yyyy var re = new RegExp(/(0?[1-9])-(0?[1-9])-(0?[4
730 : failed : failed : 15.763625328 (s) : /^0?[1-9]|1?[0-2]?[0-9]|3[01]$/ No
731 : failed : failed : 8.621973251 (s) : (?<!\\.)[1-9]\\d*(\\.\\d{3})?(?!\\.)
732 : unparsable : unparsable : 0.090180842 (s) : ((\\d{1,3}(\\.\\d{0,2})?(\\.\\d{0,2})?(\\.\\d{0,2})?)|(\\.\\d{1,2})(\\.\\d{0,2})?
733 : failed : failed : 0.178794138 (s) : ^(?=.{0,5}$)[0-9.]{3,5}$
734 : failed : failed : 1.361138313 (s) : \\b
735 : failed : failed : 0.12802605 (s) : ^\\d+
736 : failed : failed : 1.030501276 (s) : \\d+\\.\\d{3}|\\d{3}\\.\\d{1,5}|\\d{1,5}\\.\\d{3}
737 : failed : failed : 2.931618906 (s) : \\d{1,5}(\\.\\d{1,3})
738 : failed : failed : 9.427751141 (s) : \\d{1,2}\\.\\d{1,2}\\.\\d{1,2}\\d{1,3}
739 : failed : failed : 0.156428046 (s) : ^[\\d]{0,5}([\\d]{3}|\\.){0,3}[\\d]{0,5}
740 failed : unparsable : 0 (s) : Please check your regex.
741 : failed : failed : 4.362759504 (s) : [^,]+
742 : unparsable : unparsable : 0.079680669 (s) : {{@name_regex}}
743 : failed : pumping failed : 62.906179054 (s) : [ \\t]*[\\w\\d]*[\\s]*[\\w\\-\\s]+
744 : unparsable : unparsable : 0.063025521 (s) : {{ 'Hello John'|RegExp('@'); }}
745 failed : unparsable : 0 (s) : Please check your regex.
746 : failed : failed : 0.209318678 (s) : $name=\"John\";$regex=\"(^$name$) or $name$\";
747 failed : unparsable : 0 (s) : Please check your regex.
748 : failed : failed : 8.544196887 (s) : @@([A-Z][a-z]+)@@
749 : failed : error init : 0.122891796 (s) : (?i)
750 : failed : failed : 0.777548699 (s) : ^.*I will receive an email from @@Name@@ within the next two days.|$
751 : failed : failed : 1.296811956 (s) : This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answ
752 : failed : failed : 0.655193217 (s) : This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answ
753 : failed : failed : 1.359463726 (s) : This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answ
754 : failed : failed : 0.746842339 (s) : This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answ
755 : failed : failed : 0.566060258 (s) : This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answ
756 : failed : failed : 1.383267932 (s) : This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answ
757 : failed : failed : 1.474457483 (s) : This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answ
758 : failed : failed : 1.551973288 (s) : This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answ
759 : failed : failed : 1.488729679 (s) : This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answ
760 : failed : failed : 1.37434348 (s) : This expression was developed to match the Title cased words within a Camel cased variable name. So it will match 'First' and 'Name' within'strFirstName'.Generate a RegEx for this description. Answ
761 : failed : failed : 3.495767886 (s) : \\d+(\\.\\d+)?
762 : failed : failed : 2.474552529 (s) : \\d+\\.\\d+
763 : failed : pumping failed : 43.290000053 (s) : (0|[1-9][0-9]*)\\.[0-9]*
764 : failed : failed : 3.766428602 (s) : \\d+(\\.\\d+)?
765 : failed : failed : 0.511640863 (s) : ^\\d+\\.\\d{1,2}$
766 : failed : failed : 0.199688365 (s) : x^1-5
767 : failed : failed : 0.132599364 (s) : ^[+-]?
768 : failed : failed : 0.174527188 (s) : $-?[0-9]*[e][+-]?[0-9]*
769 : failed : failed : 0.406092575 (s) : ^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)$
770 : failed : failed : 1.925565873 (s) : \\d*\\.?\\d*
771 failed : unparsable : 0 (s) : Please check your regex.
772 failed : unparsable : 0 (s) : Please check your regex.
773 failed : unparsable : 0 (s) : Please check your regex.
774 failed : unparsable : 0 (s) : Please check your regex.
775 failed : unparsable : 0 (s) : Please check your regex.
776 failed : unparsable : 0 (s) : Please check your regex.
777 : unparsable : unparsable : 0.076641068 (s) : [
778 : failed : failed : 0.826936703 (s) : r
779 failed : unparsable : 0 (s) : Please check your regex.
780 : failed : failed : 0.880479717 (s) : $
781 failed : unparsable : 0 (s) : Please check your regex.
782 failed : unparsable : 0 (s) : Please check your regex.
783 : failed : error init : 0.099493451 (s) : ^
784 : unparsable : unparsable : 0.095140299 (s) : ^.*?(?=^\\d{1,3}\\.)(?=\\d{1,3}\\.\\d{1,3
785 : failed : failed : 4.134988913 (s) : [0-9]{3}\\.[0-9]{3}\\.[0-9]{3}\\.[0-9]{3}
786 : unparsable : unparsable : 0.083642018 (s) : \\b((10|100|1000|10000|100000|1000000|10000000|100000000|100000000000|1000000000000)\\b
787 : failed : error init : 0.108266158 (s) : ^
788 : failed : error init : 0.085432651 (s) : ^
789 : unparsable : unparsable : 0.076358057 (s) : (?<ip_number>\\\\d+\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+)$
790 : unparsable : unparsable : 0.085259245 (s) : [0-9]{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1
791 : failed : failed : 0.202451929 (s) : Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywor
792 : failed : failed : 0.280867549 (s) : Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywor
793 : failed : failed : 0.24058138 (s) : Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywor
794 : failed : failed : 0.26742093 (s) : Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywor
795 : failed : failed : 0.248945984 (s) : Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywor
796 : failed : failed : 0.230855077 (s) : Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywor
797 : failed : failed : 0.250218166 (s) : Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywor
798 : failed : failed : 0.304377344 (s) : Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywor
799 : failed : failed : 0.308753408 (s) : Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywor
800 : failed : failed : 0.361763805 (s) : Many currency expresssions allow leading zeros, thus $01.40 passes thru them. This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and.0 Keywor
801 : failed : failed : 0.163545985 (s) : dd-mm-yyyy
802 : failed : failed : 0.31217722 (s) : (DD-MM-YYYY)[-/](0[1-9])[-/](0[1-9])[-/]([0123][0-9])
803 : failed : failed : 0.729030024 (s) : (\\d{2})-(\\d{2})-(\\d{4})
804 : failed : failed : 0.496859964 (s) : [1-2][0-9][0-9]
805 : failed : failed : 13.669646316 (s) : [0-9]{2}-[0-9]{2}-[0-9]{4}
806 : failed : failed : 0.40266733 (s) : ^(0[1-9]|1[012])\\/(0[1-9]|1[012])\\/(19|20)(0[1-9]|[12][0-9]|3[01])$
807 : failed : failed : 0.170152195 (s) : var reg = new RegExp(\"^(19|20)\\d{2}-\\d{2}-\\d{4}$\");
808 : failed : failed : 0.423834147 (s) : ^[0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]$
809 : failed : failed : 0.792525063 (s) : ^[1-9][0-9]|1[012]|2[0-8]
810 : failed : failed : 0.645648524 (s) : \\w+-\\d\\d-\\d\\d
811 : failed : pumping failed : 98.995071677 (s) : .*\\d{1,2}(\\.\\d{1,2})?|[a-zA-Z0-9 ]{6,}
812 : failed : failed : 0.27064111 (s) : ^\\d*\\.-?\\d{1,15}$
813 : unparsable : unparsable : 0.070342062 (s) : [^0-9.
814 : unparsable : unparsable : 0.108525284 (s) : (?<=[a-z][a-z0-9_]*) (?=[a-z][a-z0-9_]*[a-z0-9](?=[a-z0-9_]*[a-z0-9]))
815 : failed : failed : 0.725035303 (s) : \\d{3,10}
816 : failed : failed : 2.557698818 (s) : (?![^a-zA-Z0-9])[0-9]{2,20}
817 : failed : failed : 0.197682498 (s) : ^([0-9]|[1-9][0-9]|1[0-9]2)$
818 : failed : failed : 3.861746674 (s) : (\\d+\\.\\d+)
819 : failed : failed : 1.799360542 (s) : ^([0-9]+[.][0-9]+)*$
820 : failed : failed : 0.181886819 (s) : [\\d]{1,12}(\\.\\d{1,2})?
821 failed : unparsable : 0 (s) : Please check your regex.
822 : failed : error init : 0.109615895 (s) : ^
823 failed : unparsable : 0 (s) : Please check your regex.
824 : unparsable : unparsable : 0.084415085 (s) : [
825 failed : unparsable : 0 (s) : Please check your regex.
826 : unparsable : unparsable : 0.051216508 (s) : (
827 failed : unparsable : 0 (s) : Please check your regex.
828 : unparsable : unparsable : 0.061309968 (s) : (
829 failed : unparsable : 0 (s) : Please check your regex.
830 : unparsable : unparsable : 0.069714096 (s) : (
831 : failed : failed : 1.015040213 (s) : /<img\\s+\\w+\\s*/>
832 : unparsable : unparsable : 0.088385109 (s) : /<img\\s*\\(\\s*(.+?)
833 : unparsable : unparsable : 0.061704407 (s) : <img(?P<image_id>\\d+)\\s(?P<image_name>\\w+)\\s[^>]*
834 : failed : failed : 0.193697927 (s) : <i id=\"image-tag\">&lt;img\\1&gt;</i>
835 : failed : failed : 0.688815578 (s) : img\\1 | \\&gt;
836 : failed : failed : 0.224166291 (s) : <img\\1,<img\\2><img\\3>
837 : failed : failed : 0.217141336 (s) : <img src=\"&lt;img\\1 /&gt;\" />
838 : failed : failed : 0.214921019 (s) : &lt;img\\1\\>/html
839 : failed : failed : 76.424568384 (s) : &lt;img[^>]* \\/ &gt;
840 failed : unparsable : 0 (s) : Please check your regex.
841 : failed : failed : 0.154973592 (s) : ^[1-9]\\d{0,2}$
842 : failed : failed : 2.038924567 (s) : [A-Z][a-z]{0,9}[A-Z][a-z]{0,9}
843 : failed : failed : 0.884538346 (s) : [0]\\d[1-3]
844 : failed : failed : 0.126285521 (s) : [0-1]?[0-9]?
845 : failed : failed : 3.866339173 (s) : (0|[1-9])(0|[1-9])(0|[1-9])(0|[1-9])(0|[1-9])(0|[1-9])(0|[1-9])
846 : failed : failed : 219.441769682 (s) : 0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31
847 : unparsable : unparsable : 0.07977184 (s) : 0?[1-9]|(1-2)[0-9]|(2[0-9]-0[0-9])|(3[01])|(4[0-9]|[0-9])|(5[0-2])|(6[0-9]|[0-9])|(7[0-9]|[0-9])|(8[0-9]|[0-9]))
848 : failed : failed : 1.327297583 (s) : ([01][0-9]|2[0-3])[0-9]|30
849 : failed : failed : 15.858765206 (s) : 0?[1-9]|[12][0-9]|3[01]|40
850 : failed : failed : 2.196820792 (s) : \\b0?[1-9]|1[0-2]|2[0-3]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-8]
851 : failed : failed : 157.73603374 (s) : <!--\\s*(.*?)-->[\\s\\S]*<!--\\s*
852 : failed : failed : 77.51665551 (s) : var regex = /<script.*?>|<script\\s*/>/g
853 : failed : pumping failed : 166.641021038 (s) : recomment = /<!--.*?-->\\s*\\n(.*?)\\n(.*?)\\n\\s*/gi
854 : unparsable : unparsable : 0.085165611 (s) : var regex = new RegExp('^
855 : failed : failed : 10.870321171 (s) : \\b(#[^>]*)\\b
856 : failed : failed : 92.319344917 (s) : r\"<!--.*? -->\"
857 : unparsable : unparsable : 0.079148984 (s) : *(.*?)\\]\\s*\\/?$
858 : failed : failed : 0.248886953 (s) : // a regular expression that will remove all comments and javascript from a stringvar regex = /\\n[^\\n]*?\\n/g;
859 : failed : failed : 6.040934376 (s) : \\s*#\\s*(\\S+)\\s*|\\/\\s*#\\s*(\\S+)\\s*
860 : failed : failed : 86.543901326 (s) : <title>(.*?)<\\/title>
861 : failed : failed : 10.168711405 (s) : (?<=\\d{8})-?\\d{4}-?\\d{4}-?\\d{4}(?=\\d{12})
862 : failed : failed : 0.6900015 (s) : [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
863 : failed : failed : 9.217380464 (s) : [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
864 : failed : failed : 0.732805453 (s) : (?<!^)\\d{8}\\d{4}\\d{4}\\d{4}(?!$)
865 : failed : failed : 0.194386727 (s) : [A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[0-9A-Fa-f]{12}
866 : unparsable : unparsable : 0.101893014 (s) : [[(((-[[([([[('-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][-][
867 : failed : failed : 24.108965468 (s) : [A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}
868 : unparsable : unparsable : 0.081481451 (s) : [
869 : failed : failed : 0.226192365 (s) : ^[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}[A-Fa-f0-9]{12}$
870 : failed : failed : 2.568553865 (s) : (8,4,4,4)(12)
871 : failed : pumping failed : 92.744166072 (s) : .*(?<number>[0-9]{1,3})(?<unit>[a-zA-Z ]*)
872 : failed : failed : 3.278973018 (s) : r\"(\\d+)(cm|in)(\\s|$)\"
873 : failed : failed : 0.898754879 (s) : r'(\\d+) inches|\\d{1} feet\\b'
874 : failed : failed : 2.657795148 (s) : r\"
875 : failed : failed : 0.14110454 (s) : ^\\d{1,2}\\/\\d{1,2}$
876 : failed : failed : 0.189043802 (s) : ^\\\\d+
877 : failed : failed : 1.027239417 (s) : r'^(\\d{1,3})
878 : unparsable : unparsable : 0.061751194 (s) : \\b(?P<length>\\d+)(?P<inches>\\d+)
879 : failed : failed : 0.26602195 (s) : \\d{2}[,\\\\.]\\d{2}[,\\\\.]\\d{2}
880 failed : unparsable : 0 (s) : Please check your regex.
881 : failed : failed : 1.68934545 (s) : \\w+
882 : failed : failed : 5.704200481 (s) : ^(/w|/W|[^&lt;&gt;])+$
883 : failed : failed : 0.158087944 (s) : ^(/w|/W|[^&lt;&gt;]+)$
884 : failed : failed : 3.906589827 (s) : /^
885 : failed : failed : 7.747311469 (s) : (?<!\\S)&lt;(?!\\S)
886 : failed : pumping failed : 14.434326821 (s) : ^$|^(/w|/W|[^<>&])+$
887 : failed : failed : 1.345951173 (s) : ^(/(w+)/|(\\w+)(\\/w+)|(\\w+.*\\/w+))$
888 : failed : failed : 0.240402645 (s) : [^&lt;&gt;]*[&lt;]?[&gt;]
889 : failed : failed : 0.196112448 (s) : (/w|/W|[^&lt;&gt;])+
890 : failed : failed : 4.528211478 (s) : ^[^&lt;&gt;]+$
891 : failed : failed : 0.87375307 (s) : \\d{1,2}/\\d{4}
892 : failed : failed : 1.210482186 (s) : \\d{2}[\\d\\-]?\\d{4}
893 : failed : failed : 4.765470747 (s) : \\d{1,2}|\\d{4}
894 : failed : failed : 0.645878715 (s) : ^(0|1[1-9])\\d{2}
895 : failed : failed : 0.78819231 (s) : [0-9]{2}/{4}/[0-9]{4}
896 : failed : failed : 0.942077453 (s) : \\d{1,2}/\\d{4}
897 : failed : failed : 0.598755623 (s) : ^\\d{2}
898 : failed : failed : 0.409944708 (s) : \\d{1,2}/\\d{4} Regex for Date Form
899 : failed : failed : 103.024768105 (s) : (0|1|2|3|4|5|6|7|8|9|[1-9][0-9])/(\\d{4})
900 : failed : failed : 0.727526418 (s) : \\d{2}\\/\\d{2}\\/\\d{4}
901 : failed : failed : 2.353225063 (s) : /^
902 : unparsable : unparsable : 0.050550601 (s) : ^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])[A-9][0-9][A-9][0-9][A-9][0-9]$
903 : failed : failed : 0.184781921 (s) : NINO (A-D)
904 : failed : failed : 0.120142627 (s) : ^[A-D][0-9]{1,2}$
905 failed : unparsable : 0 (s) : Please check your regex.
906 : failed : failed : 1.131362116 (s) : \\d{1,4}\\-?\\d{2}
907 : failed : failed : 0.513687346 (s) : (A-M, F, and M are permitted as the last letter, and all letters should be in uppercase.).
908 : failed : failed : 0.147626384 (s) : ^(A-D)(?!F$)(?!M$)
909 : failed : failed : 0.184275873 (s) : ^[A-D][0-9][0-9]$
910 : failed : failed : 0.4298434 (s) : (^[A-D]{2}[0-9]$|^[F]{2}[1-9]$|^[M]{2}[0-9]$)
911 : unparsable : unparsable : 0.104965407 (s) : \\d{4}\\/\\d{2}\\/\\d{2} \\d{
912 : unparsable : unparsable : 0.108125755 (s) : _________________________ |  &lt;&gt;/  &lt;&gt; |  (            &lt
913 : unparsable : unparsable : 0.086989165 (s) : \\d{4}/\\d{2}/\\d{2} \\d{
914 : failed : failed : 0.386183744 (s) : /Da
915 : failed : failed : 2.167402734 (s) : \\b
916 : failed : failed : 1.661316002 (s) : (?<month>[0-3])(?<day>[0-9])[0-9]/
917 : unparsable : unparsable : 0.098276141 (s) : ^[0-9][0-9][0-9][0-9]/[0-9][0-9][
918 : unparsable : unparsable : 0.10176833 (s) : \\d\\d\\/\\d\\d\\/\\d\\d\\d\\d(\\d\\
919 : unparsable : unparsable : 0.095223664 (s) : &quot;(0[1-9]|[12][1-9]|3[01])/(0[1
920 : unparsable : unparsable : 0.053238404 (s) : /^[\\d]{2}\\/[\\d]{2}\\/\\d{4}$|^[
921 failed : unparsable : 0 (s) : Please check your regex.
922 : failed : failed : 2.375954606 (s) : \\d{1,2}-\\d{2}-\\d{4} or  \\d{1,2}-\\d{2}-\\d{4}- | \\d{1,2}/\\d{1,2}/\\d{4}
923 : failed : failed : 0.163854552 (s) : ^(19|20|21|22|23|24|25|26|27|28|29|30)\\d{2}$
924 : failed : failed : 0.155243979 (s) : MMM/DD/YYYY, MMM/DD/YY or MM/DD/YY
925 : failed : failed : 0.27962379 (s) : ^(0[1-9]|1[012])/(0[1-9]|[12]\\d|3[01])/(0[1-9]|1[012])$
926 : failed : failed : 0.243076923 (s) : [0-9]?[0-9][0-9]?[0-9]/[0-9]/[0-9]|[0-9]/[0-9]/[0-9]|1/1/[0-9]|
927 : failed : failed : 0.242927152 (s) : (\\d{1,2}/\\d{1,2}/\\d{4})It should match any date which is in this ran
928 : failed : failed : 1.108633064 (s) : (0[1-9]|1[012])/([0-3]?[0-9])
929 : failed : failed : 0.591310381 (s) : ^(19|20)\\d{1,2}(0|1)?$
930 : unparsable : unparsable : 0.093270607 (s) : ^(\\d{2}/\\d{2}/\\d{4})|(\\d{2}/\\d{2}/\\d{2})([\\d\\-/]{2})$
931 : failed : failed : 1.584225523 (s) : [0]?[1-9][0-9]|1[0-2]
932 : unparsable : unparsable : 0.082406704 (s) : (0?[1-9]|[1-2][0-9]|3[0-1]|4[0-2]
933 : failed : failed : 0.139406151 (s) : ([0-9]{0,2})
934 : unparsable : unparsable : 0.059960491 (s) : var regex = /^[1-9]?[0-9]?[0-9]{0,
935 : failed : failed : 0.155073649 (s) : ^(0[1-9]|[1-9])[0-5][0-9]?[0-9]$
936 : unparsable : unparsable : 0.075332116 (s) : (^[0-9]{1,
937 : unparsable : unparsable : 0.071784873 (s) : #(?i)(?=.*
938 : failed : failed : 0.184308183 (s) : ^(0\\d|1[0-2])$In this example, we are validating an hour range of 01 to 09 inclusive. We do not accept valid hours of 10.
939 : unparsable : unparsable : 0.079899639 (s) : [1-9][0-9]|1[0-2]|[01][0-9]|[3][0-9]|[04][0-9]|[05][0-9]|    [06][0-9]|[07][0-9]|[08][0-
940 : failed : failed : 0.816977944 (s) : \"^((0?[1-9])|1[0-2])([0-5][0-9])$\"
941 : failed : pumping failed : 156.968977359 (s) : (.*) (am|pm)
942 : unparsable : unparsable : 0.062125255 (s) : (\\d{
943 : unparsable : unparsable : 0.050512659 (s) : ^([01][0-9]|2[0-3
944 : failed : failed : 1.557735818 (s) : \\s(1[012]|3[01]) \\d{1,2}(am|pm)
945 : failed : failed : 2.000235328 (s) : /^
946 : failed : failed : 1.921982102 (s) : (\\d{1,2}[a-z])?\\d{1,2}[a-z]?(am|pm)?
947 : unparsable : unparsable : 0.085069259 (s) : \\d{1,
948 : failed : failed : 2.320489533 (s) : \\d{2}
949 : unparsable : unparsable : 0.069823651 (s) : \\d{1,
950 : unparsable : unparsable : 0.077157014 (s) : /[1-9]?[0-9]|1[012]|2[012]|3[012]|4[012]|5[012]|6[012]|7[012]|8[012]|9[012]|0[0-9]|[1-9]?[0-9]|1[0-9]|2[
951 : failed : failed : 1.126103168 (s) : (?=\\S)\\b[A-Z0-9\\s]+\\z
952 : failed : failed : 1.234672735 (s) : \\b[A-Z][a-z]{0,2}\\s[A-Z][a-z]{0,2}\\b
953 : failed : failed : 10.856180753 (s) : ^[a-zA-Z]* [a-zA-Z] [a-zA-Z]*$
954 : failed : pumping failed : 80.918899048 (s) : .*[a-z]\\s?+[a-z]
955 : failed : failed : 0.645049462 (s) : ^[A-Za-z]+ [A-Za-z]+ [A-Za-z]+$
956 : failed : pumping failed : 149.167004704 (s) : [A-Z]*[a-z]
957 : failed : failed : 3.688841102 (s) : [A-Z][A-Za-z]*
958 : success : cross : 6.743978832 (s) : ^([a-z]|[A-Z][a-z]|[A-Z][a-z]|[A-Z]\\.){2,}[^a-z\\.]*$
959 : failed : failed : 25.165925777 (s) : ^[A-Za-z][A-Za-z0-9 ]+?[A-Za-z]$
960 : failed : failed : 5.792283484 (s) : [A-Z]{1}[a-z]+
961 : unparsable : unparsable : 0.093952695 (s) : ^([0-1][0-
962 : unparsable : unparsable : 0.064443777 (s) : (^[0-2][0-9][0-9]|[3][0-1][0-9]|[0][1-2][0-9][0-9]|[2][0-9][0-9]|[0][0][1-9][0-9]|[1][1-9]\\d|[1][0-9]\\d\\d|[
963 : unparsable : unparsable : 0.107287114 (s) : (Time|Hour
964 : unparsable : unparsable : 0.106254391 (s) : \\d{1,
965 : unparsable : unparsable : 0.06542807 (s) : ^\\d{
966 : unparsable : unparsable : 0.068515672 (s) : (?<hrs>\\d{1,2})(?<m
967 : unparsable : unparsable : 0.059688882 (s) : (?P<hour>\\d{1,2
968 : unparsable : unparsable : 0.076985532 (s) : \\d{
969 : failed : failed : 0.615994454 (s) : (\\d{1,2})
970 : unparsable : unparsable : 0.065837126 (s) : ^[0-9][0-
971 : unparsable : unparsable : 0.085364363 (s) : Time = [0-9]{
972 : failed : failed : 0.761610172 (s) : r\"^([0-9]{1,2})\\s([0-9]{1,2})\\s([0-9]{1,2})$\"
973 : unparsable : unparsable : 0.062732612 (s) : [0-9]{1,
974 : unparsable : unparsable : 0.115405067 (s) : ^time    ([0-1]?\\d|2[0-3
975 : unparsable : unparsable : 0.116398226 (s) : (?P<minutes>\\S+)\\s*\\.(?P<seconds>\\d+)
976 : unparsable : unparsable : 0.130111755 (s) : (?<![\\d])(?<![\\w.])(?<![!-])[\\d\\w\\-\\.](?<![!-])(?<![!\\d\\w]) (?<![!-])[\\d\\w\\-\\.](?<![!-])[\\d\\w\\-\\.](?<
977 failed : unparsable : 0 (s) : Please check your regex.
978 : failed : error init : 0.112846915 (s) : ^
979 : unparsable : unparsable : 0.062128151 (s) : [0-9]{1,
980 : unparsable : unparsable : 0.079751282 (s) : $str = \"1 week 0 days 0 hours 15 minutes\"; $str = preg_replace('/(?)
981 : failed : failed : 7.572387444 (s) : 0[1-9][0-9]*
982 : failed : pumping failed : 4.98701847 (s) : (?<![0-9]*\\.[0-9])[+-]+ \\. [0-9]*[0-9]{1,2}(?![0-9]*\\.[0-9])?
983 : failed : pumping failed : 20.899372532 (s) : ^[1-9][0-9]*(-?[0-9]+)[1-9]?[0-9]$
984 : failed : failed : 0.284160987 (s) : ^\\d{1,6}(\\.\\d{3})?$
985 : failed : failed : 0.900024376 (s) : ^\\d+\\.\\d*(\\.\\d+)?$
986 : failed : failed : 0.715852698 (s) : \\b\\d{1,3}\\.
987 : failed : failed : 1.082136386 (s) : \\d+(\\.\\d*)?(?!0)
988 : failed : failed : 0.165370541 (s) : ^[+-]?[0-9]
989 : failed : failed : 0.140368323 (s) : ^\\d+
990 : failed : failed : 0.587633085 (s) : (\\d\\d?)
991 : failed : failed : 1.007974723 (s) : \\b\\d{1,3}
992 : failed : failed : 0.170408144 (s) : ^\\d+(,\\d*)?$
993 : failed : failed : 0.279501511 (s) : [0-9]*[.,]?[0-9]+I know that I am making it too complex. But I can't figure out how to make this work for numbers with 1 or more digits and also decimals with a single decimal point or none at all.
994 : failed : failed : 1.351572465 (s) : /\\b^[0-9,]*$/.
995 : failed : failed : 0.166424174 (s) : [,+\\-]?[0-9]*[.0-9]?[,+\\-]?[0-9]*
996 : failed : failed : 0.151637585 (s) : [0-9]{0,3}(,0[0-9]{3})?
997 : failed : failed : 0.243064792 (s) : ^\\d+[,.]\\d+$
998 : failed : failed : 5.593685711 (s) : (?<=^|,)(?=\\d\\.)(?=\\d)
999 : failed : failed : 0.215009406 (s) : [0-9]+
1000 : failed : failed : 0.702060674 (s) : ^\\d+(,\\d{3})?\\.\\d+$
1001 : failed : failed : 0.512876777 (s) : s\\d+
1002 : failed : failed : 1.180862861 (s) : \\d{2}-\\d{3}
1003 : failed : failed : 19.368578512 (s) : [0-9]{1,2}\\.[0-9]{1,2}\\.[0-9]{1,2}\\.[0-9]{1,2}$
1004 : failed : failed : 1.720651533 (s) : \\b\\d\\s*-\\s*\\d\\w*-\\s*\\d\\w*-\\s*\\d\\w*-\\s*\\d\\w*
1005 : failed : failed : 0.36528763 (s) : \\d\\s+\\d\\s+\\d\\s+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+No
1006 : failed : failed : 0.824368929 (s) : \\b(?<!e&#227;)\\s+(?!\\*)\\d+(?!e&#227;);
1007 : failed : failed : 2.24354611 (s) : s
1008 : failed : failed : 4.854312308 (s) : (?<Number>([0-9]{4}{1}|[0-9]{2}))
1009 : failed : failed : 9.561018168 (s) : ([0-9][0-9]|1[0-9]|2[0-4][0-9])/([0-9][0-9]|1[0-9]|2[0-4][0-9])/([0-9][0-9]|1[0-9]|2[0-4][0-9])
1010 : failed : failed : 11.218124827 (s) : ^[a-zA-Z0-9_]*[a-zA-Z]$
1011 failed : unparsable : 0 (s) : Please check your regex.
1012 failed : unparsable : 0 (s) : Please check your regex.
1013 failed : unparsable : 0 (s) : Please check your regex.
1014 failed : unparsable : 0 (s) : Please check your regex.
1015 failed : unparsable : 0 (s) : Please check your regex.
1016 : failed : error init : 0.107405599 (s) : ^
1017 : unparsable : unparsable : 0.083150589 (s) : [
1018 : unparsable : unparsable : 0.095280142 (s) : [
1019 : failed : failed : 3.310852465 (s) : /
1020 failed : unparsable : 0 (s) : Please check your regex.
1021 : unparsable : unparsable : 0.058025549 (s) : ^([0-1]?[0-9]|[2][0-3
1022 failed : unparsable : 0 (s) : Please check your regex.
1023 : unparsable : unparsable : 0.08537848 (s) : ^([1-2]?\\d|3[0-1
1024 : unparsable : unparsable : 0.063685337 (s) : ^([01]?[0-9]|[2][0-3
1025 : unparsable : unparsable : 0.063087759 (s) : ^([0-1]?[0-9]|[2][0-3
1026 : unparsable : unparsable : 0.080213929 (s) : /^([0-1]?[0-9]|[2][0-3
1027 : unparsable : unparsable : 0.090427475 (s) : /^([0-1]?[0-9]|[2][0-3
1028 : unparsable : unparsable : 0.071494822 (s) : (?i)^[0-1]?[0-9]|[2][0-
1029 : unparsable : unparsable : 0.069152285 (s) : (0|1)??[0-9]{
1030 : unparsable : unparsable : 0.071906543 (s) : [0-2
1031 : unparsable : unparsable : 0.061582851 (s) : (?<=MM/)[1-9][0-9][0-9]{2}(-
1032 : failed : failed : 4.050959845 (s) : (19|[0-9]{3})([0-9]{2})?
1033 : failed : failed : 0.40137082 (s) : (^[0-9]{2}\\.[0-9]{4}\\-[0-9]{4}\\-[0-9]{2}\\.[0-9]{4}$|^[0-9]{4}\\-[0-9]{2}\\-[0-9]{4}\\-[0-9]{2}\\.[0-9]{4}$)
1034 : failed : failed : 0.184301584 (s) : ^\\d{4}-\\d{2}-\\d{2}$
1035 : unparsable : unparsable : 0.095532525 (s) : (?P<MM>\\d\\
1036 : failed : failed : 13.466215798 (s) : [YY]{2,}[0-9][0-9]{3}
1037 : failed : failed : 1.425822305 (s) : (\\d{4}-\\d{2}-\\d{2})T[^ ]+
1038 : failed : failed : 1.679793162 (s) : (MM/YY)\\/[0-9]{4}
1039 : unparsable : unparsable : 0.084182711 (s) : \\d{4}-\\d{2}-\\d{2} \\d{
1040 : failed : failed : 0.214393414 (s) : ```regex = r'^
1041 : unparsable : unparsable : 0.081099898 (s) : ^(?!.
1042 : unparsable : unparsable : 0.061997337 (s) : ^(^[0-9]{1,2}\\s*
1043 failed : unparsable : 0 (s) : Please check your regex.
1044 : unparsable : unparsable : 0.095550739 (s) : ^(0|[1-9]\\d|1\\d\\d|2
1045 : unparsable : unparsable : 0.103378698 (s) : ([0-9]{1,
1046 : unparsable : unparsable : 0.108435678 (s) : (?<=
1047 : unparsable : unparsable : 0.055655792 (s) : (
1048 : unparsable : unparsable : 0.065258784 (s) : ^([0-9]{1,
1049 : unparsable : unparsable : 0.055161516 (s) : ^(?=
1050 : unparsable : unparsable : 0.091224457 (s) : ^      # start of the line (0*     # zero or more hour  
1051 : failed : failed : 4.8236396 (s) : Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answ
1052 : failed : failed : 4.048245943 (s) : Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answ
1053 : failed : failed : 3.191506016 (s) : Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answ
1054 : failed : failed : 3.067556808 (s) : Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answ
1055 : failed : failed : 4.361842787 (s) : Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answ
1056 : failed : failed : 3.648241532 (s) : Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answ
1057 : failed : failed : 4.092870026 (s) : Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answ
1058 : failed : failed : 4.039795819 (s) : Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answ
1059 : failed : failed : 3.210437437 (s) : Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answ
1060 : failed : failed : 3.554569541 (s) : Expression to handle US currency entry in.NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.Generate a RegEx for this description. Answ
1061 : failed : failed : 1.591838167 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]{6}$
1062 : failed : failed : 0.163110472 (s) : [A-Za-z0-9]
1063 : failed : failed : 44.891871405 (s) : (?<=^|[^a-zA-Z0-9_])[a-zA-Z0-9_]{6,}(?=$|[^a-zA-Z0-9_])
1064 : failed : failed : 0.161356958 (s) : ^[0-9a-zA-Z]{6}$
1065 : failed : failed : 1.645757767 (s) : \\b[a-zA-Z\\d]{6}\\b
1066 : failed : failed : 0.303542446 (s) : ^(?=.*\\d)(?=.*[a-z])(?=.*[_$|%!@\\^])[0-9a-z_$!@\\^]{6}$
1067 : failed : failed : 6.234940993 (s) : ^[A-Za-z\\d]{6,}$ The first regular expression (^[A-Za-z\\d]{6,}) matches a six character string that consists of one upper case letter, one lower case letter, one digit and underscores.
1068 : failed : failed : 3.411833152 (s) : ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{6}$
1069 : failed : pumping failed : 21.986324181 (s) : (?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+-=*/])(?=.*[$])[a-zA-Z0-9!@#$%^&*()_+-=*/]{6}
1070 : failed : pumping failed : 15.423430652 (s) : (.*[A-Za-z0-9]){6}
1071 : unparsable : unparsable : 0.118206525 (s) : ^(\\(?[A-Z]{1}\\)?[0-9]{7}$|\\s+|[-\\s]|\\(?\\d{3}\\)?[0-9]{3}[-\\s]?[
1072 : unparsable : unparsable : 0.074606889 (s) : ^\\(?(\\d{3})\\)\\s?(\\d{3})-(\\d{3})$
1073 : failed : failed : 2.914410475 (s) : [^-\\s]+
1074 : failed : failed : 0.659723643 (s) : (\\d{1,3}) - Area Code
1075 : failed : failed : 2.199895539 (s) : [0-9]{1,3}[ -]?[0-9]{3}[ -]?[0-9]{4}
1076 failed : unparsable : 0 (s) : Please check your regex.
1077 : unparsable : unparsable : 0.090407287 (s) : ^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$
1078 : unparsable : unparsable : 0.083241399 (s) : (?P<area_code>\\()(?P<number>\\S{10})
1079 : failed : failed : 0.745095902 (s) : \\((\\d{3})\\)\\s+(\\d{4})
1080 : failed : failed : 66.411593493 (s) : [^\\(\\)]{5}[ -]\\d{3}[ -]\\d{3}[ -]\\d{4}
1081 : failed : failed : 0.499937626 (s) : /^\\w+\\s\\w+
1082 : failed : failed : 0.175573781 (s) : const name = \"Doe, John\";
1083 : failed : failed : 0.550051441 (s) : ^[A-Z][a-z]+[A-Z][a-z]*[A-Z]
1084 failed : unparsable : 0 (s) : Please check your regex.
1085 : failed : failed : 63.489283095 (s) : ^A.*A$|^A.*^B$|^B.*A$|^B.*^B$
1086 : failed : failed : 0.687607789 (s) : ^[A-Za-z ]+[A-Z][a-z ]+$
1087 : failed : failed : 1.146478653 (s) : ^\\w+\\s\\w+$
1088 : failed : failed : 0.25116826 (s) : var firstname = /^[A-Za-z ]*$/;var lastname = /^[A-Za-z ]*$/;var email = /^\\S+@\\S+\\.\\S+$/;
1089 : failed : failed : 0.167846741 (s) : ^[A-Z][a-z]*$
1090 : failed : failed : 0.323270168 (s) : const firstName = 'doe';const lastName = 'john';const capitalization = 'M';const allLetters = /[a-z]/gi;const firstAllLetters = /^[a-z]*$/i;const lastAllLetters = /$/i;
1091 : unparsable : unparsable : 0.092716221 (s) : ^(01|12|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31)\\/(01|12|02|03|04|05|06|07|08|09|10|11|12
1092 failed : unparsable : 0 (s) : Please check your regex.
1093 : failed : pumping failed : 71.544628921 (s) : (?!/[^/]*(\\d{4})/[^/]*(\\d{2})/[^/]*)[^/]*(\\d{2})/[^/]*\\d/\\d{2}/\\d{4}/\\d{2}
1094 : failed : failed : 1.479108719 (s) : \\d{2}/\\d{2}/\\d{4}
1095 : failed : failed : 8.355285224 (s) : [0-1]|[1-9]?\\/[0-3]?\\/[0-9]?|1[0-2]
1096 : unparsable : unparsable : 0.078054085 (s) : ((1[6-9])\\/((0[1-9])|(1[0-2]))\\/(0[1-9])\\/[1-9])|(((31)[0-3])\\/((0[1-9])|(1[0-2]))\\/((0[1-9])|(1[0-2]))\\.[0-9]{1,2}))
1097 : failed : failed : 7.936489495 (s) : ([0-9]{2})\\-(0?[1-9]|1[012])\\/(19|20)\\D
1098 : failed : failed : 0.411115959 (s) : -1\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0
1099 : unparsable : unparsable : 0.102743168 (s) : [17/11/1900 
1100 : failed : failed : 0.791393759 (s) : \\d{1,2}\\/
1101 : failed : failed : 11.772466612 (s) : [A-Z]{2}\\d{2}[\\s\\S]{2}\\d{2}[A-Z]{2}
1102 : failed : failed : 0.125350112 (s) : ^\\d{2}[ \\d]{1,2}$
1103 : failed : failed : 0.668339477 (s) : \\d{4}\\s\\d{2}\\s\\w{2}
1104 : failed : failed : 0.613459999 (s) : the code will be ([0-9]{4} [0-9]{2} ) A-Z
1105 : failed : failed : 0.782304088 (s) : \\b\\d{4}[\\s ]\\d{1,3}[a-z]\\b
1106 : failed : failed : 0.161415758 (s) : ^\\d{4}[ ]{1,2}[A-Z]{2}\\d{2}$
1107 : failed : failed : 0.491911146 (s) : (^[1-9]\\d[ 1-5] \\d{0,2}[a-zA-Z]$)
1108 : failed : failed : 0.669573117 (s) : \\d{4}\\s*\\d{2}\\s*\\w{2}
1109 : failed : failed : 0.836669884 (s) : \\d{1,3}\\s\\d{1,2}\\s\\w{2}\\2
1110 : failed : failed : 0.624227152 (s) : \\d{3}[ \\d]{2}[a-z]{2}
1111 : unparsable : unparsable : 0.057140111 (s) : ^([\\(]{1}[
1112 : unparsable : unparsable : 0.109370689 (s) : ^(([\\(]{1}[
1113 : unparsable : unparsable : 0.056623544 (s) : ^((\\(|\\)|[ \\-
1114 : unparsable : unparsable : 0.103818471 (s) : ^((\\(?| |-| |-
1115 : failed : error init : 0.148681542 (s) : ^
1116 : failed : error init : 0.090571405 (s) : ^
1117 : failed : failed : 0.176955718 (s) : ^\\(\\d{3}\\)\\s?
1118 : unparsable : unparsable : 0.05845327 (s) : ^(  
1119 : unparsable : unparsable : 0.077010851 (s) : ^([\\(]{1}[
1120 : failed : error init : 0.105577796 (s) : ^
1121 : failed : failed : 0.763931273 (s) : ^[0-9]{1,2}\\.[0-9]{1,2}$
1122 : failed : failed : 0.746103468 (s) : D.M.YYYY or D.MM.YYYY or DD.MM.YYYY or DD.M.YYYY
1123 : failed : failed : 1.212390591 (s) : D.M.YYYY-
1124 : failed : failed : 0.615229012 (s) : D.MM.YYYY or D.MM.YYYY or DD.MM.YYYY or DD.MM.YYYY
1125 : failed : failed : 3.133648672 (s) : \\d{1,2} \\. \\d{1,2} | \\d{1,2} \\. \\d{1,2}\"\"\"import re
1126 : failed : failed : 9.858612745 (s) : [^0-9]Reg
1127 : failed : failed : 1.007329592 (s) : D.M.YYYY or D.MM.YYYY
1128 failed : unparsable : 0 (s) : Please check your regex.
1129 : unparsable : unparsable : 0.064026276 (s) : r'^(0[1-9])[\\-/
1130 : unparsable : unparsable : 0.132949612 (s) : (?<date>  (?<hour>\\d+
1131 : failed : failed : 0.199536905 (s) : ^[A-Za-z0-9]{4}-[A-Za-z0-9]{2}-[A-Za-z0-9]{3}-[A-Za-z0-9]{2}-[A-Za-z0-9]$
1132 : failed : failed : 0.684733386 (s) : [A-Z]{1}[0-9]{3}[A-Z]{1}[0-9]{3}[A-Z]{1}[0-9]{3}
1133 : failed : failed : 0.872872056 (s) : \\d{4}-\\d{2}-\\d{2}
1134 : failed : failed : 0.192785481 (s) : ^\\d{3}-\\d{2}-\\d{2}-\\d{4}
1135 : failed : failed : 0.1882244 (s) : ^[A-Z]{3}[0-9]{2}[A-Z]{2}[0-9]{3}$
1136 : failed : failed : 0.211236242 (s) : [0-9]{1,3}
1137 : failed : failed : 0.20234889 (s) : ^([0-9]{2}[.]){1}[0-9]{3}$
1138 : failed : failed : 1.664452656 (s) : [0-9]{2}[0-9]{3}[0-9]{4}[0-9]{5}
1139 : failed : failed : 0.54392611 (s) : \\d{5}-\\d{2}-\\d{2}-\\d{2}
1140 : failed : failed : 1.325775837 (s) : ^[0-9]{6}$
1141 : failed : failed : 1.982251137 (s) : Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answ
1142 : failed : failed : 0.903187946 (s) : Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answ
1143 : failed : failed : 0.898568365 (s) : Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answ
1144 : failed : failed : 1.171466506 (s) : Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answ
1145 : failed : failed : 0.850782 (s) : Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answ
1146 : failed : failed : 0.797464397 (s) : Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answ
1147 : failed : failed : 1.691601915 (s) : Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answ
1148 : failed : failed : 0.679565058 (s) : Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answ
1149 : failed : failed : 1.001101199 (s) : Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answ
1150 : failed : failed : 1.399552692 (s) : Date expression validator with format YYMMDDValidates leap years.Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years!Generate a RegEx for this description. Answ
1151 : failed : failed : 0.474651556 (s) : Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is val
1152 : failed : failed : 0.306007922 (s) : Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is val
1153 : failed : failed : 0.285682752 (s) : Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is val
1154 : failed : failed : 0.418357209 (s) : Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is val
1155 : failed : failed : 0.426588843 (s) : Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is val
1156 : failed : failed : 0.41184825 (s) : Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is val
1157 : failed : failed : 0.310396681 (s) : Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is val
1158 : failed : failed : 0.944019677 (s) : Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is val
1159 : failed : failed : 0.406565036 (s) : Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is val
1160 : failed : failed : 0.317897678 (s) : Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is val
1161 : failed : failed : 0.187324164 (s) : ^\\d+(,\\d+)?$
1162 : unparsable : unparsable : 0.057341759 (s) : ([+-]?\\d+
1163 failed : unparsable : 0 (s) : Please check your regex.
1164 : failed : failed : 0.496704462 (s) : import renum_re = re.compile(r'^[\\d,-]*\\.?[\\d]$')
1165 : failed : failed : 2.414950303 (s) : ^[1-9][0-9]*(,[1-9][0-9]*)*$
1166 : failed : failed : 0.129907195 (s) : ^\\d+
1167 failed : unparsable : 0 (s) : Please check your regex.
1168 : failed : failed : 0.543811786 (s) : [^0-9.\\s]Generate this RegEx and use it as the string to replace with \"empty\". Answ
1169 : failed : failed : 8.427686524 (s) : (?<![\\d,.,])(\\d+[\\d.,]){1}\\d{2}(?![\\d,.,]|\\d{2})This is the RegEx for this description.\\d{1}\\d{2}(?![,.,])\\d{2}
1170 : failed : failed : 19.080186056 (s) : \\d+.\\d+$|^-?\\d+\\.?\\d+$
1171 : failed : pumping failed : 339.021336279 (s) : (?=.*0|^[0-9a-z]([a-z0-9]*[0-9]*))
1172 : failed : failed : 0.584176032 (s) : ^(0|[1-9][0-9]*)$
1173 : failed : failed : 1.174251041 (s) : (0x[A-Fa-f0-9]+)
1174 : failed : failed : 5.069241456 (s) : (1-9) | 0-9
1175 : failed : failed : 1.402161657 (s) : ^[1-9]\\d*[1-9]\\d*|1[1-9]\\d*$
1176 : failed : failed : 2.043218465 (s) : ^(0|[+-]?[0-9]+)$
1177 : failed : failed : 1.701481155 (s) : \\d+\\.?\\d*
1178 : failed : failed : 1.652163783 (s) : ^[0-9\\+\\*-]*$
1179 : failed : failed : 0.142786032 (s) : ^[1-9][0-9]?[0-9]?$
1180 : failed : failed : 0.176474107 (s) : \\b[1-9][0-9]{0,3}\\b - Positive integers that are greater than 0. Easily modified for +/- intergers and allowing zero.
1181 : unparsable : unparsable : 0.070991159 (s) : (?<!^[a-z\\d\\., \\-\\_][a-z\\d\\., \\-\\_]*[a-z\\d\\., \\-\\_]$)\\s(?![a-z\\d]).*
1182 : failed : failed : 1.14561158 (s) : (?<className>^)([a-zA-Z0-9_-]+)
1183 : failed : failed : 18.40097968 (s) : \\b[a-zA-Z0-9._-]+test\\b
1184 : failed : failed : 163.176445436 (s) : \"java\\s(.*?)\\.\" Java(.*?) matches the longest java class name and.*? matches the rest of the class name.
1185 : failed : pumping failed : 16.442221066 (s) : (?<classname>[^\\\"]*)(?<=\\.|$)(?=[^\\\"]*[\\\"])
1186 : failed : failed : 0.534210827 (s) : &quot;com.test.Test\\\\.test\\\\.test\\\\.test\\\\.test&quot;
1187 : failed : failed : 0.545901359 (s) : r'^[a-zA-Z0-9_][a-zA-Z0-9_.-]+$'
1188 : failed : failed : 0.309213996 (s) : <test   classname=\"test.Test\"   >   <classname=\"com\"   >
1189 : failed : failed : 0.429721149 (s) : &quot;java.test.Test\\&quot;
1190 failed : unparsable : 0 (s) : Please check your regex.
1191 : failed : failed : 1.843084152 (s) : \\b
1192 : unparsable : unparsable : 0.062166273 (s) : ^(?=.*(.){1,30})(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9_\\-.]{1,30}$
1193 : unparsable : unparsable : 0.08118126 (s) : public static string RegExForString(string text)    {        var pattern = new RegExp(@\"(?i)(?<=\\d).*?(?=\\d|$)\", RegexOptions.IgnoreCase);        return pattern.Replace(text, \"\");    }
1194 : failed : failed : 0.566195091 (s) : \\b(\\w+\\b)(_\\w+\\b)(_\\w+\\b){2}\\b
1195 failed : unparsable : 0 (s) : Please check your regex.
1196 : failed : failed : 0.21203087 (s) : $a\\.
1197 : failed : failed : 2.362162732 (s) : %(matches)s
1198 : failed : pumping failed : 31.004514155 (s) : (?<=^|[^\\w\\d_])[A-Za-z0-9_]+(?=\\s|$)
1199 : failed : failed : 0.281929964 (s) : \"^[a-zA-Z_*][a-zA-Z_0-9]*$\"
1200 : failed : failed : 226.891731987 (s) : var regex = new Regex(@\"(?<name>.*)\\s+(?<identifier>.*)\\s+(\\d+)\");
1201 : failed : failed : 0.63094398 (s) : (^(4[13578]|5[13579]|6[12345])[ -\\d]{3}[ -\\d]{4}[ -\\d]{4}$)
1202 : failed : failed : 0.343284667 (s) : \\d[ -]\\d\\d[ -]\\d\\d[ -]\\d\\d[ -]\\d{3}[ -]\\d{4}
1203 : failed : failed : 0.8175503 (s) : \"^[0-9\\s\\-\\s]{4,5}[0-9\\s\\-\\s]{4,5}[0-9\\s\\-\\s]{4,5}$\"
1204 : unparsable : unparsable : 0.095132656 (s) : ^(4[0-9]{3})-?(4[0-9]{3})-?(4[0-9]{3})-?(4[0-9]{4}|4[0-9]{4}-4
1205 : failed : failed : 0.153979112 (s) : ^\\d{4}[ -]\\d{4}[ -]\\d{4}[ -]\\d{4}$
1206 : failed : failed : 1.325026614 (s) : \\b\\d\\s?[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b
1207 : failed : failed : 1.789654249 (s) : \\d{4}-\\d{4}-\\d{4} | \\d{4}-\\d{4}-\\d{4} - \\d{4}-\\d{4}-\\d{4} | \\d{4}-
1208 : unparsable : unparsable : 0.071518346 (s) : ^[4-6-5-4-4-4]{4}$
1209 : failed : failed : 0.276713105 (s) : ^(4[3-9]\\d{0,3})?-(4[0-9]{1,3})?-$(4[0-9]{1,2})?(-[0-9]{1,3})?$
1210 : failed : failed : 0.274437093 (s) : (AMEX) (5-4-5-4-4) (VISA) (4-4-4-4-4) (Mastercard).
1211 : failed : failed : 0.900237561 (s) : \\d+(,\\d+)?
1212 failed : unparsable : 0 (s) : Please check your regex.
1213 : failed : pumping failed : 22.212627548 (s) : (.*)([ \\t,]*)([ \\t,]*)(.+), where $1 and $3 are the captured values, $2 is a space and $4 is tab chars.Examp
1214 : failed : failed : 0.841223131 (s) : ~(^[0-9]+\\s+[0-9]+\\s+[0-9]+\\s+[0-9]+\\s+)
1215 : failed : failed : 0.486571858 (s) : '^(0|[1-9][0-9]*)
1216 : failed : failed : 0.145890265 (s) : ^\\d+\\.$
1217 : failed : failed : 0.168313625 (s) : \\d+\\.\\d+Replace everything not matching with \"$1\"Example$ cat file1.txt1/2/12/1/21/1/3
1218 : failed : failed : 0.195286445 (s) : 1, -2, 5, -3, 8, -4, -2, 0, 1, 2, 3, 4, 5, -1
1219 : failed : failed : 2.42076423 (s) : \"^
1220 : failed : failed : 0.164135041 (s) : /
1221 : failed : failed : 8.568579371 (s) : `[\\r\\n\\t]+`
1222 : failed : failed : 361.586831639 (s) : [\\w]+\\n|[^\\w\\n]+
1223 : failed : error init : 0.103941211 (s) : (example)<input type=\"text\" name=\"input\" onkeyup=\"myFunction (this.value)\" /><textarea name=\"textarea\" rows=\"5\" cols=\"40\"></textarea><button onclick=\"myFunction (this.value)\">Run</button>
1224 : failed : failed : 0.153084206 (s) : [^\\n]{0,40}
1225 : failed : failed : 0.289321596 (s) : ^.*\\n[^\\n]+.*\\n$
1226 : failed : failed : 4.170682919 (s) : [AB]{0,1}[a-zA-Z0-9]*
1227 : failed : pumping failed : 561.346440242 (s) : ^[^\\s\\n]*?([A-Za-z0-9._-]+@[A-Za-z0-9._-]+\\.[A-Za-z0-9_-]+)[^\\s\\n]*?$
1228 : failed : failed : 3.312796165 (s) : ^[-a-zA-Z0-9]+$
1229 : failed : failed : 0.829544511 (s) : [your regex here]
1230 : failed : failed : 1.53298103 (s) : \\S+
1231 : failed : failed : 97.767934462 (s) : (?<=\\s)([A-z]|[0-9]|_).*?(?=\\s|$)
1232 : failed : pumping failed : 73.187225778 (s) : [\\w\\s]+\\d{5}$
1233 : failed : failed : 0.273551744 (s) : - a string of up to 8 characters (uppercase or lowercase) - a string of up to 3 characters (uppercase, lowercase, digit, or underscore) - a string of up to 2 numbers - a string of up to 4 numbers (0-9) - a string of up to 3 characters (a-z, A-Z, 0-9, or _) - a string of up to 1 space
1234 : failed : pumping failed : 14.737303104 (s) : (.*)-(.*)-(.*)-(.*)-(.*)
1235 : failed : failed : 5.034130938 (s) : \\d+\\.\\d+\\.\\d+_
1236 : unparsable : unparsable : 0.077476734 (s) : (?<![a-z0-9\\._\\(\\)\\[\\]-]+)([a-z0-9\\._\\(\\)\\[\\]]+)\\.([a-z0-9\\._\\(\\)\\[\\]-])\\.([a-z0-9\\._\\(\\)\\[\\]]+)(\\.([a-z0-9\\._\\(\\)\\[\\]-])\\.([a-z0
1237 : unparsable : unparsable : 0.07937077 (s) : ^(?P<first>.+)\\.(?P<second>.+)\\.(?P<third>.+)$
1238 : unparsable : unparsable : 0.070792055 (s) : {'rege
1239 : unparsable : unparsable : 0.067210639 (s) : (.+?)(?=
1240 : failed : failed : 0.31154944 (s) : I would expect a regex that would pick up strings that are between two semicolons, and that contain a number.
1241 : unparsable : unparsable : 0.089985668 (s) : (\\d{2}|\\d{
1242 : unparsable : unparsable : 0.068798222 (s) : \\d{1,
1243 : failed : failed : 3.745951855 (s) : (.*)
1244 : unparsable : unparsable : 0.094463613 (s) : ^(\\d{1,
1245 failed : unparsable : 0 (s) : Please check your regex.
1246 : unparsable : unparsable : 0.090711537 (s) : ([01]?[0-
1247 : unparsable : unparsable : 0.183117507 (s) : (\\d{2
1248 : unparsable : unparsable : 0.111731629 (s) : (([01]?[0-9]|2[0-3
1249 : unparsable : unparsable : 0.053094756 (s) : (?=^|\\s)(\\d{2
1250 failed : unparsable : 0 (s) : Please check your regex.
1251 : failed : timeout : 600 (s) : .*\\d{3}[ -]\\d{3}[ -]\\d{4}
1252 : failed : failed : 0.913940441 (s) : (\\d{3}\\.){3}\\d{3}
1253 : failed : failed : 1.554488846 (s) : \\b(?=\\d\\b)^\\d+$
1254 : failed : failed : 1.934013617 (s) : (?<!\\d)(?!0)\\b\\d{2}\\bGenerate a RegEx for this description. Answ
1255 : failed : failed : 0.819948521 (s) : \\d{3}-\\d{3}-\\d{4}
1256 : failed : failed : 6.781556018 (s) : \\b1\\b|\\b[\\+1-9]\\d{10}\\b
1257 : unparsable : unparsable : 0.061521666 (s) : (0[2-9][0-9]|[1-9]\\d?|1\\d\\d|\\d\\d\\d\\d|\\d\\d)\\s(0[2-9][0-9]|[1-9]\\d?|1\\d\\d|\\d\\d\\
1258 : unparsable : unparsable : 0.094884251 (s) : (?i)(^[A-Za-z0-9+\\-. ]{9,16}$)
1259 : failed : failed : 25.470283217 (s) : (?<!^)(?!^)([A-Z]{2}[0-9]{3}[A-Z]{1})[A-Z]{1}[A-Z]{1}[A-Z]{2}-\\d{3}-\\d{4}
1260 : failed : failed : 1.524445226 (s) : /^
1261 : failed : failed : 0.158022043 (s) : 1-20
1262 : failed : failed : 3.809902489 (s) : \\b(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20)\\b
1263 : failed : failed : 0.137378666 (s) : 1-20
1264 : failed : failed : 1.43364903 (s) : (0-9)(0-9)(0-9)
1265 : failed : failed : 1.685289083 (s) : [1-19]
1266 : failed : failed : 1.12433595 (s) : (1[0-9]|2[0-3])
1267 : failed : failed : 0.146140503 (s) : ^[1-9]\\d{0,19}$
1268 : failed : failed : 0.916650496 (s) : [1-9][0-9]
1269 : failed : failed : 1.18924564 (s) : (0,?)-?([0-9])
1270 : failed : failed : 1.91758378 (s) : [1-20]
1271 : failed : failed : 21.251002843 (s) : [A-Z]{2,2}[0-9]
1272 : failed : failed : 3.356792373 (s) : \\b(?!0)\\d{1,2}
1273 : failed : failed : 1.085247842 (s) : r'^([1-9][0-9]|[0-9])$'
1274 : failed : failed : 0.847009586 (s) : ~[0-9]{1,5}[a-z]{1}[0-9]{4}$
1275 : failed : failed : 0.186948882 (s) : ^(A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)(\\d(st|nd|rd|th))
1276 : unparsable : unparsable : 0.092978432 (s) : /((0[1-9][0-9]|1[0-9]{2})\\.)((0[1-9][0-9]|1[0-9]{2})\\.)((0[1-9][0-9]|1[0-9]{
1277 : failed : failed : 0.261084539 (s) : ^00[1-9]\\d\\d?$
1278 : failed : failed : 1.633549987 (s) : (\\d{4}-\\d{2}-\\d{2}|\\d{3}-\\d{2}-\\d{2})
1279 : failed : failed : 0.13725255 (s) : /^
1280 : failed : failed : 0.581190691 (s) : ^[1-9][0-9]{0,2}[a-z]\\d{3}$
1281 : failed : failed : 0.397124178 (s) : Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answ
1282 : failed : failed : 0.321668428 (s) : Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answ
1283 : failed : failed : 0.347946247 (s) : Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answ
1284 : failed : failed : 0.41485466 (s) : Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answ
1285 : failed : failed : 0.358797296 (s) : Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answ
1286 : failed : failed : 0.211587239 (s) : Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answ
1287 : failed : failed : 0.243299975 (s) : Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answ
1288 : failed : failed : 0.30628933 (s) : Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answ
1289 : failed : failed : 0.330897361 (s) : Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answ
1290 : failed : failed : 0.310820986 (s) : Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric.This will be usefull in money relatedfields or decimal fields.Generate a RegEx for this description. Answ
1291 : unparsable : unparsable : 0.05642932 (s) : var regex = new RegExp(\"^(?=.{4,20}$)([0-9]{1,2}[\\.,]?[0-9]{1,2}[\\.,]?[0-9]{1,2})
1292 : failed : failed : 0.679808814 (s) : \\d{1,2}\\.\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}
1293 : unparsable : unparsable : 0.081601467 (s) : (\\d+)/(\\d+)/(\\d+)/(\\d+)/(\\d+)/(\\d+)/.*)
1294 : failed : failed : 0.701935499 (s) : ^(\\d{1,2})-(\\d{1,2})-(\\d{1,4})$
1295 : failed : failed : 0.849114508 (s) : \"\\d{4}-\\d{2}-\\d{2}\"
1296 : failed : failed : 0.244810584 (s) : ^(20|21)([0-9]{2})[-/](0[1-9]|[1-9]|[2-9])[-/](0[1-9]|[1-9]|[2-9])$
1297 : failed : failed : 0.561095681 (s) : [REGEXP]^[0-9]+ [0-9]{2}[0-9] (AM|PM) [0-5]?[0-9]$
1298 : unparsable : unparsable : 0.109183768 (s) : ([0-9]{1,2
1299 : failed : failed : 12.910410693 (s) : (?<=[0-9a-f]{4})-(?=[0-9a-f]{4})[0-9a-f]{4}
1300 : failed : failed : 38.685885633 (s) : .{1,10}  # The character. is used to match any character.
1301 : unparsable : unparsable : 0.102222673 (s) : \\d{1,2}(
1302 : unparsable : unparsable : 0.06391612 (s) : (0+[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.(0+[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))
1303 : unparsable : unparsable : 0.077724988 (s) : \\d\
1304 : unparsable : unparsable : 0.061805327 (s) : \\d{1,2
1305 : failed : failed : 0.14415765 (s) : /^0
1306 : failed : failed : 156.52723023 (s) : (A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})
1307 : unparsable : unparsable : 0.081334417 (s) : (htt
1308 : unparsable : unparsable : 0.060198959 (s) : (1-3) [0-9]{1,
1309 failed : unparsable : 0 (s) : Please check your regex.
1310 : failed : failed : 0.292290946 (s) : (\\d+-\\d+-\\d+)
1311 : failed : failed : 0.84108985 (s) : #(\\d\\d\\d\\d)([#]\\d\\d\\d\\d)
1312 : failed : failed : 0.984842582 (s) : #[0123456789ABCDEF].[^A-Z]Answ
1313 : failed : failed : 0.16836984 (s) : .{3,6}
1314 : failed : failed : 4.861654377 (s) : r\"#[0-9a-fA-F]{6,12}|#[0-9a-fA-F]{3,3}|#[0-9a-fA-F]{1,1}\"
1315 : failed : failed : 1.14233814 (s) : #[0-9A-Fa-f]{6}
1316 : failed : failed : 2.377465609 (s) : #([0-9]{6}|[1-9]{3}|[1-9]{2})
1317 : failed : failed : 0.216434907 (s) : ^(?=\\d{5})\\d{6}$
1318 : failed : failed : 1.619224901 (s) : @#([A-Fa-f0-9][0-9A-Fa-f]{3}|[A-Fa-f0-9][0-9A-Fa-f]{6})
1319 : unparsable : unparsable : 0.131169368 (s) : ^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3}[A-Fa-f0-9]{3}|[A-Fa-f0-9]{3}[A-Fa-f0-9]{3}[A-Fa-f0-9]{3}|[A-Fa-
1320 : failed : failed : 0.178251956 (s) : ^#[0-9a-f]{6}$
1321 : failed : failed : 0.221724092 (s) : ^(20[1-9]|1[012])/(januari|februari|mars)\\/(0|1[1-9])/[12][0-9]{4}$
1322 : failed : failed : 0.205439227 (s) : ^(0-9)+(/([0-9]|[1-9])([/(0-9)]?)?)?$
1323 : failed : failed : 0.795959149 (s) : \"\\d{2}/\\d{2}/\\d{4}\"\"\"\"
1324 : unparsable : unparsable : 0.098198177 (s) : [A-Za-z0-9][A-Za-z0-9 \\-\\.]{0,31}[A-Za-z0-9][A-Za-z0-9 \\-\\.]{0,31}[A-Za-z0-9][A-Za-z0-9 \\-\\.]{0,31}[A-Za
1325 : unparsable : unparsable : 0.076885075 (s) : [01/01/YYYY-MM-DD-AAAA].
1326 : failed : failed : 8.057621928 (s) : [0-9]{2}/[0-9]{2}/[0-9]{4}
1327 failed : unparsable : 0 (s) : Please check your regex.
1328 : failed : failed : 0.463884494 (s) : \\d{2}/\\d{2}/\\d{4}
1329 : unparsable : unparsable : 0.068478043 (s) : (?P<Month>\\w{3})
1330 : failed : failed : 0.93397609 (s) : \"([0-9]{3})/[0-9]/[0-9]{4}\"
1331 : failed : failed : 0.170535265 (s) : ^0[1-9]\\d{0,2}(\\.[0-9]{0,2})$
1332 : failed : failed : 0.188560099 (s) : ^([0-9]{1,2})(\\.[0-9]{1,2})$
1333 : failed : failed : 0.157978121 (s) : (?<=^|[^-\\d])([0-9]{1,2})([0-9]{0,2})([^-\\d])(?=\\.[0-9]{1,2}|$)Now you could do any number of Matches in your string against this regex.
1334 : failed : failed : 0.255661754 (s) : ^\\d{1,2}(\\d{2})?(\\d{8})?\\.\\d{1,2}$
1335 : failed : failed : 4.570250412 (s) : (?<=\\d{1,3})\\.(?=\\d{0,2})
1336 : failed : failed : 1.915605435 (s) : \\d{2}\\.\\d{2}|\\d{3}\\.\\d{1}
1337 : failed : failed : 53.188899086 (s) : [0-9]{0,8}\\.?[0-9]{0,2}
1338 : failed : failed : 83.387769306 (s) : .{0,8}([1-9][0-9]{0,2})(\\.[0-9]+)
1339 : failed : failed : 3.693533837 (s) : \\d{2}\\.\\d{0,2}$
1340 : failed : failed : 28.306019695 (s) : [\\d]{1,2}\\.?\\d{2,8}
1341 : failed : failed : 1.05178517 (s) : A.K.N.W.\\d{1,2}{1,2}{1,2}{1,2}
1342 : failed : failed : 0.65942862 (s) : ^[AKNW]\\d{1,3}$
1343 : failed : failed : 0.156969322 (s) : ^[AKN][WT]{0,3}[0-9]{1,3}$
1344 : failed : failed : 0.234272801 (s) : ^[AKNW]\\d{0,3}[S](\\d{0,3}[A-Z])?$ \"
1345 failed : unparsable : 0 (s) : Please check your regex.
1346 : failed : failed : 0.353538098 (s) : r'^(A|k|n|w)([A-K0-9]{1,2})([0-9]{1,3})$'
1347 : unparsable : unparsable : 0.103625199 (s) : (^A[KN0-9]\\d{1,2}\\d$|^W[A-Z0-9]\\d{1,2}\\d[A-Z]$|^N[A-Z0-9]\\d{1,2
1348 : failed : pumping failed : 49.070304007 (s) : A.*K.*N.*W\\D(\\.\\D)?\\d+
1349 : failed : failed : 0.753242247 (s) : A[K-WN][0-9]{1,3}
1350 : failed : failed : 1.166933598 (s) : A([A-K]|N|W)(\\d{1,2})\\d{0,3}
1351 failed : unparsable : 0 (s) : Please check your regex.
1352 : unparsable : unparsable : 0.085432231 (s) : ^(
1353 : failed : failed : 1.510991944 (s) : \\b[A-Z][a-z]\\w*[a-z]\\b
1354 : failed : failed : 2.381465128 (s) : ^[A-Za-z]+[\\s\\-_]*$
1355 : unparsable : unparsable : 0.068397992 (s) : ^(?P<Weekday>[A-Za-z]{3})|(?P<Weekday>[A-Za-z]{3}?)(?P<Month>[0-9]{1,2})(?P<Day>[0-9]{1,2})$
1356 failed : unparsable : 0 (s) : Please check your regex.
1357 : failed : failed : 3.068523829 (s) : \\b
1358 : failed : failed : 0.955324447 (s) : (?i)(\\b\\d{4}[-w]?\\d{4}[-w]?\\d{4}\\b)
1359 : failed : failed : 0.528712992 (s) : (i.e..match or.search).*
1360 : failed : failed : 4.824290369 (s) : (\\w+\\s)?[a-zA-Z0-9 ]*
1361 : failed : failed : 5.977619031 (s) : ^[0-9a-zA-Z]*$
1362 : failed : failed : 4.797225698 (s) : ^(?!.*\\d)
1363 : failed : failed : 5.302510527 (s) : ^.*$
1364 : unparsable : unparsable : 0.105359927 (s) : ^[\\w]*[^\\w]\\d[^\\w]\\d[]
1365 : failed : failed : 0.994682099 (s) : ^([a-zA-Z0-9]*[^a-zA-Z0-9]|[^a-zA-Z0-9]*$)
1366 : failed : failed : 1.588062526 (s) : ^(?=.*[a-zA-Z0-9])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]{3,20}$
1367 : failed : failed : 3.236287454 (s) : ^.*$
1368 : failed : failed : 13.235671388 (s) : (^[ \\t]*?[a-zA-Z0-9_.-]*$)
1369 failed : unparsable : 0 (s) : Please check your regex.
1370 : failed : failed : 13.811851879 (s) : ^[a-z]{1}[a-z0-9]+(\\.[a-z]{1}[a-z0-9]+)*$
1371 : unparsable : unparsable : 0.069598611 (s) : REGEX_MATCH = re.compile(r'^(
1372 : failed : failed : 0.176222395 (s) : YYYY-mm-dd 
1373 : unparsable : unparsable : 0.070084271 (s) : /\\(
1374 : unparsable : unparsable : 0.092083806 (s) : (You may need a regex library for this)    select        t.*,        (case            when regexp_like(t.date_col, '%Y-%m-%d')                and regexp_
1375 : unparsable : unparsable : 0.093968656 (s) : (?<!\\d)\\d{4}-\\d{2}-\\d{2}\\s\\d{
1376 : unparsable : unparsable : 0.092385982 (s) : \\d{4}-\\d{2}-\\d{2} \\d{
1377 : unparsable : unparsable : 0.067321807 (s) : '^\\d{4}-\\d{2}-\\d{2} \\d{
1378 : failed : failed : 0.22883584 (s) : \\d\\d-\\d\\d-\\d\\d (00-24)
1379 : unparsable : unparsable : 0.079760429 (s) : (    ^    \\d{4}-\\d{2}-\\d{2}    (        
1380 : failed : failed : 0.425178151 (s) : SELECT?ymdhms?dateTime  WHE
1381 : failed : error init : 0.135691086 (s) : {2}|{5}|{8}|{10}|{11}|{15}|{18}|{21}|{22}\"\"\"
1382 : failed : failed : 0.153019946 (s) : ^[A-Z][-A-Z0-9]{2}
1383 : failed : failed : 0.141385449 (s) : ^[A-Z][^A-Z]*$Answ
1384 : failed : failed : 0.722843482 (s) : Q\\d{0,2}$
1385 : failed : failed : 0.20870936 (s) : ^(?=[A-Z]{2})\\d{8}$
1386 : failed : failed : 96.205520855 (s) : ^[A-Z]{2,}-?[A-Z]{2,}$
1387 failed : unparsable : 0 (s) : Please check your regex.
1388 : failed : failed : 1.931215628 (s) : ([a-z][A-Z][a-z]|[A-Z][a-z]|[a-z][A-Z][a-z][a-z]|[A-Z][a-z][a-z][a-z][a-z])Generate a RegEx for this description. Answ
1389 : failed : failed : 249.566068754 (s) : (?<=State|States|States\\/|States\\/\\.|States\\/\\.\\/\\.)(?<=\\s| - )(?<= of )(?<= )(?<=.* )(?<=\\s| - )(?<=.* )(?<=\\s| - )(?<=.* )
1390 : unparsable : unparsable : 0.083204509 (s) : (?(DEFINE    (PART_OF_STATE_STATES, \\?\\s*$)    (NUMBER_OF_STATES, \\?\\s*$)
1391 : failed : failed : 0.205100462 (s) : (\\(\\d{3}\\) \\d{3}-\\d{4})
1392 : failed : failed : 0.237991685 (s) : (\\d{3})\\s\\d{3}\\s\\d{4}
1393 : failed : failed : 0.547822907 (s) : (^\\d\\d\\d-\\d\\d-\\d\\d$|^\\d\\d-\\d\\d-\\d\\d$|^\\d\\d-\\d\\d\\d\\d$)
1394 : failed : failed : 0.640044542 (s) : (\\\\d{2}\\\\d{3})-[^-]{0,3}-[^-]{0,3}
1395 : failed : failed : 0.464018665 (s) : \\(\\d{3}\\) \\d{3}-\\d{4}
1396 : failed : failed : 0.669069244 (s) : \\(#\\d{3}-\\d{2}-\\d{4}\\)
1397 : failed : failed : 22.070213292 (s) : [0-9][0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-[0-9][0-9]
1398 : failed : failed : 0.816404846 (s) : '^([0-9]{3})\\s+([0-9]{3})\\s+([0-9]{4})$'Co
1399 : failed : failed : 1.100011829 (s) : (\\d{3})-(\\d{3})-(\\d{4})\"\"\"
1400 : failed : failed : 0.656791763 (s) : [0-9]{3}-[0-9]{4}-[0-9]{5}
1401 failed : unparsable : 0 (s) : Please check your regex.
1402 : unparsable : unparsable : 0.063891744 (s) : (?<year>\\d{4})/(?<month>\\d{1,2})/(?<day>\\d{1,2})/(?<time>
1403 : unparsable : unparsable : 0.083215199 (s) : ^0*((19\\d{2}|20\\d|21\\d|22\\d|23)\\d\\d)T((1[0-2]\\d|0[
1404 : unparsable : unparsable : 0.08405941 (s) : (19[8-9]|1[012]|0[1-9])[0-9]{4}-[0-9]{2}-[0-9]{2
1405 : unparsable : unparsable : 0.095410767 (s) : (?P<year>[0-9]{4})
1406 : unparsable : unparsable : 0.081069331 (s) : (?<year>\\d{4})\\d{2}(\\/|-|\\.)\\d{2}(\\/|-|\\.)\\d{2}(\\/|-|\\
1407 : failed : failed : 0.188627766 (s) : ^  (?!0[1-9])            # zero and more digits not a zero  (?!0[1-9]|1[012])     # zero and more digits not
1408 failed : unparsable : 0 (s) : Please check your regex.
1409 : failed : failed : 0.363647649 (s) : (6-20 characters)^(0[1-9]|0?[1-9]|1[0-2]|2[0-9])/
1410 failed : unparsable : 0 (s) : Please check your regex.
1411 : failed : failed : 0.155752223 (s) : ^[0-9]{1,3}(?=[0-9]{9})$
1412 : failed : failed : 0.875630211 (s) : \\b\\d{1,3}\\b
1413 : failed : failed : 0.19248023 (s) : ^[1-9][0-9]999$
1414 : failed : failed : 0.101898817 (s) : 0-999
1415 : failed : failed : 0.116550724 (s) : ^[0-9]{1,3}$
1416 : failed : failed : 0.642138563 (s) : ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$
1417 : failed : failed : 0.175944435 (s) : ^[0-9]+$
1418 : failed : failed : 1.619993531 (s) : 0\\d{1,2}|1\\d{3}|2\\d{4}|3\\d{5}|4\\d{6}|5\\d{7}|6\\d{8}|7\\d{9}
1419 : failed : failed : 0.141451673 (s) : (0-9\\d)*
1420 : failed : failed : 0.659003294 (s) : \\d{1,4}
1421 : failed : failed : 1.471459425 (s) : \\d{1,2}
1422 : failed : failed : 0.203989532 (s) : ^[0-9]{2}-[0-9]{2}-[0-9][0-9]$
1423 : failed : failed : 1.757744083 (s) : $|-?\\d{1,2}-
1424 : unparsable : unparsable : 0.094367513 (s) : (?<month>\\s*)?  (?<year>\\d{4})-(?<day>\\d{2})/(?<hour>\\d{2
1425 : failed : failed : 2.435100616 (s) : \\A
1426 : failed : failed : 0.135742031 (s) : var re = /^
1427 : failed : failed : 0.233846041 (s) : r'^[1-9][0-9]?( [0-9]{1,2})?\\/[0-9]{1,2}\\/[0-9]{4}$' (The month can be uppercase or lowercase, but the day and year format should be the same.)
1428 : unparsable : unparsable : 0.10009599 (s) : (?=.*\\(.*\\).*(?=.*\\-).*(?=.*\\/).*\\d{4}-\\d{1,2}-\\d{1,2}
1429 : failed : failed : 0.310035805 (s) : ^\\s*\\d{1,2}-\\s*\\d{1,2}-\\s*\\d{4}\\s+$
1430 : failed : error init : 0.092315812 (s) : ^
1431 : failed : failed : 34.051367003 (s) : [0-9]{4}[a-zA-Z]{2}
1432 : failed : failed : 0.162964077 (s) : ^([1-9]{2}[0-9]{5})$
1433 : unparsable : unparsable : 0.068809353 (s) : +34[0-9]
1434 : failed : failed : 0.702444893 (s) : \\b[0-9][0-9][0-9]\\s[A-Z][A-Z]\\d\\b
1435 : failed : failed : 1.662390193 (s) : 0. ([0-9]{2}).([0-9]{2}).([0-9]{2})
1436 : failed : failed : 0.225718181 (s) : \\b[1-9][0-9]{3}\\s[a-z]{3}\\b
1437 : failed : failed : 1.113088878 (s) : \\d{4}[a-z]{2}|\\d{2}[a-z]{4}
1438 : failed : failed : 32.792898827 (s) : ([0-9]{4}[a-zA-Z])
1439 : failed : failed : 0.929267222 (s) : \\d{4}[a-z]{2}
1440 : failed : failed : 0.17494334 (s) : ^\\d{4}[A-Z]{2}$
1441 : unparsable : unparsable : 0.075833146 (s) : \\(,\\s*,\\s*|,\\s*,\\s*
1442 : failed : failed : 0.485294907 (s) : ,|\\s
1443 : failed : failed : 25.431328871 (s) : ^(\\s+)|(,)|(\\s*,)|(\\s*,\\s*)$
1444 : failed : failed : 0.798884336 (s) : .*[0-9]*
1445 : failed : failed : 0.986889746 (s) : \\s*,\\s*
1446 : failed : failed : 9.501518097 (s) : \\s|,
1447 : failed : failed : 1.169355563 (s) : [,\\s]
1448 : failed : failed : 0.673268316 (s) : (?<=,)+  // any amount of commas but one is required between 2 other characters (,) |               // or \\s                // any amount of whitespace characters
1449 : failed : failed : 0.15055482 (s) : .
1450 : failed : failed : 1.544408079 (s) : [,\\s]
1451 : failed : failed : 0.223386656 (s) : ^[a-z]{3}\\s\\d+\\s\\d+-\\d+\\s\\d
1452 : unparsable : unparsable : 0.080898932 (s) : \\b(january|february|march|april|may|junior|july|august|se
1453 : unparsable : unparsable : 0.106076369 (s) : ^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (
1454 : unparsable : unparsable : 0.089216217 (s) : ^(?P<month>\\w{1,3})
1455 : unparsable : unparsable : 0.121820172 (s) : [a-zA-Z][a-zA-Z][a-z] \\d{1,2}(
1456 : failed : failed : 6.013768314 (s) : ^[A-Z]{3}(\\s?[0-9]{1,})[a-z]$
1457 : failed : failed : 24.50997684 (s) : [A-Z][a-z]?[A-Z][a-z]+ [0-9]{2}
1458 : unparsable : unparsable : 0.10644536 (s) : /^[a-zA-Z]{3} [A-Za-z]{5}[-0-
1459 : failed : failed : 0.549692127 (s) : \\b[A-Z][a-z]\\s\\d\\d\\d,\\d\\d\\d\\
1460 : unparsable : unparsable : 0.086377791 (s) : ^0?[1-9]?[0-9]|1?[0-2]|3[012])
1461 : failed : failed : 0.159627459 (s) : ^\\d{3}(.\\d{3}){2}$
1462 : failed : failed : 2.384069525 (s) : \\d{1,2}/\\d{3}/\\d{4}
1463 : failed : failed : 0.320655161 (s) : /\\d\\d\\d\\s\\d\\d\\d\\d\\/\\d\\d\\d\\d\\s\\d\\d\\d\\d\\/\\d\\d\\d\\d\\s\\d\\d\\d/ Explanati
1464 : failed : failed : 0.961021956 (s) : (\\w+ \\w+ \\w+)
1465 : failed : failed : 0.225303194 (s) : ^\\s*\\d{1,2}\\s*\\w{3}\\s*\\d{4}$
1466 : failed : failed : 0.195571779 (s) : ^(0[1-9]|1[012])[0-9]{3}[0-9]{2}[0-9]{4}$
1467 : failed : failed : 0.911610327 (s) : r'\\d{1,2}/\\d{1,2}/\\d{4}'
1468 : failed : failed : 2.267003997 (s) : (3). (0[1-9]|1[012])/([01][0-9]|[2][0-3])/([0-9][0-9]|1[012])$
1469 : failed : failed : 0.640743551 (s) : (\\d{1,2})\\s([A-Z][a-z]\\s[A-Z][a-z]\\s[A-Z][a-z])
1470 : failed : failed : 10.092795789 (s) : (\\d{2}|\\d{2} \\d{4})
1471 : failed : failed : 2.852044508 (s) : \\b(january|february|march|april|may|june|july|august|september|october|novEMBER|decEMBER)\\b
1472 : failed : failed : 0.120173537 (s) : \\d{1,3}[-/ ]\\d{1,4}\\. Match 1 to 3 numbers, space or /, any number then.
1473 : failed : failed : 1.000352507 (s) : (\\d{1,2}/\\d{1,2})/\\d{3}
1474 : failed : failed : 1.190632807 (s) : \\b\\d{1,2}[-/]\\d{1,2}[-/]\\d{1,2}\\b
1475 : failed : failed : 1.086957545 (s) : (January|February|March|April|May|June|July|August|September|October|November|December)
1476 : failed : failed : 2.175243325 (s) : \\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\b
1477 : failed : failed : 1.02556492 (s) : ^[a-zA-Z]{3}\\s\\d{2}
1478 : failed : failed : 0.184044744 (s) : ^\\d{2}\\/\\d{2}\\/\\d{4}$
1479 : failed : failed : 19.868701626 (s) : r'[^0123456789]*'
1480 failed : unparsable : 0 (s) : Please check your regex.
1481 : failed : failed : 0.122192208 (s) : ^1
1482 : failed : failed : 0.162517191 (s) : ^1
1483 failed : unparsable : 0 (s) : Please check your regex.
1484 : failed : failed : 0.324511002 (s) : ^(1[01]*)([01]*$)
1485 : unparsable : unparsable : 0.071375829 (s) : [1] (?=1[1-9]\\d*|1\\d*1[1-9]|1\\d*0[1-9]|1\\d*|[1-9]\\d*|1\\d*1[1-9]|1\\
1486 : success : mutate : 2.428462665 (s) : ^(1[01]*0|[01]*1)+$
1487 : failed : failed : 0.292436529 (s) : ^\\d{1,2}(\\.\\d{1,2}){3}$ Explanatio
1488 : failed : failed : 32.721408884 (s) : ^1(0|1){7,}$
1489 : failed : failed : 0.116972363 (s) : ^\\1\\0
1490 : failed : failed : 1.389474319 (s) : \\1
1491 : unparsable : unparsable : 0.086210218 (s) : (?<![0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*)\\..* -
1492 : failed : failed : 21.795239435 (s) : [0-9][0-9][0-9][0-9][0-9][0-9][0-9]'][0-9][0-9][0-9][0-9][0-9]'
1493 : unparsable : unparsable : 0.048790435 (s) : {  0
1494 : failed : failed : 0.723318522 (s) : \\d{4}-\\d{2}-\\d{2}
1495 : failed : failed : 0.09028583 (s) : ^(\\d{3})
1496 : failed : failed : 0.374308352 (s) : \\b\\d{1,4}\\/\\d{1,2}\\/\\d{2}
1497 : failed : failed : 0.886432239 (s) : [1-9]\\d{3}\\d/[1-9]\\d{2}/\\d{4}
1498 : failed : failed : 2.645845909 (s) : \\A(2000|1902|2004|2008|2008|2009|2010|2012|2014|2014|2014|2014|2014|2014|2014|2008|2010|2012|2014|2014|2014|2014|2014|2014|2014|2014|2014|2014|2014)
1499 : failed : failed : 0.511104428 (s) : \\d{4}/\\d{2}/\\d{2} \\d{1,2}[-/][0-9]{1,2} \\d{1,2}[-/][0-9]{1,2}
1500 : failed : failed : 18.297121385 (s) : (1.0|[1-9][0-9]*[0-9])|  (0[1-9]|[12][0-9]|3[01])/  (0[1-9]|1[012])/  (19|20)[0-9]
1501 : failed : failed : 0.19793753 (s) : ^\\d{5}\\.\\d{2}$
1502 : failed : failed : 0.14486744 (s) : ^\\d{5}\\.\\d{2}$
1503 : failed : failed : 0.121542943 (s) : ^0\\.\\d{2}$
1504 : failed : failed : 0.15146224 (s) : ^[0-9]{5}.[0-9]{2}$
1505 : failed : failed : 1.185332973 (s) : 0.00
1506 : failed : failed : 0.748999552 (s) : 5\\d{2}\\.\\d
1507 : failed : failed : 0.14047254 (s) : ^[0-9]{5}.[0-9]{2}$
1508 : failed : failed : 13.637241091 (s) : (0-999)\\.|(0)
1509 : failed : failed : 0.355714804 (s) : r'^[0-9]{5}\\.[0-9]{2}$'
1510 : failed : failed : 1.152871645 (s) : \\d{5}\\.(\\d{2})
1511 : failed : failed : 0.584819748 (s) : r'^[0-9]\\d{3}[,.]\\d{2}$'
1512 : failed : failed : 0.163582636 (s) : ^\\d{5}.{2}$
1513 : failed : failed : 0.759208238 (s) : \\d{5}\\.\\d{2}
1514 : failed : failed : 0.218270304 (s) : (^\\d{5}(\\.\\d{2})?$)
1515 : failed : failed : 0.159375077 (s) : ^[0-9]{5}[.][0-9]{2}$
1516 : failed : failed : 1.790505613 (s) : [0-9]{5}.[0-9]{2}
1517 : failed : failed : 1.921205943 (s) : (\\d{2})(\\.\\d{2})
1518 : failed : failed : 6.338065875 (s) : var n = new RegExp(/(^0|[1-9][0-9]*[1-9])[.][0-9]{2}$/);
1519 : failed : failed : 20.550973874 (s) : ^(?=.*\\d)(?=.*\\.\\d{2})(?=.*\\d)(?=.*\\d\\b)[0-9]{5}\\.\\d{2}$
1520 : failed : failed : 0.142182552 (s) : ^[0-9][.][0-9]$
1521 : unparsable : unparsable : 0.066209114 (s) : /^(?!.*[&lt;&gt;!@\\#{$}
1522 : failed : failed : 0.179887128 (s) : NO STRING VALIDATION
1523 : failed : failed : 0.505616631 (s) : \\\\W
1524 : failed : failed : 0.121710736 (s) : import re
1525 : failed : failed : 0.172914301 (s) : ^^#!\\
1526 : unparsable : unparsable : 0.085911047 (s) : /^[^<>/@\\#\\{\\}\\[\\]\\(\\)\\*\\+\\=\\|\\'\"\\?\\.\\,
1527 : failed : failed : 3.158357251 (s) : .+
1528 : unparsable : unparsable : 0.062895118 (s) : /[^&lt;&gt;_!@\\#{
1529 : unparsable : unparsable : 0.098072221 (s) : * [A-z0-9a-z]*  * [A-z0-9]*  * [A-z0
1530 : failed : failed : 0.218496117 (s) : The expression should look like th
1531 : failed : failed : 0.916530071 (s) : /[0-9]{3}-[0-9]{3}-[0-9]{4}/.
1532 : failed : failed : 31.196729839 (s) : ^|\\+?[0-9]{3}[0-9]{3}(([-\\s0-9]*)?[0-9]{4})?\\s*$
1533 : failed : failed : 0.47315874 (s) : /^\\+?\\d{1,9}$/.
1534 failed : unparsable : 0 (s) : Please check your regex.
1535 failed : unparsable : 0 (s) : Please check your regex.
1536 : failed : failed : 0.934466869 (s) : \\b([1-9]{1,3}\\d{3}|[1-9]\\d{1,2})(\\s\\d{1,4})?\\s?[-\\.\\s]?\\d{1,4}
1537 : failed : failed : 0.499278392 (s) : ^[0-9]{3}[- ]?[0-9]{3}[- ]?[0-9]{4}$
1538 : unparsable : unparsable : 0.123376456 (s) : .*\\(?(\\d{3})\\)?[-.\\s]*(\\d{3})[-.\\s]*(\\d{4})
1539 : failed : failed : 0.630451056 (s) : ^\\+?[0-9]{1,3}\\-[0-9]{1,3}\\-[0-9]{4}$
1540 : failed : failed : 14.615074689 (s) : [0-9]{3}[-.][0-9]{3}[-.][0-9]{4}
1541 : failed : failed : 2.179753671 (s) : (20[0-9]|1[012])\\,
1542 : failed : failed : 0.170561104 (s) : \\b\\d{4,}\\b (This will match 4-9 digits that does not include leading 0's, if you want to match 1-9, you can use the \\d{1,2} pattern).Use it to validate the date entered.
1543 : failed : failed : 2.828555813 (s) : \\d{4}_\\d{2}
1544 : failed : failed : 0.104915485 (s) : \\w\\d\\d\\d
1545 : failed : failed : 0.993651198 (s) : (\\b\\d{4}\\-)?(\\d{2})-(\\d{2})([,\\s]\\d{4})? The pattern match
1546 : failed : failed : 5.263887922 (s) : [0-9]{4}\\-[0-9]{4}-[0-9]{2}
1547 : failed : failed : 0.463577348 (s) : \"^(19|20)[0-9]{2}
1548 : unparsable : unparsable : 0.094169142 (s) : ^(?P<year>[0-9]{3})
1549 : failed : failed : 3.261474479 (s) : (?<=^|,) \\d{1,4} (?=,|$) (?=\\d|,)
1550 : failed : failed : 3.470444027 (s) : (\\d{4}|(,\\d{4}\\s*\\d{4}|[1-3][0-9]\\d{3}|199\\d*)(\\,\\d{4}|[1-9][0-9]\\d*)?)
1551 : failed : failed : 0.214169766 (s) : ^(\\d{4}-\\d{2}-\\d{2})(\\.(\\d{2}))?$
1552 : failed : failed : 0.167864714 (s) : ^\\d{4}-\\d{2}-\\d{2}$
1553 failed : unparsable : 0 (s) : Please check your regex.
1554 : failed : failed : 0.258070675 (s) : \\d{2}\\.\\d{3}-\\d{2}\\.\\d{4}
1555 : failed : error init : 0.100153198 (s) : ^
1556 : failed : failed : 7.17956326 (s) : .[0-9]{2}/[0-9]{2}/[0-9]{4}
1557 : unparsable : unparsable : 0.099138808 (s) : ^(?P<date>\\\\d{4}-\\\\d{2}-\\\\d{2} )(?P<time>\\\\d{2}\\
1558 : failed : failed : 0.236394033 (s) : (^\\d{4}\\-\\d{2}\\-\\d{2}$)(|^\\d{4}\\-\\d{2}\\-\\d{3}$)(|^\\d{4}\\-\\d{2}\\-\\d{1}$)
1559 : failed : failed : 0.843935018 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2}\\s[0-9]{3}[0-9]{2}[0-9]{3}[0-9]{6}
1560 : unparsable : unparsable : 0.117502095 (s) : ^(?=(?!(|\\d|\\d.)\\d)(?=(?!\\d{2}\\d\\d)(?=(?!\\d{4}\\d)[a-z]{3}\\d{3}|[a-z]{4}\\d{2}\\d{2}|[a-z]{3}\\d{3}|[a-z]{3}\\d{3}|[a-
1561 : failed : failed : 0.729333004 (s) : \\
1562 failed : unparsable : 0 (s) : Please check your regex.
1563 failed : unparsable : 0 (s) : Please check your regex.
1564 failed : unparsable : 0 (s) : Please check your regex.
1565 failed : unparsable : 0 (s) : Please check your regex.
1566 failed : unparsable : 0 (s) : Please check your regex.
1567 : failed : failed : 0.341727221 (s) : /
1568 : unparsable : unparsable : 0.107334385 (s) : [
1569 : failed : failed : 2.225561171 (s) : /
1570 : failed : failed : 2.680678206 (s) : \\
1571 : failed : failed : 4.730765974 (s) : [\\w,-\\s]+
1572 : failed : failed : 0.519167276 (s) : [a-zA-Z][a-zA-Z0-9\\_]*
1573 : failed : failed : 5.356646212 (s) : ([a-zA-Z_][a-zA-Z0-9_]*[a-zA-Z])
1574 : failed : failed : 0.215453349 (s) : ([a-zA-Z_][a-zA-Z0-9_]*)
1575 : failed : pumping failed : 323.596260006 (s) : [a-zA-Z_][a-zA-Z0-9_]*[a-zA-Z0-9_]*
1576 : failed : failed : 1.010964629 (s) : ^[a-zA-Z_][a-zA-Z0-9_]*$
1577 : failed : failed : 18.65156095 (s) : \\b[A-Za-z_][A-Za-z0-9_]*\\b
1578 : failed : failed : 0.946832655 (s) : ^[a-z][a-z_0-9]*$
1579 : failed : failed : 0.179632151 (s) : ^[A-Z][a-z0-9_]*$ The second thing is to generate a regex for the input. Answ
1580 : failed : failed : 0.278299215 (s) : string identifier = \"some-id-1; some-id-2\";    string pattern = @\"^[a-zA-Z0-9_]+
1581 : unparsable : unparsable : 0.107141023 (s) : (?0.1)([1346]|[10])(?0.2)([1-9]|1[0-9]|2[0-4]|2[0-1])
1582 : failed : failed : 0.148124158 (s) : [13456][1-5][0-9]
1583 : failed : failed : 1.906805657 (s) : ([1-2][0-9]|[1-9])\\/[0-9]
1584 : failed : failed : 1.454152436 (s) : ([1346]\\\\d|[1-5]\\\\d)-([1-9]\\\\d|10)
1585 : failed : failed : 0.178763865 (s) : ^[\\d]*
1586 : failed : failed : 0.981847384 (s) : [1-5][0-9]|6[0-9]
1587 : unparsable : unparsable : 0.105848001 (s) : [012][0-2]|[12][0-2][0-9]|[012][0-2][0-9][0-2]|[012][0-2][0-9][0-2][0-9]|[012][0-
1588 : failed : failed : 0.4943005 (s) : ([0-9]{1,2})-?([0-9]{1,2})
1589 : failed : failed : 1.885021394 (s) : [1-9] 0-9|[1-9][0-9]|1[0-9]
1590 : failed : failed : 2.218582543 (s) : (\\d+)[a-z]*[a-z]*|1[0-3]*[0-9]|40[0-9]
1591 : failed : failed : 1.787106067 (s) : [A-Z]
1592 : failed : failed : 0.113181565 (s) : ^[A-Za-z]$
1593 : failed : failed : 3.520861119 (s) : ([A-Z][a-z]+)
1594 : failed : failed : 1.990667748 (s) : ([A-Z]{1})[A-Z]{1}
1595 : unparsable : unparsable : 0.128725472 (s) : \\p{Lu}
1596 : unparsable : unparsable : 0.08934588 (s) : ^(?=[a-zA-Z]*?[A-Z])(?=.*[0-9])(?=.*[.])(?=.*[])[a-zA-Z0-9.]*$
1597 : failed : failed : 4.731257856 (s) : ^[A-Z]+$
1598 : failed : failed : 2.033558115 (s) : ([A-Z])
1599 : failed : failed : 1.087638139 (s) : [A-Z]
1600 : failed : failed : 0.249402894 (s) : [a-eA-E]
1601 : failed : failed : 46.121263704 (s) : (?<![0-9]).?(?![0-9]%?)[0-9,.]+$
1602 : failed : failed : 0.997085108 (s) : ^(-?[0-9]{1,2})\\.([0-9]{1,2})\\,([0-9]{1,2})$
1603 : failed : failed : 10.107638513 (s) : [0-9]{2}[.,][0-9]{3}
1604 : failed : failed : 0.514051556 (s) : /^[0-9]+
1605 : failed : failed : 15.049266018 (s) : ([0-9.]+)$
1606 : failed : failed : 26.108010259 (s) : [0-9]{1,2}\\.[0-9]{1,2}\\.[0-9]{1,2}\\.[0-9]{1,2}$
1607 : failed : failed : 0.153462936 (s) : \\d+,\\d+\\.\\d{2}
1608 : failed : failed : 0.300657383 (s) : ^\\d+,\\d{2}\\d*(\\.\\d+)?$
1609 : failed : failed : 0.342114045 (s) : ^\\$[\\d][\\d,.]*$
1610 : failed : failed : 0.829301997 (s) : ^[1-9][0-9]*(,[0-9]{3})*$
1611 failed : unparsable : 0 (s) : Please check your regex.
1612 failed : unparsable : 0 (s) : Please check your regex.
1613 failed : unparsable : 0 (s) : Please check your regex.
1614 failed : unparsable : 0 (s) : Please check your regex.
1615 : unparsable : unparsable : 0.094367754 (s) : (
1616 failed : unparsable : 0 (s) : Please check your regex.
1617 : failed : failed : 2.913428336 (s) : /
1618 failed : unparsable : 0 (s) : Please check your regex.
1619 : failed : failed : 1.427333234 (s) : /
1620 failed : unparsable : 0 (s) : Please check your regex.
1621 : failed : failed : 0.751473525 (s) : (1) /(1|2|3|4|5|6|7)&quot;
1622 : failed : failed : 1.341768865 (s) : \\b(?<=\\b|[a-zA-Z])
1623 : unparsable : unparsable : 0.08711908 (s) : ?(?P<number>\\d+[ &quot;-&quot; ]?)+
1624 : failed : failed : 1.70493901 (s) : [^,](\\d{1,3}[,\\s]\\d{3}[,\\s]\\d{3})(\\&quot;/\\&quot;)?
1625 : failed : failed : 0.872255501 (s) : ^\\(\\d{1,3}\\)-(\\d{1,3})-\\d{1,2}$
1626 : unparsable : unparsable : 0.057125775 (s) : (^|&quot;)(
1627 : failed : failed : 0.30078911 (s) : (^\\d{1,4} )   ( & ( \\d{3} )? )   ( - ( \\d{3} )? )?   $
1628 : failed : failed : 0.75834906 (s) : ^(\\+[-\\d]{1})?[-\\d]{5}$
1629 : failed : failed : 0.274240785 (s) : &quot;-\\d{3}\\-&quot;
1630 : unparsable : unparsable : 0.093733275 (s) : (\\(+)(.*\\))
1631 : failed : failed : 0.168176238 (s) : (\\d)?( [a-zA-Z])?
1632 : failed : error init : 0.107543206 (s) : (?<![A-Z])|(?<![a-z])
1633 : failed : failed : 0.236990811 (s) : ^[A-Za-z0-9 ]*$
1634 : failed : timeout : 600 (s) : ([a-zA-Z0-9]+-){6}
1635 : unparsable : unparsable : 0.100015049 (s) : ^[a-zA-Z0-9]*$ | ^[a-zA-Z0-9]*$This generates two regular expressions^[a-zA-Z0-
1636 : failed : failed : 14.280826764 (s) : ( [A-Za-z0-9]|[0-9] )
1637 : failed : failed : 19.88639024 (s) : \"[A-zA-Z]+\"
1638 : failed : failed : 0.107354913 (s) : [a-zA-z0-9]
1639 : failed : failed : 0.40201155 (s) : a^2b^2c^2 ( - the ^ and $ sign are optional )
1640 : failed : failed : 1.278508914 (s) : [0-9][0-9a-zA-Z]{3,}
1641 : unparsable : unparsable : 0.079190994 (s) : ^(https
1642 : unparsable : unparsable : 0.085878767 (s) : /\\s+((?<id>\\d+)\\.
1643 : unparsable : unparsable : 0.088382696 (s) : (
1644 : unparsable : unparsable : 0.089261842 (s) : /^http[s
1645 : unparsable : unparsable : 0.063819338 (s) : (?<=^ht
1646 : failed : pumping failed : 67.772583653 (s) : [0-9]+[a-zA-Z]+[a-zA-Z0-9]+
1647 : failed : failed : 0.940110768 (s) : /[\\w\\d-]+\\.[\\w\\-\\.]+\\/article[\\w\\d-]+
1648 : failed : error init : 0.087139257 (s) : ^
1649 : unparsable : unparsable : 0.069653334 (s) : /^http[s
1650 : failed : failed : 0.674210611 (s) : (?<id>\\d+)
1651 : failed : failed : 0.77159259 (s) : \\d{5}(-\\d{4})?
1652 : failed : failed : 0.744755655 (s) : (?<zip>\\d{5})(?<extension>\\w\\d{4})
1653 : failed : failed : 0.477666171 (s) : \\d{5}
1654 : failed : failed : 0.487359232 (s) : (\\d{3}-\\d{3}-\\d{6})  [^0-9]  (.*)
1655 : failed : failed : 0.767940381 (s) : \"^[A-Z]{2}\\d{3}[A-Z]{2}[A-Z]{2}[A-Z]{5}$\"
1656 : failed : failed : 0.989195153 (s) : \\d{4}[A-Z]%4
1657 : failed : failed : 0.658246357 (s) : \\d{2}-\\d+-\\d{4}
1658 : unparsable : unparsable : 0.074379344 (s) : \\d{5}[-\\s]?\\d{4}[-\\s]?\\d{3}[-\\s]?\\d{2}[-\\s]?\\d{1}|\\d{4}[-\\s]?\\d{3}[-\\s]?\\d{2}[-\\s]?\\d{1}|\\d{3}[-\\s]?\\d{2}[
1659 : failed : failed : 0.365421391 (s) : The following RegEx can be used to generate the patte
1660 : failed : failed : 0.7164607 (s) : [Regex]^[A-Z]{3}[0-9]{3}[A-Z]{3}[0-9][0-9][A-Z]{4}$
1661 : failed : failed : 2.714853113 (s) : ^[^( ]*
1662 : failed : pumping failed : 25.371846093 (s) : ^.*a.*b.*c.*d.*e.*$
1663 : failed : failed : 1.215158244 (s) : \\d{3,}
1664 : failed : failed : 4.225827564 (s) : ^.*<
1665 : unparsable : unparsable : 0.081563196 (s) : (?<=^.*?)(?<![a-zA-Z0-9\\s\\-\\,\\.\\s_])[\\w\\s\\-\\,\\.\\s_\\w]+(?=\\s[a-zA-Z0-9\\-\\,\\.\\s_]\\s*$
1666 : failed : failed : 0.466987764 (s) : [^\\w\\s]+
1667 : unparsable : unparsable : 0.062899977 (s) : \\<[^>]*>\\s*\\[(.*?)\\]\\s*\\<[^>]*>\\s*\\{(.*?)\\}
1668 failed : unparsable : 0 (s) : Please check your regex.
1669 : failed : failed : 1.383973849 (s) : [\\s\\W+\\s\\W+\\s]+
1670 : failed : failed : 0.152262698 (s) : var reg1 = new RegExp(\"^[^\\\\s]*$\", \"g\");  // ^ Start of string var reg2 = new RegExp(/[\\\\w\\\\d_]/g, \"g\"); // All tags in first submatche var reg3 = new RegExp(/[\\\\s\\\\w\\\\d_]/g, \"g\"); // All attributes in second one
1671 : failed : failed : 0.760312617 (s) : /^[\\w\\s]+[a-z]{1,2}\\s[\\w\\s]+[a-z]{1,2}[\\w\\s]+[A-Z]{1,2}$
1672 : unparsable : unparsable : 0.056457713 (s) : (?i)(^|[^a-zA-Z0-9, ])(?=.*[a-zA-Z0-9])(?=.*[, ])(?=.*[,.])(?=.*[
1673 : failed : failed : 0.711824016 (s) : ^[A-Za-z][a-z\\s]{0,9}\\s*[A-Za-z]$
1674 : failed : failed : 0.739138365 (s) : ^([A-Z][a-z])([A-Z][a-z])$
1675 : failed : failed : 3.030558334 (s) : [^w][^W][^d][^D][^e][^E][^i][^I][^o][^O][^z][^Z]*
1676 : failed : failed : 1.278184267 (s) : (?i)(^|\\s)^([^\\s]{1})([^\\s]{1})[^\\s]*
1677 : failed : failed : 0.171043096 (s) : ^(?<firstname>\\w+[.-]?\\w+){5}[.-]?\\w+$
1678 : unparsable : unparsable : 0.127825167 (s) : [^&quot;A-Za-z0-9\\.\\(\\)\\-,]
1679 : unparsable : unparsable : 0.063324893 (s) : ^(name|firstname|nam
1680 : unparsable : unparsable : 0.082124747 (s) : ^[A-Za-z][A-Za-z0-9\\s\\._,()-]*(?<![A-Za-z0-9\\s\\._,()-])?[
1681 : failed : failed : 5.011076265 (s) : [State]\\.[A-Z]{3}\\.\\d{1,2}
1682 : unparsable : unparsable : 0.077654837 (s) : (\\b\\w{3}\\b
1683 failed : unparsable : 0 (s) : Please check your regex.
1684 : failed : failed : 0.609116074 (s) : \\b\\w+
1685 : failed : failed : 0.730840317 (s) : \\d{1,2}[.]\\d{1,2}[.]\\d{1,2}[.]\\d{1,1}[.]?
1686 : unparsable : unparsable : 0.098690067 (s) : import re state_abbreviation = re.compile(r\"(\\w+)\\s
1687 : unparsable : unparsable : 0.10871981 (s) : [(?<=^|\\.)\\b(?<!\\.)(?<!\\.)[a-z]+(?!\\.)\\b(?<!\\.)[a-z]+(?!\\.)\\b[a-z]+(?!\\.)
1688 : failed : failed : 0.200056146 (s) : r'^[A-N][A-Z][A-Z][-\\.\\s]*$' ```python # Importing re module import re from typing import List
1689 : failed : failed : 34.426995958 (s) : .{1,3}[A-Z]\\.
1690 : failed : failed : 1.92504383 (s) : \\b(?i)\\b
1691 : unparsable : unparsable : 0.099393605 (s) : ^(?P<fiscalCode>[A-Za-z0-9-_]{3})/
1692 : unparsable : unparsable : 0.078780685 (s) : \\(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})
1693 : unparsable : unparsable : 0.087721057 (s) : (?<=^(?<fiscal_code>[0-9]{3})\\s\\(?[0-9]{3}\\)$)(?<=^(?<year>[0-9]{4})\\s\\(?[0-9]{4})\\s[0-9]{1}$)(?<=^(?<date>[0-9]{1,2})\\s[0-
1694 : failed : failed : 10.118303124 (s) : (?<=fiscal_code_code_code_code_code)
1695 : unparsable : unparsable : 0.106897798 (s) : ^(?P<country>.*)(?P<type>.*)(?P<code>.*)$
1696 : failed : failed : 0.806078278 (s) : \\d{2},\\s\\d{2}-\\d{2}-\\d{2}
1697 : failed : failed : 0.143765045 (s) : ^[A-Z]{1}[0-9]{1}[A-Z]{1}$
1698 : failed : failed : 0.854253822 (s) : ^[0-9]\\d?$|^[0-9]$
1699 : failed : failed : 0.206599219 (s) : \\d{2}-\\d{4}-\\d{2}
1700 : failed : failed : 39.305040557 (s) : ([0-9]{2}[a-z]{1}[a-z0-9]+)
1701 : unparsable : unparsable : 0.070051149 (s) : \\b((1\\d|2[0-3
1702 failed : unparsable : 0 (s) : Please check your regex.
1703 : failed : failed : 2.894275009 (s) : /^
1704 : failed : failed : 2.906506053 (s) : ^.*?([0-7]\\d{1,2}).
1705 : failed : failed : 0.16699736 (s) : ^[0-3]\\d?[0-5]\\d?$
1706 : unparsable : unparsable : 0.095861992 (s) : - (0[1-9]|1[012])[0-5]     1st set of numbers must be 0-9 - ([0-5])(1[012])[0-5]     8th set of numbers must be in the range 0-5 - (1[0-9])(1[012])[0-5]     2nd set of numbers must be in the range 0-9 - (1
1707 : failed : failed : 8.359831938 (s) : \\d\\d?(?=h(?=m(?=s))|\\d\\d|0[1-9]|1[0-2])[^a-zA-Z]*/
1708 : failed : failed : 15.484455006 (s) : (^[0-9]{1,2})?[0-9]{1,2}[.][0-9]{1,2}
1709 : failed : failed : 2.373220259 (s) : (8-3)\\d{1,2}
1710 : failed : failed : 5.57177816 (s) : ^(?!.*minute?)(?!.*minute?hour?)(?!.*hour?minute?second?)(?!.*second?minute?hour?minute?second?hour?minute?second?)$
1711 : failed : failed : 27.460291749 (s) : (?<!\\d\\d)(?<!\\d)1\\d\\d(?!\\d)
1712 : failed : failed : 0.626581942 (s) : ^\\d{4}\\.?\\d{0,2}\\/\\d{1,2}\\/\\d{0,2}\\s?[a-zA-Z_][a-zA-Z0-9_.-]*$
1713 : unparsable : unparsable : 0.07613978 (s) : r\"((^|[{}])\\s+|\\s+)((\\d{1,2})/(\\d{1,2})/(\\d{4}))(,(\\d{1,2})\\s+)?(\\w
1714 : unparsable : unparsable : 0.091606012 (s) : (?x)(?i)(^(
1715 failed : unparsable : 0 (s) : Please check your regex.
1716 : unparsable : unparsable : 0.060203859 (s) : (ht
1717 : failed : failed : 1.405007827 (s) : (?<=^|\\s)(0[1-9]|1[012])/(\\d\\d)/(\\d\\d)/(\\d\\d)/(\\d\\d)/(\\d\\d)/($|\\s)
1718 : failed : failed : 1.236093416 (s) : \\b
1719 : failed : failed : 0.166577124 (s) : ^[12]\\d{3}
1720 : failed : failed : 0.538181342 (s) : ^([13]\\d{2}\\/02\\/01[13]\\d{2}\\/19)$|^([13]\\d{2}\\/02\\/02[13]\\d{2}\\/19)$
1721 : unparsable : unparsable : 0.080088534 (s) : + (0+)
1722 : failed : failed : 1.292121485 (s) : [1-9][0-9]|0[0-9]
1723 : failed : failed : 0.265289963 (s) : ^(?=.{0,32}$)([0-9]|1[012])\\d*
1724 : failed : failed : 3.248330516 (s) : \\S*\\d+\\s*
1725 : failed : failed : 0.765977184 (s) : ^\\d+$
1726 : failed : failed : 1.913605982 (s) : [1-9][0-9][0-9]|[1-9]0[0-9]
1727 : failed : failed : 7.485405531 (s) : (?=[0-9]+)
1728 : failed : failed : 0.28869391 (s) : $0-9\\d*
1729 : failed : failed : 0.61245094 (s) : ^[+-]?\\d+(,\\d+)*$
1730 : failed : failed : 0.534178556 (s) : /^[1-9]\\d{0,3}
1731 : failed : error init : 0.129342989 (s) : | 0 - 50 (%) | 51 - 100 (% )
1732 : unparsable : unparsable : 0.079630026 (s) : [A-Za-z0-9\\(\\)\\[\\]\\{\\}\\(\\)\\%\\-\\_
1733 : failed : failed : 8.006327273 (s) : [0-99]\\.
1734 : failed : failed : 1.744583679 (s) : (?<percent>\\d+)%
1735 : failed : failed : 0.513531432 (s) : Reg
1736 : failed : failed : 0.118632482 (s) : \"5-50% [a-z]\"
1737 : failed : failed : 0.54162475 (s) : (0 to 100)
1738 : failed : failed : 0.146518982 (s) : 0<=x<=100
1739 : failed : failed : 15.561789783 (s) : [^0-9]?([0-9]+[0-9]*)
1740 : failed : failed : 0.769459595 (s) : (1-6)|(7-24)
1741 : failed : failed : 0.177685846 (s) : ^MMDDYYYY[0-9A-Z]{3}[0-9A-Z]{3}[0-9A-Z]{3}[0-9A-Z]{3}$
1742 : failed : failed : 1.029471255 (s) : \\b[0-9][0-9][0-9][0-9][0-9][0-9][0-9]\\d\\b
1743 : failed : failed : 2.95732109 (s) : [0-9]{3}-[0-9]{2}-[0-9]{4}
1744 : failed : failed : 0.200679343 (s) : ^[1-9]\\d{4}[-0-9]\\d{2}[-0-9]\\d{2}[-0-9]\\d{2}[-0-9]\\d{4}$
1745 : failed : failed : 0.135048112 (s) : ^(?=[0-9]{8}$)(?=[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{3})(?=.*[0-9]{5})$
1746 : unparsable : unparsable : 0.058486282 (s) : ^([0-9]{1,2})(?=[0-9]{2})(?=[0-9]{4})(?=[0-9]{4})(?=[0-9]{4})(?=[0-9]{4}))$
1747 : failed : failed : 0.273978384 (s) : ^[0-9]{4}-[0-9]{5}-[0-9]{4}-[0-9]{2}$
1748 : failed : failed : 1.339091151 (s) : (9-15)-(0-9)
1749 : failed : failed : 0.442663404 (s) : \\\\d{4}\\\\-\\\\d{2}\\\\-\\\\d{2}\\\\-\\\\d{4}
1750 : failed : failed : 0.743713403 (s) : [5][0-9][0-9][1-3][0-9][0-9][1-9][0-9][0-9]
1751 : failed : error init : 0.17781083 (s) : ^
1752 : failed : failed : 0.142337603 (s) : \\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d
1753 : failed : failed : 1.019519639 (s) : [0-9]{7}
1754 : failed : failed : 0.181914965 (s) : ^\\d{1,9}$
1755 : failed : failed : 0.184150822 (s) : 0-99999.
1756 : failed : failed : 0.81685593 (s) : (1)[0-9]{8}
1757 : failed : failed : 0.154693731 (s) : ^[0-9]{7}$
1758 : failed : failed : 0.166247777 (s) : ^\\d{7}$
1759 : failed : failed : 0.67210069 (s) : \\b(?![1-9]{0,9}\\b)\\d{7}\\b(?![1-9]{0,9}\\b)
1760 : failed : failed : 0.418813022 (s) : ^[a-zA-Z]{1,30}[a-zA-Z0-9]{1,4}$
1761 failed : unparsable : 0 (s) : Please check your regex.
1762 : unparsable : unparsable : 0.100802924 (s) : [a-zA-Z0-9_\\- ]+
1763 : failed : failed : 0.542943429 (s) : ^[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)*$
1764 failed : unparsable : 0 (s) : Please check your regex.
1765 : failed : failed : 2.680584952 (s) : [A-Za-z0-9_\\.-]*
1766 : failed : failed : 5.656375237 (s) : ^[a-zA-Z0-9_-]+$
1767 : failed : failed : 0.556028402 (s) : [A-Za-z][A-Za-z0-9_]{1,30}
1768 : failed : failed : 0.118635087 (s) : \\w-\\w-\\w*
1769 : failed : failed : 2.593804136 (s) : \\w{1,30}\\-{1,3}\\-{1,3}\\w{1,30}
1770 : failed : failed : 0.452077072 (s) : [a-zA-Z0-9_-]{1,63}
1771 : failed : failed : 0.279694497 (s) : ^\\d{1,4}-(\\d{1,2})\\d{2}$
1772 : failed : failed : 0.86647157 (s) : \\s\\d{2,}\\s
1773 : failed : failed : 0.429688798 (s) : \\bMonthName\\s+\\((\\d{1,3})\\)
1774 : unparsable : unparsable : 0.084157113 (s) : (^[a-zA-Z]{2,}[0-9]{3}(-[0-9]{2,})?$|^[a-zA-Z]{3}[0-9]{3}(-[0-9]{2,})?$|^[a-zA-Z]{3}
1775 : failed : failed : 0.142924492 (s) : ^[0-9]{4}(,?[0-9]{3})?[0-9]{2}$
1776 : failed : failed : 0.310018012 (s) : r'^[0-9]{1,2}\\s[A-Za-z,\\s]+\\s[0-9]{4}$'
1777 : failed : failed : 1.22022957 (s) : (?<month>\\d{1,2})(?<year>\\d{4})
1778 : failed : failed : 14.473463166 (s) : (([A-Z]{2})(\\d{2})[,]\\d{4})
1779 : failed : failed : 0.535804642 (s) : ^[A-Za-z]+\\s(\\d+)\\s-\\s(\\d+)
1780 : failed : failed : 0.201764205 (s) : ^[0-9]{2}.[0-9]{2}.[0-9]{4}$You can even use the.NET library to validate this in a much easier way.
1781 : failed : failed : 4.913571748 (s) : ^[a-zA-Z0-9._-]+$
1782 : failed : failed : 1.271427213 (s) : ^[A-Za-z][a-z0-9]*[A-Za-z]$
1783 : unparsable : unparsable : 0.116462298 (s) : ```full_name_regex = re.compile(r'^[A-Za-z ]+$', re.I)first_name_regex = re.compile(r'^[A-Za-z ]+', re.I)last_name_regex = re.compile(r'^[A-Za-z ]+
1784 : failed : failed : 0.175951127 (s) : ^[A-Z][a-z]+$
1785 : failed : failed : 1.110795533 (s) : \\w+[ -]\\w*
1786 : failed : failed : 0.137563993 (s) : ^[a-zA-Z\\d]+$
1787 : failed : failed : 3.254474281 (s) : ^[a-z][A-Z][a-z0-9]*$
1788 : failed : pumping failed : 61.836095154 (s) : [^\\\\s]+(\\\\s[^\\\\s]++)+[^\\\\s]
1789 : failed : error init : 0.107482513 (s) : (\\w{1,} \\w{1,} )*?
1790 : failed : failed : 11.832154704 (s) : ^[A-Z][a-z]+ [A-Z][A-Z][a-z]+$
1791 : unparsable : unparsable : 0.098767754 (s) : [0-9]{6,12,}
1792 : failed : failed : 0.579547655 (s) : '^#
1793 : failed : failed : 0.118393675 (s) : ^[0-9a-f]+$
1794 : failed : failed : 0.299852095 (s) : ^[^#]{1,25}[#]?$
1795 : failed : failed : 3.855121116 (s) : ^(?=.*\\d)(?=.*[a-zA-z]).*$
1796 : unparsable : unparsable : 0.095881488 (s) : ^[a-zA-Z0-9#]\\{(1,9)\\}\\r?$^[a-zA-Z0-9#]\\{(1,9)\\}\\r?$
1797 : failed : failed : 0.514669574 (s) : \\b   [0-9a-fA-F]{3}  # match 3 hex digits (0-9, a-f, A-F)   
1798 : failed : pumping failed : 41.915466449 (s) : (?<=^|[^#]*)(#?)(?=\\S*$)
1799 : failed : failed : 11.244621755 (s) : '^#'|[^#]Regex for the described answ
1800 : failed : error init : 0.088975536 (s) : ^
1801 : failed : failed : 0.548496839 (s) : \\/\\d{4}\\/\\d{2}\\/\\d{2}
1802 : failed : failed : 0.176158907 (s) : YYYYDDD
1803 : failed : failed : 11.20806535 (s) : yy(0|1)0?(1|2)0?(3|4)0?(5|6)0?
1804 : failed : failed : 0.232227941 (s) : ^Y\\d\\d\\d\\d\\d\\d\\d$
1805 : failed : failed : 0.163170985 (s) : yyyymmdd
1806 : failed : failed : 0.732755443 (s) : \\d{4}
1807 : failed : failed : 0.67330749 (s) : \\d{4}-\\d{2}\\d{2}
1808 : failed : failed : 0.736158966 (s) : \\d{4}-\\d{2}\\d{2}-\\d{2}
1809 : failed : failed : 0.907774545 (s) : \\d{4}
1810 : failed : failed : 1.029387248 (s) : [17][0-2][0-9][0-9][00][00][0-9]
1811 : failed : failed : 0.926731975 (s) : [\\d]{4}-[\\d]{2}-[\\d]{2}
1812 : failed : failed : 0.282518957 (s) : ^\\s*[0-9]{1,9}\\s*$
1813 : failed : failed : 0.201396817 (s) : ^(\\d{3})\\-\\d{2}\\-\\d{4}$
1814 : failed : failed : 0.237169505 (s) : \\d{5}-\\d{3}-\\d{2}-\\d{4}-\\d{4}
1815 : failed : failed : 3.029372023 (s) : ^(?=.*[1-9]\\d{3})(?=.*[1-9])(?=.*[1-9]\\d)(?=.*\\d)(?=.*\\d{2}-\\d{2}-\\d{4})(?=.*\\d{4}$)[0-9-]{8}$
1816 : failed : failed : 0.311960179 (s) : ^\\d{3}-\\d{2}-\\d{4}$
1817 : failed : failed : 0.209052153 (s) : ^\\d{3}-(?!-\\d{2}-)?\\d{6}$
1818 : failed : failed : 0.685892317 (s) : ^\\d{3}-\\d{2}-\\d{4}$
1819 : unparsable : unparsable : 0.101498597 (s) : '([\\d-]{3}[\\d-]{3}[\\d-]{4}|[\\d-]{3}[\\d-]{3}[-][\\d-]{4}|[\\d-]{4}[-][\\d-]{4}|[\\d-]{4}[\\d-]{3}[-][\\
1820 : failed : failed : 1.474099018 (s) : ^(?=.*[0-9])(?=.*[a-z])(?=.*[^0-9]).{3}$
1821 : failed : failed : 2.002933988 (s) : Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answ
1822 : failed : failed : 1.251799999 (s) : Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answ
1823 : failed : failed : 1.315927415 (s) : Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answ
1824 : failed : failed : 2.116965934 (s) : Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answ
1825 : failed : failed : 1.240856255 (s) : Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answ
1826 : failed : failed : 2.959219114 (s) : Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answ
1827 : failed : failed : 1.926495358 (s) : Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answ
1828 : failed : failed : 2.295921007 (s) : Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answ
1829 : failed : failed : 1.918509424 (s) : Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answ
1830 : failed : failed : 1.376187598 (s) : Matches positive whole numbers with exactly zero or two decimal points if a. is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25.Generate a RegEx for this description. Answ
1831 : failed : failed : 19.764443753 (s) : [^a-zA-Z0-9_]+
1832 : failed : failed : 0.686397021 (s) : AT\\W+
1833 : failed : failed : 0.573971803 (s) : ^[a-zA-Z0-9\\s_\\-]*$
1834 : failed : failed : 3.172208459 (s) : [^a-zA-Z0-9]
1835 : failed : failed : 0.249124142 (s) : [^a-zA-Z0-9]
1836 : failed : failed : 0.171705677 (s) : ^[A-Z0-9-_]{7,11}$
1837 : failed : failed : 0.165775131 (s) : [^\\w\\d\\s]
1838 : failed : failed : 0.661590209 (s) : [^a-zA-Z0-9]
1839 : failed : failed : 2.764518998 (s) : [^a-zA-Z0-9]
1840 : failed : failed : 0.239904207 (s) : ^[A-Za-z0-9_-]{6,20}$
1841 : failed : failed : 0.218117278 (s) : ^(0?[11]|[12]\\d|3[01])[ -.]0?[1-9]\\d{3}\\s
1842 : unparsable : unparsable : 0.098434679 (s) : /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$|^(0[1-9]|1[012])\\/\\d{1,2}$|^(1[0-2]|0[1-9])\\/\\d{2,3}$|^([1-9]\\d|10(
1843 : failed : failed : 11.547159369 (s) : (?i)^[a-z][a-z0-9][a-z0-9\\-\\.]*[a-z0-9]\\..*[a-z]$
1844 : failed : failed : 1.865518984 (s) : \\b(0[1-9]|1[0-2])[0-9]{3,4}\\b
1845 : failed : failed : 0.322081091 (s) : ^(0[1-9]|1[0-2])[0-9] (0[1-9]|1[0-2])(0-3)[0-9]$      ^(0[1-9]|1[0-2])(0-3)[0-9]$
1846 : failed : failed : 1.312667921 (s) : \"^[0-9]{1,2}[0-9]{2}[0-9]{2}$\"\"\"\"
1847 failed : unparsable : 0 (s) : Please check your regex.
1848 : unparsable : unparsable : 0.071692061 (s) : (?P<month>[A-Fa-f0-9]{2})\\s(?P<day>[A-Fa-f0-9]{2})\\s(?P<year>[0-9]{4})
1849 : unparsable : unparsable : 0.071403531 (s) : [N][D][M]Y [J][U][L]S [T][I][N] [T][I][N][S] [T][I][N][S][M][D][M] [M][T][T][T][T] [T][T][T][T][T][T][T][T][T] [T][T][T][
1850 : unparsable : unparsable : 0.06150786 (s) : var regex = new RegExp(  '^\\d{1,2}
1851 : failed : pumping failed : 71.227117476 (s) : [0-9]+,
1852 : failed : failed : 0.199343251 (s) : [0-9]{1,10}
1853 : failed : failed : 531.372411571 (s) : ([-0-9]+\\.[0-9]+|[0-9]+)(,[0-9]+)?
1854 : unparsable : unparsable : 0.084567372 (s) : ([^(,\"0-9]+)(,\\1)+*1
1855 : failed : failed : 0.562826413 (s) : (?<match>^[\\d\\\\+\\\\*]{1,20}$)Examp
1856 : failed : failed : 0.878940009 (s) : ^[0-9]+\\,.*$
1857 : failed : failed : 0.166762029 (s) : ^[\\d,]*
1858 : unparsable : unparsable : 0.069483305 (s) : [0-9][0-9]?*.[0-9][0-9]?*[0-9][0-9]?[0-9][0-9]$
1859 : failed : pumping failed : 178.744322308 (s) : (\\d+,|\\+1)
1860 : failed : failed : 0.820550649 (s) : ^[1-9][0-9]*(?<!\\.)$
1861 : failed : failed : 0.294758236 (s) : (at least one character, maximum of 10)
1862 : failed : failed : 3.910876344 (s) : [^\\s]*
1863 : failed : error init : 0.119860421 (s) : ^
1864 : failed : failed : 0.753860154 (s) : ^[a-zA-Z0-9_\\.-]{1,63}$
1865 : failed : failed : 10.860019887 (s) : [a-z][0-9]{3}[a-z]
1866 : failed : failed : 2.030807885 (s) : \\A(?=\\S*[A-Z])(?=\\S*\\d)(?=\\S*\\S)\\S*$
1867 : failed : failed : 0.512465096 (s) : \"^[A-Za-z0-9 ]
1868 : failed : pumping failed : 243.352964091 (s) : .*[0-9].*
1869 : unparsable : unparsable : 0.062156124 (s) : (?<=\\d{4})([A-Z]{1}[a-z]{1}[A-Z]{1}[a-z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z]{1}[A-Z
1870 : failed : failed : 3.407296677 (s) : \\bT[0-9]*\\b
1871 : failed : failed : 1.152731863 (s) : (\\d)\\.?\\d*
1872 : failed : failed : 4.391163704 (s) : \\d+(\\.\\d+)? | [^\\d.]
1873 failed : unparsable : 0 (s) : Please check your regex.
1874 : failed : failed : 1.258339485 (s) : /-?\\d+
1875 : failed : failed : 0.82369651 (s) : \\b(?<![\\d.])0(?![\\d.])\\d*(?![\\d.])\\b
1876 : failed : failed : 0.530601007 (s) : ^\\d+(\\.\\d+)?$
1877 : failed : pumping failed : 69.366614957 (s) : ^ +([0-9]*[0-9.]+) +$
1878 : failed : failed : 7.533891006 (s) : ^\\d+\\.\\d+$
1879 failed : unparsable : 0 (s) : Please check your regex.
1880 : failed : failed : 3.149087683 (s) : \\d+\\.\\d+
1881 : failed : failed : 0.19117205 (s) : ^\\d{1,2}\\,\\d{3}$
1882 failed : unparsable : 0 (s) : Please check your regex.
1883 : failed : failed : 0.403382597 (s) : r'^\\d+\\.?\\d{0,2}$'
1884 : failed : failed : 7.919377019 (s) : \\d{1,3}(,\\d{3})*|\\d{3,4}(,\\d{3})* or \\d{3,4}(,\\d{1,3})
1885 : failed : failed : 0.647571727 (s) : 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6
1886 : failed : failed : 0.17410992 (s) : ^[1-9][0-9]?\\d*\\.\\d+$
1887 : unparsable : unparsable : 0.075589149 (s) : (?<first_number>\\d+\\.\\d+)
1888 : unparsable : unparsable : 0.10481157 (s) : r'^(?P<number>-?[0-9]+[,]?[0-9]{0,2}$)'
1889 : failed : failed : 1.02268681 (s) : (\\d{3}),(\\.\\d{3})?
1890 : failed : failed : 15.8294252 (s) : [0-9]{3}\\.{0,1}[0-9]{3}
1891 : failed : error init : 0.112103676 (s) : (?i)^
1892 failed : unparsable : 0 (s) : Please check your regex.
1893 : failed : failed : 0.290440531 (s) : \\b\\d{4}-(0?[1-9]|1[012])-(1[0-3]|0?[1-9])[-/.]\\d{2}[-/.]\\d{2}[-/.]\\d{4}\\b
1894 : failed : failed : 0.455884091 (s) : %Y\\d{3}\\-(0?[1-9]|1[02])\\d{2}
1895 : failed : failed : 0.197569911 (s) : ^(0|[1-9])[0-9]{1,2}[1-9]\\d{3}-(0?[1-9]|1[012])$
1896 : failed : failed : 0.384500248 (s) : (with some formatting to get rid of the leading zeroes) /^(0[1-9]|[12][0-9]|3[01])/(2[0-9]|[03][01])/[0-9]{4}$/.test(date)
1897 : unparsable : unparsable : 0.073564587 (s) : (((?!^0{4}$)\\d{1,2}
1898 : failed : failed : 0.155203355 (s) : ^\\d{1,2}
1899 : failed : failed : 0.200781074 (s) : ^(0[1-9]|1[012])/
1900 failed : unparsable : 0 (s) : Please check your regex.
1901 : failed : failed : 0.473574609 (s) : `^\\d+\\.?\\d*$`
1902 : failed : error init : 0.10215724 (s) : ^
1903 : failed : failed : 11.930118291 (s) : (([0-9]|\\\\.[0-9]{1,2})[%]?)
1904 : failed : failed : 0.144423839 (s) : ^\\d+
1905 : unparsable : unparsable : 0.07080505 (s) : \\d*(\\.[\\d]+)?)$
1906 : failed : failed : 0.156241869 (s) : import re
1907 : failed : failed : 1.083149142 (s) : \\d+%|$
1908 failed : unparsable : 0 (s) : Please check your regex.
1909 : failed : failed : 0.24339333 (s) : `^[\\$\\d,\\.]+$`    This regex checks for a string that starts with either a dollar sign or a comma followed by one or more digits or a comma or a period. This is useful when you want to validate a user's input,
1910 : failed : failed : 8.01391909 (s) : ([0-9]{1,2})\\.([0-9]{1,2})([0-9]{1,2})\\.([0-9]{1,2})$
1911 : failed : failed : 1.907341661 (s) : \\b[A-Z]\\w*\\b
1912 : failed : failed : 0.160326398 (s) : ^[A-Z][a-z]*
1913 : failed : failed : 0.177313809 (s) : ^[A-Z]
1914 : failed : pumping failed : 101.144881726 (s) : .*[A-Z][0-9].*
1915 : failed : failed : 0.340657718 (s) : ^[A-Z][^0-9]*$
1916 : failed : failed : 0.23658981 (s) : ^[A-Z][a-z]*
1917 : failed : failed : 0.123409498 (s) : ^[A-Z][a-z]*
1918 : failed : failed : 0.36280485 (s) : ^[A-Z][a-z]+
1919 : failed : failed : 0.150244018 (s) : ^[A-Z]
1920 : failed : failed : 4.21008828 (s) : ^[A-Z][a-zA-Z0-9_]*$
1921 : failed : failed : 0.608251015 (s) : r'\\d+\\.\\d{3}'
1922 : failed : failed : 50.50957251 (s) : (^|\\\\.)(\\d{2})
1923 : failed : failed : 0.672899085 (s) : \\d+,\\d{3}
1924 : failed : failed : 2.201888461 (s) : \\d{1,3}\\.(\\d{3}|N/A)
1925 failed : unparsable : 0 (s) : Please check your regex.
1926 : failed : failed : 0.855677237 (s) : ([0-9]{1,3})(,[0-9]{3})?
1927 : failed : failed : 15.324928466 (s) : \\d+          \\,|\\d+
1928 : failed : failed : 0.772473068 (s) : ^\\d+\\.(\\d{3})$
1929 : failed : failed : 0.941622058 (s) : \\d{0,3}\\,\\d{3}
1930 : unparsable : unparsable : 0.055819959 (s) : \\b(\\d{1,3}
1931 : failed : failed : 0.614220734 (s) : ^[0-8]{1,9}(,[0-8]{1,9})*$
1932 : failed : failed : 1.05790488 (s) : \\d{1,9}[,0]{0,7}
1933 : failed : failed : 0.958360262 (s) : ^(1|2|3|4|5|6|7|8|9|99999999)[0-9]*$
1934 : failed : failed : 61.632357674 (s) : ^0|1|2|3|4|5|6|7|8|9999999$
1935 : failed : failed : 1.843907464 (s) : ([1-9][0-9]{0,8})
1936 : failed : failed : 0.282712139 (s) : ^[0-9]{1,9}(,[0-9]{1,9})*$
1937 : failed : failed : 1.24643343 (s) : /(^|,)0,?
1938 : unparsable : unparsable : 0.083854697 (s) : [0-9]{1,9]{1,9}
1939 : unparsable : unparsable : 0.089820759 (s) : (^
1940 : failed : failed : 12.334121841 (s) : r'[1,9][0-9]{1,9999999}'
1941 : failed : failed : 1.107861429 (s) : [A-Za-z0-9 ]+
1942 : failed : failed : 0.142884216 (s) : [A-Za-z0-9]+
1943 : failed : failed : 9.733172676 (s) : (?<!\\S)\\b[0-9]+\\b(?!\\S)
1944 : failed : failed : 1.83716623 (s) : \\s*[a-zA-Z\\s]*|[-_]*[a-zA-Z\\s]*
1945 : failed : failed : 0.202291673 (s) : ^[a-zA-Z0-9 ]*$
1946 : failed : failed : 0.134451314 (s) : [a-zA-z0-9]
1947 : failed : failed : 4.176210821 (s) : [0-9a-zA-Z ]*
1948 : failed : failed : 3.305155336 (s) : [A-Za-z\\d ]
1949 : failed : failed : 4.708033876 (s) : [a-zA-Z0-9 ]*
1950 : failed : pumping failed : 80.517680478 (s) : (.+?(\\d+)-(\\d+))
1951 : failed : failed : 0.635908727 (s) : /^\\d{1,8}
1952 : failed : failed : 0.695278644 (s) : ^\\d{2}-\\d{2}-\\d{4}|\\d{2}-\\d{4}-\\d{4}|\\d{2}-\\d{2}-\\d{4}$
1953 : failed : failed : 1.900808777 (s) : (?<!\\d)(\\d{3}\\-\\d{3}\\-\\d{4}\\d{4})
1954 : unparsable : unparsable : 0.071399784 (s) : (?<!\\+)\\(([0-9]{3}|[0-9]{3})
1955 : failed : failed : 0.207186329 (s) : ^\\d{9}-\\d{5}$
1956 : failed : failed : 1.42324579 (s) : r\"\\b\\d{1,3}-\\d{1,3}-\\d{1,3}\\d-\\d{1,3}-\\d{1,3}\\d{1,4}\\b\"
1957 failed : unparsable : 0 (s) : Please check your regex.
1958 : unparsable : unparsable : 0.102570775 (s) : (?<=^|\\.)[1-9][0-9]{2}(?(1)\\.[0-9]{1,3})?$
1959 failed : unparsable : 0 (s) : Please check your regex.
1960 : failed : failed : 102.731422493 (s) : [0-9]{2}-?[0-9]{4}|[0-9]{3}-?[0-9]{5}
1961 : failed : failed : 9.879381818 (s) : (?<currency>[A-Z]{3}[0-9]{3},?\\d{2})?(?<amount>\\d+)\\.(?<denomination>[A-Z]{3})
1962 failed : unparsable : 0 (s) : Please check your regex.
1963 : unparsable : unparsable : 0.061654745 (s) : (/[- ]?\\d\\d[,-\\.]\\d\\d[,-]\\d\\d$|[- ]?\\d\\d[,-]\\d\\d[,-]\\d1\\d\\d$|[- ]?\\d\\d[,-]\\d\\d[,-]\\d\\d[,-]\\d\\d$
1964 : failed : failed : 13.730322546 (s) : re = \"(?<![0-9a-zA-Z$,,.])[0-9]+(?![0-9,.,])\"
1965 : failed : pumping failed : 9.880782431 (s) : \\b(?=\\$?[,\\d]*\\b)(\\$?[,\\d]*[,\\d]*[\\d,\\d]*[\\d,\\d]*?)(?!.*[,\\d])
1966 : failed : failed : 0.470011768 (s) : r'^[\\w,.]+([\\d,.]+)?(\\$[\\d,.]+)?'
1967 : unparsable : unparsable : 0.068361985 (s) : *\\d\\.)?\\d*(,\\d*)?
1968 : failed : failed : 0.531616569 (s) : /^\\d{1,3}
1969 : unparsable : unparsable : 0.069337833 (s) : $((\\d{1,4})[.,]\\d{1,2}
1970 : unparsable : unparsable : 0.101273205 (s) : ([0-9]{0,3}[,.][0-9]{0,3}))?
1971 : failed : failed : 0.248021647 (s) : /
1972 : failed : failed : 2.0640798 (s) : \\
1973 : failed : failed : 1.553741497 (s) : /
1974 : unparsable : unparsable : 0.097090954 (s) : (
1975 : failed : failed : 0.816075478 (s) : /
1976 failed : unparsable : 0 (s) : Please check your regex.
1977 : failed : failed : 2.480922823 (s) : \\
1978 : failed : failed : 1.262316683 (s) : /
1979 : unparsable : unparsable : 0.067336725 (s) : (
1980 : failed : failed : 1.158479266 (s) : /
1981 : failed : failed : 0.776712777 (s) : \\
1982 : failed : failed : 1.364584781 (s) : \\
1983 : failed : failed : 0.893817399 (s) : \\
1984 : failed : failed : 1.079250431 (s) : @
1985 : failed : failed : 1.979164006 (s) : \\
1986 failed : unparsable : 0 (s) : Please check your regex.
1987 : unparsable : unparsable : 0.05458136 (s) : (
1988 : failed : failed : 2.760839897 (s) : \\
1989 : failed : error init : 0.096359183 (s) : ^
1990 : unparsable : unparsable : 0.082173799 (s) : [
1991 : failed : failed : 0.50226228 (s) : \\d{4}-\\d{2}-\\d{2} (\\w{3})\\d{2}
1992 failed : unparsable : 0 (s) : Please check your regex.
1993 : failed : failed : 0.254408447 (s) : \\d\\d\\d\\d\\d\\d\\d\\d [0-9]{4}[-]\\d{3}[-]\\d{2}[-]\\d{1}
1994 failed : unparsable : 0 (s) : Please check your regex.
1995 : failed : failed : 0.703326464 (s) : [12-31-21] (yyyy-dd-mm)
1996 : failed : failed : 0.800144646 (s) : ^[0-9]{3}[-][0-9]{3}[-][0-9]{4}$
1997 : failed : failed : 7.054713625 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2} A[0-9]{2}[0-9]{2}
1998 : unparsable : unparsable : 0.122338662 (s) : (?P<MM>0[1-9]|1[0-2])/(?P<DD>0[1-9]|1[0-2])/(?P<Y>19[0-2]|[0-9])
1999 : failed : failed : 1.752973751 (s) : \\d{4,6}(0[1-9]|[12][0-9]|3[01])[1-9]|(0[1-9]|1[012])[0-2]
2000 : failed : failed : 14.207852792 (s) : [0-9]{4}[-][0-9]{2}[-][0-9]{2}[0-9]{2}
2001 : failed : failed : 5.611677666 (s) : ^([1-9][0-9]*)\\.?[0-9]3[0-9]$
2002 : failed : failed : 0.404979328 (s) : # \\d{3}\\.\\d{3}\\.\\d{3}
2003 : failed : failed : 1.316430928 (s) : \\d{3}\\.?\\d{3}(\\d{3})?
2004 : failed : failed : 1.230052194 (s) : \\([0-9]{3}.[0-9]{3}.[0-9]{3}\\)
2005 : unparsable : unparsable : 0.049170317 (s) : \\d[0-9]*\\.?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0
2006 : failed : failed : 0.714541505 (s) : \\d{1,3}\\.\\d{3}
2007 : failed : failed : 0.323981399 (s) : r'^\\d+\\.?\\d*$'
2008 : failed : failed : 0.567984712 (s) : 0+[1-9]\\d 0+[1-9]\\d{0,3} 0+[1-9]\\d{0,3}\\.\\d+
2009 : failed : failed : 3.42686988 (s) : (0, 1000.00, 0.000, 0)
2010 : failed : pumping failed : 7.972066306 (s) : ([0-9]*[.][0-9]*[0-9]*[.][0-9]*[0-9]*[0-9]*)
2011 failed : unparsable : 0 (s) : Please check your regex.
2012 : failed : failed : 0.23532959 (s) : ^[+-]?\\d+\\.?[0-9]{3}(-[0-9]{3})?$
2013 : failed : failed : 1.989340843 (s) : [^-?\\d^]+|\\d+
2014 : failed : failed : 0.935682926 (s) : (^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$)
2015 : failed : failed : 0.187255506 (s) : ^[1-9]\\d{0,2}(,(1-9)\\d{0,2})?$
2016 : failed : failed : 0.796023589 (s) : \\d{1,3}?[\\d.\\,\\-]?
2017 : failed : failed : 0.215280135 (s) : \\b([0-9][0-9]?|3[0-1])0{3}\\b  -  \\b(0|[3][1-9]|[12][0-9]|30[0-2])0{2}\\bThe pattern match
2018 : failed : failed : 11.930593782 (s) : .{1,3}\\d{3}
2019 : failed : failed : 6.064012511 (s) : ^[0-9]+[.][0-9]{3}[0-9]$
2020 : failed : failed : 0.326744904 (s) : ^-?[0-9]*\\.[0-9]{1,3}?
2021 : failed : failed : 0.842153672 (s) : r'^(.*?)(\\D|$)(\\d{1,2}\\.)(\\d{0,1})\\.(0\\d{2}|1\\d{3})$'
2022 : failed : failed : 10.748108431 (s) : ^(?=.*\\d)(?=.*\\D)(?=.*[a-z])(?=.*[0-9])[a-zA-Z0-9]{6,}$
2023 : failed : failed : 7.566809239 (s) : (0|[1-9]\\d?)\\.(3|[0-1]\\d?)\\.(0|[1-9]\\d?)
2024 : failed : failed : 0.195752307 (s) : var r = new RegExp(\"[^0-0.99]\");
2025 : failed : failed : 4.058223477 (s) : \\d?\\.\\d{2}\\.\\d\\d%
2026 : failed : failed : 11.460706637 (s) : 0\\.00%|0\\.(0){1,4}%
2027 : failed : failed : 0.57064831 (s) : ^100000000$|^1+0000000-99999+00$
2028 : failed : failed : 3.514263784 (s) : ^(?=.*\\d)(?!.*\\.)0*\\.(\\d{1,3})/[1-9]\\d/
2029 : failed : failed : 6.989436887 (s) : ([0-9]*\\.[0-9]*[0-9])|([0-9]*[0-9])
2030 : failed : failed : 14.641100264 (s) : (99.00\\d{1,2})?%
2031 : failed : failed : 0.100993481 (s) : ^\\w+
2032 : failed : failed : 1.053282664 (s) : \\b[a-z][a-z]\\
2033 : failed : failed : 0.136793029 (s) : &quot;[a-z]+&quot
2034 : failed : failed : 0.152126152 (s) : \\b\\w\\w\\b
2035 failed : unparsable : 0 (s) : Please check your regex.
2036 : failed : failed : 3.873496195 (s) : /^
2037 : unparsable : unparsable : 0.057706282 (s) : (?<=^| &quot; )[
2038 : failed : failed : 1.529089083 (s) : [a-zA-Z0-9]
2039 : failed : failed : 12.728026269 (s) : [a-z]{1}\\w{1}
2040 : unparsable : unparsable : 0.079580523 (s) : (?<firstname>\\w)+(?<
2041 : failed : failed : 2.172990126 (s) : \\d{2,3}\\.\\
2042 : failed : failed : 0.103165889 (s) : %Y-%m-%d|
2043 : failed : failed : 0.544394307 (s) : @\"^
2044 : unparsable : unparsable : 0.082884641 (s) : \\d{2}[.
2045 : failed : failed : 1.093002193 (s) : \\b\\d{1,2}\\
2046 : failed : failed : 0.276762968 (s) : &quot;dd.mm.
2047 : unparsable : unparsable : 0.111178544 (s) : ^(?=
2048 : unparsable : unparsable : 0.107987067 (s) : /\\([0-9]{2
2049 : unparsable : unparsable : 0.088560459 (s) : [0-9][0-9][
2050 : unparsable : unparsable : 0.069591748 (s) : '\\d+\\.\\d{2
2051 : failed : failed : 0.457988042 (s) : A-F
2052 : unparsable : unparsable : 0.054226335 (s) : ([A-F]{1,3})(?![+\\- ])(?=[A-Z])(?=\\d{3})
2053 : unparsable : unparsable : 0.100487203 (s) : (A-F)(-|+)(0|1|2|3|4|5|6|7|8|9)(0|1|2|3|4|5|6|7|8|9)
2054 : failed : failed : 0.765283405 (s) : ^[A-Z][a-z]+[0-9]{3}[A-Z]$
2055 : failed : failed : 15.142582213 (s) : (A-F)+ |-
2056 : failed : failed : 1.322234135 (s) : [A-G][0-9]?[0-9]
2057 : failed : failed : 1.927764826 (s) : ^(?=.*[A-F])
2058 : failed : failed : 9.563976507 (s) : (?i)(A|B|C|D|F)(?=\\w)
2059 : failed : failed : 23.727168267 (s) : ^[a-zA-Z]+[0-9]{2}[A-F-]$
2060 : failed : failed : 0.462123436 (s) : A-F\\+ or A-F\\-
2061 : failed : failed : 0.693000267 (s) : \\d{1,2}\\.\\d{1,2}\\.(\\d{4}) or \\d{1,2}\\.\\d{4}
2062 : failed : failed : 0.337044412 (s) : ^(20[0-3]|0?[1-9]|1[012])[0-9]{3}(([0-9]|[1-9]\\.)0{3})Z
2063 : failed : failed : 1.097698638 (s) : ^(0|[1-9][0-9]|[12][0-9]|3[01])[0-9]{2}(\\.\\d{1,2})$
2064 : failed : failed : 5.46339447 (s) : (?<!\\A)[0-2]\\d\\.\\d[0-9]\\d[0-9]\\d[0-9]/\\d{4}
2065 : failed : failed : 1.682715474 (s) : (\\d\\.)((\\d\\.)(\\d\\.)?)([+-](\\d\\.))?(00|\\d\\d)(/|-)(\\d\\d\\d\\d\\d\\d\\d\\d)
2066 : failed : failed : 8.777378599 (s) : \\d{1,2}/\\d{1,2}/\\d{4} | \\d{1,2}\\.\\d{1,2}\\.\\d{4} | \\d{4}
2067 : unparsable : unparsable : 0.0660308 (s) : ([0-9]{1,2})-[0-9]{1,2}-[0-9]{4}|[0-9]{1,2}[./-]([0-9]{1,2})-[0-9]{4}|[0-9]{1,2}[.
2068 : unparsable : unparsable : 0.091186717 (s) : [
2069 failed : unparsable : 0 (s) : Please check your regex.
2070 : failed : failed : 0.770400727 (s) : [0-9]{3}
2071 : failed : failed : 2.297036506 (s) : \\b[1234-5678-9012-3456-7890]{7,9}\\b
2072 : failed : failed : 7.737471301 (s) : [{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}]
2073 : failed : failed : 10.299627022 (s) : ([0-9]{32})-([0-9]{8})-([0-9]{4})-
2074 : unparsable : unparsable : 0.11273579 (s) : [^-]([0-9]{32})-(?!-)(?!-)[0-9]{32)-
2075 : unparsable : unparsable : 0.098693735 (s) : 0x[0-9A-Fa-f]{3
2076 : unparsable : unparsable : 0.093835477 (s) : ^[0-9a-fA-F]{32}-[0-9a-fA-F]{
2077 : unparsable : unparsable : 0.089029888 (s) : r'^[0-9]{32}-?[0-9]{32}-?[0-9
2078 : failed : error init : 0.098429129 (s) : ^
2079 : unparsable : unparsable : 0.077708567 (s) : ^[0-9a-f]{32}(-[0-9a-f]{32}(-[0
2080 : unparsable : unparsable : 0.055378653 (s) : ^(?=0x[0-9a-f]{32})(?=0x[0-9a
2081 : unparsable : unparsable : 0.071804802 (s) : \\((\\d{3
2082 : unparsable : unparsable : 0.079764637 (s) : \\d{3}(
2083 : failed : failed : 0.119512449 (s) : ^[0-9]
2084 : failed : failed : 2.060504415 (s) : [(\\() ]
2085 : unparsable : unparsable : 0.061360464 (s) : ^(\\d{3
2086 : failed : failed : 1.518380179 (s) : [0-9]
2087 : unparsable : unparsable : 0.094779224 (s) : ^((
2088 : unparsable : unparsable : 0.054953556 (s) : (?=^[0
2089 : unparsable : unparsable : 0.062436449 (s) : ^(222) [0
2090 : unparsable : unparsable : 0.084828651 (s) : ^(222)? (555
2091 : failed : failed : 0.153194463 (s) : (1 or 2) digit number between 0, 12 (inclusive), 0-9, 00-99, 1, 2. For example, 20, 011, 012, 012, 012, 020, 02, 012, 100, 102, 12, 12, 012.
2092 : unparsable : unparsable : 0.072934889 (s) : [a-zA-Z0-9]{1,10}([0-9]|1[0-9]|2[0-3])[a-zA-Z0-9-]{3,20}[a-zA-Z0-9 ]{1,3}([a-zA-Z0-9]|1[0-9]|2[0-3])[a
2093 : failed : failed : 0.712682564 (s) : /^([1-9][0-9]|1[012])([0-9]?)([0-9]?)$/;
2094 : failed : failed : 20.116038561 (s) : [1-2]?[0-9]|[0-9]
2095 : unparsable : unparsable : 0.06901107 (s) : ([0-9]{1,2} h)?([0-9]{1,2
2096 : unparsable : unparsable : 0.104401864 (s) : ^\\d{1,
2097 : unparsable : unparsable : 0.091784667 (s) : ^([01]?[0-9]|2[0-4])[0-9]{0,
2098 : unparsable : unparsable : 0.080440343 (s) : [0-9]{1,2}[0-9]{1,2}\\s[0-9]{1,2}\\s[0-9]{1,2}\\s\\(([0-9]{2}\\s[0-9]{2}\\s[0-9]{2})\\s([0-9]{2}
2099 : unparsable : unparsable : 0.057359221 (s) : /(\\d{
2100 : failed : failed : 2.325236604 (s) : (?<=\\d\\S)\\s*\\d{1,2}[a-zA-Z]
2101 : failed : failed : 3.591252374 (s) : [A-Za-z0-9][0-9-]{0,3}[0-9-]{0,3}[0-9-]{4}
2102 : failed : failed : 0.286817316 (s) : ^\\d{1,3}-?\\d{3}-?\\d{4}I was trying to understand the function of the [^0-9] and [^0-9-] part. As far as I know, the first one means any character that is NOT a number, and the second one means any
2103 : failed : failed : 0.181145955 (s) : ^\\d{3}\\-\\d{3}\\-\\d{4}$
2104 : failed : failed : 4.069096268 (s) : ^\\+?\\d{3}\\-\\d{3}\\-\\d{4}$
2105 failed : unparsable : 0 (s) : Please check your regex.
2106 : failed : failed : 8.56282225 (s) : [A-Z][^-\\s]{1}\\d{3}[^-\\s]{3}[A-Z]
2107 : failed : failed : 20.220855813 (s) : [0-9]{3}-{3}-{4}
2108 : failed : failed : 0.895757572 (s) : [\\d-]{2}[-\\d]{4}
2109 : failed : failed : 0.229430243 (s) : ^[-]?[0-9]{3}-[0-9]{3}-[0-9]{4}$
2110 : failed : failed : 0.239189568 (s) : ^\\+?1?[0-9]{3}\\-[0-9]{3}\\-[0-9]{4}$
2111 : failed : failed : 0.81086964 (s) : \\d{4}[a-z]{2}
2112 failed : unparsable : 0 (s) : Please check your regex.
2113 : failed : error init : 0.146819656 (s) : \\d{4}[Aa]\\d{2}This will be the most effective for your case (since you know exactly what to expect) but you can also check other options at this topic.
2114 : failed : pumping failed : 17.947979438 (s) : [^0-9]*([0-9]{4}|[a-z]{2})[^0-9]*
2115 : failed : failed : 0.676477396 (s) : ^\\d{4}[a-z]{1}$
2116 : failed : failed : 171.412064843 (s) : ([a-zA-Z]{1}[0-9]{2}[a-zA-Z]|[0-9]{2}[a-zA-Z]{4}[0-9]{4}|[0-9]{3}[a-zA-Z]{3}[0-9]{3})
2117 : failed : failed : 0.982456174 (s) : (\\d{4}\\w{2}).*
2118 : failed : failed : 0.982391674 (s) : \\d{4}[a-z]{2}
2119 : failed : failed : 0.728255306 (s) : (\\d{4})([a-z]{2})
2120 : failed : failed : 0.402789376 (s) : ^[0-9][0-9][0-9](-[A-Z][A-Z][A-Z])?$
2121 : failed : failed : 3.956445287 (s) : \\d{2}
2122 : failed : failed : 0.783652142 (s) : \\d{1,2}\\/\\d{1,2}\\/\\d{4}\\s
2123 : failed : failed : 0.207724797 (s) : ^(0[1-9]|1[012])/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])$
2124 : failed : failed : 0.602327252 (s) : This expression is an improved version of J&#247;rg Maag. It checks a date field in the Australian DD/MM/YYYY format. The expression 
2125 : failed : failed : 0.316714061 (s) : r'^((0[1-9]|1[012])\\/(0[1-9]|[12]\\d|3[01])\\/(19[2-9]|20)\\d{2})\\d{2}$'
2126 : failed : failed : 0.750480264 (s) : \\([0-9]{2}\\)\\s[0-9]{2}\\.[0-9]{4}
2127 : failed : failed : 0.48828221 (s) : ^(\\d{2})([A-Za-z])(\\d{2})(00)[A-Za-z]$
2128 : failed : failed : 0.23333784 (s) : ^(19|20)\\d(1|2) \\d{1,2}(0|1) \\d{2}$
2129 : failed : failed : 2.527772784 (s) : /^
2130 : failed : failed : 0.219424636 (s) : \\d\\d/\\d\\d/\\d\\d \\d\\d [0-9]{4}
2131 : failed : failed : 8.097576387 (s) : [0-9][0-9]/[0-9][0-9].
2132 : failed : failed : 25.586616583 (s) : [0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}
2133 : failed : failed : 0.703005343 (s) : ^\\d{8}
2134 : unparsable : unparsable : 0.060144658 (s) : (?<-)
2135 : failed : failed : 0.419971241 (s) : [\\d\\d]/[0-3][0-9]/[0-9]{4}
2136 : failed : failed : 11.849435473 (s) : [0-9]{3}-[0-9]{2}-[0-9]{4}
2137 : failed : failed : 0.147843834 (s) : %Y/%m/%d
2138 : failed : failed : 14.545156089 (s) : (0|1|[2-9])\\d{2}\\/\\d{2}\\/\\d{4}
2139 failed : unparsable : 0 (s) : Please check your regex.
2140 : failed : failed : 0.271610249 (s) : ^(04-?\\d|12)\\/(0?[1-9]|1[012])\\/(0?[1-9]|[12]\\d|3[01])$
2141 : failed : failed : 0.776925456 (s) : /\\d{1,2}\\d/g;
2142 : failed : failed : 1.690838736 (s) : (100|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|2[0-9]{3})
2143 : failed : failed : 0.193520768 (s) : ^(0[1-9]|[12][0-9]|3[01])$
2144 : failed : failed : 0.503435978 (s) : \\d{1,100}   Descripti
2145 : failed : failed : 11.997769064 (s) : ([0-9]{1,2})\\s*-([0-9]{1,2})\\s*-([0-9]{1,2})\\s*-([0-9]{1,2})
2146 : failed : failed : 1.607134891 (s) : \\b
2147 : failed : failed : 5.035142082 (s) : ^(.+?)\\s?
2148 : failed : failed : 4.640341866 (s) : (\\d{1,2})[-]?(\\d{1,2})[-]?(\\d{1,2})
2149 : failed : failed : 2.046471076 (s) : ^[1-9][0-9]*|[1-9]$
2150 failed : unparsable : 0 (s) : Please check your regex.
2151 : failed : error init : 0.097087757 (s) : (?s)
2152 : unparsable : unparsable : 0.081435958 (s) : [0-9]{
2153 : unparsable : unparsable : 0.105619484 (s) : ^(([0-9]{1,2
2154 : unparsable : unparsable : 0.065152225 (s) : (?xmi)^((?<![0-9])[0-9]{2}\\\\.|2[0-3]\\\\.)([01][0-9]|2[0-3]|[01][0-9]|[012][0-9]|3
2155 : unparsable : unparsable : 0.06925665 (s) : ^(0[1-9]|1[012])[0-9]{
2156 : unparsable : unparsable : 0.069165059 (s) : [0-9]{1,2
2157 : failed : failed : 2.708217587 (s) : (?i)(0|[1-9][0-9]|1[012])
2158 : unparsable : unparsable : 0.08011866 (s) : (?<=\\d{
2159 : unparsable : unparsable : 0.08951178 (s) : [0-9]{2
2160 : failed : failed : 0.99720345 (s) : \"^([0-9]{1,2}[0-9]{1,2}[0-9]{1,2})
2161 : failed : failed : 0.315930443 (s) : ^[a-zA-Z0-9]+( [a-zA-Z0-9]+)+$
2162 : failed : failed : 1.040892643 (s) : [a-zA-Z][a-zA-Z\\s-]*[a-zA-Z0-9]
2163 : failed : failed : 16.540267308 (s) : ^[a-zA-Z0-9][a-zA-Z0-9 _.-]+@[a-zA-Z][a-zA-Z0-9 _.-]+\\.[a-zA-Z]{2,}$
2164 : failed : failed : 0.972255192 (s) : ^[a-zA-Z ]{1,63}$
2165 : failed : failed : 1.91199793 (s) : /^
2166 : failed : failed : 0.165417041 (s) : [a-zA-Z0-9\\s-]
2167 : failed : failed : 47.639619146 (s) : (?<![A-Za-z\\s])(?<![A-Z])[A-Z][A-Za-z0-9]+[ A-Za-z]
2168 : failed : failed : 0.283967569 (s) : [a-zA-Z]+ [-a-zA-Z0-9]* 2. Write a function that takes a string of text and generates a RegEx that matches any email addresses in the text.  Soluti
2169 : failed : failed : 1.170835093 (s) : /[a-z]+
2170 : failed : failed : 0.15101411 (s) : [A-z][a-z0-9 -]*
2171 : failed : failed : 0.215215634 (s) : ^([0-9]{4})([0-9]{2})[-/]([0-9]{2})$
2172 : failed : failed : 0.260486368 (s) : ^(0[1-9]|1[012])\\/(0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|[12][0-9]|3[01])$
2173 : failed : failed : 2.636128903 (s) : [M]onth [0-9]|[1-9]
2174 : failed : failed : 2.136621382 (s) : [\\d]{4}/[\\d]{2}
2175 : failed : failed : 27.199870253 (s) : [0-9]{4}\\-[0-9]{2}
2176 : failed : failed : 0.711405362 (s) : (0)\\.([12][0-9]|3[01])/([0-9]{4})
2177 : failed : failed : 10.911850356 (s) : [0-9][0-9][0-9][0-9]/[0-9][0-9][0-9][0-9]
2178 : failed : failed : 0.171078162 (s) : ^[0-9]{4}[0-9]/[0-9]{1}$
2179 : failed : failed : 0.471038319 (s) : (^\\d{1,2}|^3[01])[0-2]\\d{4}
2180 : failed : failed : 0.635178419 (s) : (\\d\\d)
2181 : failed : failed : 2.577336819 (s) : (0|[1-9][0-9]|1[0-2])([0-9])(0|[1-9])
2182 : unparsable : unparsable : 0.116189768 (s) : [01]?[0-2][0-9]|[3][0-1][0-9]|[2][0-3][0-9] (optional 1
2183 : failed : failed : 0.512443956 (s) : \\d+?\\
2184 : unparsable : unparsable : 0.053810265 (s) : \"^0\\d\
2185 : unparsable : unparsable : 0.101205628 (s) : /^([12][0-9]|3[01])/(0?[1-9]|1[012])/([01]?[0-9]|2[0-3]
2186 : failed : failed : 0.144433057 (s) : ^(0[1-9]|[1-2][0-9])-(0[1-9]|1[012])$
2187 : failed : failed : 1.235483995 (s) : [0-2][0-9]|3[0-1]
2188 : unparsable : unparsable : 0.082206451 (s) : \\D(\\d{1,2}\\s\\d{1,
2189 : unparsable : unparsable : 0.096957132 (s) : (?<hour>\\d{2}
2190 failed : unparsable : 0 (s) : Please check your regex.
2191 : failed : failed : 1.188408091 (s) : ([a-zA-Z ]+)
2192 : unparsable : unparsable : 0.064892168 (s) : (?<Hour>\\d\\
2193 : unparsable : unparsable : 0.085272001 (s) : ^([0-5][0-9]
2194 : unparsable : unparsable : 0.066254669 (s) : ^(\\d{
2195 : unparsable : unparsable : 0.072655205 (s) : (10-19, 
2196 : unparsable : unparsable : 0.114917525 (s) : /(\\d{1,2
2197 : unparsable : unparsable : 0.089436319 (s) : (?P<hour>[012][0-9])
2198 : failed : pumping failed : 53.180595065 (s) : .*([0-1]|2) hour.*[24|0-9] Exercise
2199 : failed : failed : 16.244705336 (s) : (\\d{2})\\s((1[012])|([1][0-9]))|([0-1][0-9])
2200 : unparsable : unparsable : 0.06236793 (s) : [\\d][\\d\\
2201 : unparsable : unparsable : 0.080152995 (s) : ^0\\d{0,3}\\d{0,3}(?<decimalspace>\\d+)?$ The RegEx will be \"^0\\d{0,3}\\d{0,3}(?<decimalspace>\\d+)?$\"
2202 : failed : failed : 0.176734654 (s) : feet = ^[0-9]{1,3}[\\,\\.]?[0-9]{1,3}$; inches = ^[0-9]{0,2}[\\,\\.]?[0-9]{0,2}$;Reg
2203 : failed : failed : 3.059474282 (s) : .*
2204 : failed : failed : 0.188174036 (s) : ^height \\$(0|\\d+) \\$(0|\\d+)$
2205 : failed : failed : 0.205103789 (s) : \\d+ &quot;\\d+ &quot;\\d+ &quot;\\d+ &quot;\\d+ Answ
2206 : failed : error init : 0.105981712 (s) : ^
2207 : failed : failed : 0.171651967 (s) : ^\\d\\d\\d\\d &quot;\\d\\d \\d\\d\\d$
2208 : failed : failed : 1.064385996 (s) : \\d{2,}
2209 : failed : failed : 0.750529627 (s) : Regex = \"(\\d+) feet (\\d+) inches\"
2210 : failed : failed : 1.344794231 (s) : \\d{1,2}
2211 : unparsable : unparsable : 0.06231951 (s) : (?=^[-+]?[0-9]*\\.?[0-9]*
2212 : failed : failed : 5.34378101 (s) : \"^[+-]?[1-9]\\d*|[1-9]\\d+$\"
2213 : failed : failed : 13.460526634 (s) : -?[0-9.]+
2214 : failed : failed : 1.70177714 (s) : /^(?=(\\d*\\.\\d*))[-+]?
2215 : failed : pumping failed : 57.022628453 (s) : \\+?[\\.,-]?[0-9]+([eE][+-]?[0-9]+)?!
2216 : unparsable : unparsable : 0.049781661 (s) : (?P<sign>[+-]?)
2217 : failed : pumping failed : 4.305487044 (s) : ^[0-9]*\\.[0-9]*[0-9][0-9]*[0-9]*$
2218 : failed : error init : 0.111664062 (s) : ^
2219 : failed : failed : 10.360473493 (s) : [0-9]*\\.[0-9]*e[0-9]*
2220 : failed : failed : 0.743274811 (s) : ^(?=\\d*\\.\\d*$)(?=\\d*\\-\\d*$)(?=\\d*\\.\\d+$)(?=\\d*\\.\\d*\\.\\d*$)(?=\\d+\\.\\d+$).*$
2221 : failed : failed : 0.516453233 (s) : [\"^[1-9]\\d*$\", \"^0(\\.\\d*)+$\"]
2222 : failed : failed : 12.111168787 (s) : [1-9]\\d*
2223 : failed : failed : 0.124995618 (s) : ^\\d+$
2224 : failed : failed : 2.289470608 (s) : \\b\\d+([1-9])?\\d*\\b
2225 : failed : failed : 2.524872654 (s) : \\d+
2226 : failed : failed : 0.170533893 (s) : var regex = /^\\d+$/;
2227 : failed : failed : 0.844127639 (s) : ^\\d+$   ^ _____________________^   |               |   |              The start of the String   |              |   |              The end of the String   |   \\d+             A sequence of one or more digits
2228 : failed : failed : 1.488527106 (s) : [1-9][0-9]|0
2229 : failed : failed : 3.927634705 (s) : (0|[1-9][0-9]|100)
2230 : failed : failed : 0.600788681 (s) : ^[1-9][0-9]*[0-9]?$
2231 : failed : failed : 1.713004324 (s) : \\b
2232 : failed : pumping failed : 60.633253845 (s) : [0-9]+(\\.[0-9][a-zA-Z]+)
2233 : failed : failed : 0.190765228 (s) : ^(\\+?[0-9]{3}([\\s-]?[0-9]{3})?)?(\\+?[0-9]{4})?$
2234 : failed : failed : 1.099592044 (s) : \\(\\d{3}\\)
2235 : unparsable : unparsable : 0.068154407 (s) : +[0-9]{3}
2236 : unparsable : unparsable : 0.082423466 (s) : ^(?P<number>\\d{2})?(?P<ext>\\s?[-.]\\s?)?\\d{3}$
2237 : failed : failed : 0.126184033 (s) : ^[ -]
2238 failed : unparsable : 0 (s) : Please check your regex.
2239 : failed : failed : 0.250525034 (s) : ^([0-9]|[1-9][0-9]|[1-9]|[0-9]{2}) \\+ ([0-9]|[1-9][0-9]|[1-9]|[0-9]{2})$
2240 : unparsable : unparsable : 0.097308801 (s) : /^\\(?
2241 : failed : pumping failed : 96.235275574 (s) : [0-9]{0,}[.][0-9]{0,}[-]?[0-9]{0,}$
2242 : failed : failed : 0.124230695 (s) : ^[+.-][0-9]+[.]?[0-9]*$
2243 : failed : failed : 0.177983262 (s) : ^[1-9]?\\d*\\.?\\d*$
2244 : failed : failed : 1.544767563 (s) : @\"^
2245 : failed : failed : 0.368957733 (s) : ^[-+]?\\d+(\\.\\d+)?$
2246 : unparsable : unparsable : 0.076822118 (s) : /^(?=.*[0-9])(.{2,16}
2247 : failed : failed : 0.539915419 (s) : /^[-+]?[0-9]+
2248 : failed : failed : 16.114818469 (s) : [^\\d.]+\\.?[0-9]*
2249 : failed : failed : 0.208734378 (s) : (^[\\+\\-]?(.\\d+))$Explanati
2250 : failed : failed : 0.155943711 (s) : ^[-+]?\\d*\\.\\d+$
2251 : failed : failed : 0.150050796 (s) : ^\\d+$
2252 : failed : pumping failed : 233.740561812 (s) : (.*) [a-zA-Z]
2253 : unparsable : unparsable : 0.074675197 (s) : +-?\\d+(\\.\\d+)?
2254 : failed : failed : 20.556834007 (s) : [0-9]{4}\\.[0-9]{2}\\.[0-9]{2}\\.
2255 : failed : failed : 2.184811283 (s) : (3[2-9]|[1-9][0-9])
2256 : unparsable : unparsable : 0.080037329 (s) : ^(.*?)(?=
2257 : unparsable : unparsable : 0.090995719 (s) : regex = re.compile(r\"^(
2258 : failed : failed : 1.266736389 (s) : ([0-9]{4})
2259 : failed : failed : 3.725984244 (s) : (.*)
2260 failed : unparsable : 0 (s) : Please check your regex.
2261 : failed : failed : 0.692443264 (s) : \"^[A-Fa-f0-9]{12}$\"
2262 : failed : failed : 0.6573028 (s) : \"^[0-9a-fA-F]+
2263 : failed : failed : 0.720245827 (s) : ^[0-9a-fA-F]{2}\s[0-9a-fA-F]{2}\s[0-9a-fA-F]{2}$
2264 : failed : failed : 0.107473545 (s) : import re
2265 : failed : failed : 0.810226426 (s) : ~(\\\\S+)\\\\s\\\\S+
2266 : failed : failed : 0.232417818 (s) : ^[0-9a-fA-F]+$
2267 : failed : failed : 0.157478084 (s) : ^[0-9a-fA-F ]{4}$
2268 : failed : failed : 1.245006998 (s) : ^(0x[0-9a-fA-F]{1,6})+$
2269 : failed : failed : 12.485382141 (s) : \"(?=[0-9A-Fa-f]{4}\\s){20}\".
2270 : failed : failed : 0.247876285 (s) : ^(?=.{6}\\s[A-Fa-f0-9]{2}$)(?=.{6}\\s[0-9]{2}$)[0-9a-fA-F]{6}$
2271 : failed : failed : 84.603543854 (s) : r'\\-?(.*?)\\.'
2272 : failed : failed : 0.292603532 (s) : $str = '\";*I am the official email of IBM*\";*\";*I am the official email of IBM*\";*\";*I am the official email of IBM*\";*\";*I am the official email of IBM*\";*\";*I am the official email of IBM*\";*\";*I am the official email of IBM*\";*\";*I am the official email of IBM*\";*\";*I am the official email of IBM*\";*\";*I am the
2273 : failed : failed : 0.289404241 (s) : $server_name = \"/s.mailing.office.com/users/[^/]+/[^/]+/[^/]+.mailing.office.com\" $server_regex = \"^$server_name$\"
2274 : unparsable : unparsable : 0.055723197 (s) : {[A-Za-z0-9\\\\.\\
2275 : failed : failed : 0.155403189 (s) : regex = '^http
2276 failed : unparsable : 0 (s) : Please check your regex.
2277 : failed : failed : 4.957090261 (s) : [a-zA-Z0-9-.-]+
2278 : failed : failed : 0.833610345 (s) : \\b(http|ftp|sftp|ftps|smtp)\\b
2279 : failed : failed : 3.516893338 (s) : [a-zA-Z0-9][a-zA-Z0-90-9]|[a-zA-Z0-9][0-9a-zA-Z0-9]
2280 : failed : failed : 0.174851759 (s) :  / / / / / / / / / / /
2281 : unparsable : unparsable : 0.067427896 (s) : /^\\d{3}-\\d{2}-\\d{4} \\d{1,
2282 : unparsable : unparsable : 0.121130891 (s) : ^(?=.*\\d\
2283 : unparsable : unparsable : 0.058513573 (s) : var date = new Date(\"2012/02/12 
2284 : unparsable : unparsable : 0.074987983 (s) : (^
2285 failed : unparsable : 0 (s) : Please check your regex.
2286 : failed : failed : 0.3180861 (s) : htt
2287 : failed : failed : 0.163223664 (s) : /^\\d{4}/ ^     ^^     ^^  Jurisdiction  Year
2288 : unparsable : unparsable : 0.096913731 (s) : [1]/(?P<year>\\d{4})\\s([1-9]\\d)\\s(?P<day>\\d{2})\\s(?P<month>\\d{2})\\s(?
2289 : failed : failed : 0.677262737 (s) : A year starts with a two number sequence, where the sequence's length is between 2 and 4;the second number is any integer from 0 to 9. At least one of the two numbers must be 0. A year is not a leap year, except
2290 : unparsable : unparsable : 0.084469729 (s) : /^[12][0-9][0-9][0-9][0-9][0-9] [1-9] [0-9][0-9][0-9][0-9][0-9] [0
2291 : failed : failed : 0.533740596 (s) : /^(\\d{1,3})\\s\\d{1,3}
2292 : failed : failed : 0.803598224 (s) : /^\\+
2293 : unparsable : unparsable : 0.06685864 (s) : ^(\\d+|\\(\\d+\\)\\d+|\\d+
2294 : failed : failed : 2.47606696 (s) : /^
2295 : failed : error init : 0.088039694 (s) : ^
2296 : unparsable : unparsable : 0.090449927 (s) : ^(\\d\\d\\d\\-\\d\\d\\d\\d\\
2297 : unparsable : unparsable : 0.087045602 (s) : (?=^[-+]?\\s?(\\d{7}|\\
2298 : unparsable : unparsable : 0.105912742 (s) : ^[a-zA-Z0-9-\\.|\\()\\
2299 : unparsable : unparsable : 0.068078094 (s) : (?<num>\\d{1,3}
2300 : unparsable : unparsable : 0.070581812 (s) : ^(01235-)?[0-9]{2}(0[0
2301 : failed : failed : 1.560890124 (s) : \\b\\S+?[0-9a-z][a-zA-Z0-9]\\S+?\\b
2302 : failed : failed : 1.879035936 (s) : ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[A-Za-z\\d]{7,}$
2303 : failed : failed : 0.118575876 (s) : [^a-zA-Z\\d]
2304 : failed : failed : 3.398260435 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?!.*[0-9]{6,}).{6,}$
2305 : failed : failed : 3.471054139 (s) : ^[a-z]{1,}[0-9]{1,}[a-zA-Z0-9]+$
2306 : failed : failed : 3.298511585 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?!.*\\d)(?=.{6,}).*$
2307 : failed : failed : 1.169212725 (s) : ^(?=.*[a-z])(?=.*[0-9]).{6,}$
2308 : failed : failed : 9.999238011 (s) : [A-Z][0-9]{6,11}
2309 : failed : failed : 2.983390216 (s) : ^(?=.*[a-z])(?=.*\\d)(?=.{6,}$)
2310 : failed : failed : 1.109620232 (s) : ^[a-zA-Z][0-9]{3,}[a-zA-Z][0-9]$
2311 : failed : failed : 2.403116162 (s) : (?<D>0?[1-9]\\d)(?<M>[1-9]\\d)(?<Y>\\d{4})
2312 : unparsable : unparsable : 0.11611635 (s) : (?P<day>\\d{2})(?P<month>\\d{2})(?P<year_1>\\d{4})(?P<has_leap_year>\\d)
2313 failed : unparsable : 0 (s) : Please check your regex.
2314 : failed : failed : 0.185368162 (s) : \\d{2}\\.\\d{2}\\.\\d{4} [apr]
2315 : unparsable : unparsable : 0.078580741 (s) : (?P<month>\\d{2}\\.)?(?P<day>\\d{2})\\.(?P<year>[1-9]{3})\\-(?P<dayofweek>\\d{2})
2316 : failed : failed : 0.987958037 (s) : (\\d{2})\\.(\\d{2})[\\./](\\d{4})
2317 : unparsable : unparsable : 0.077595315 (s) : (0|[1-9][0-9]|1[0-2])/(0[1-9][0-9])[01][0-9]|2[0-9]?[0-9]|3[01][0-9]|[1-
2318 : unparsable : unparsable : 0.077331862 (s) : (?P<year>[0-9]{4})\\.(?P<month>[0-9]{2})\\.(?P<day>[0-9]{2})
2319 : failed : failed : 0.188829974 (s) : ^\\d{1,2}.\\d{1,2}\\.\\d{4}$
2320 : failed : failed : 0.351611501 (s) : ^(19|20)?\\d\\d-\\d\\d-\\d\\d(T|T\\.)(19|20)?(\\d\\d)-(19|20)?(\\d\\d)Z$
2321 : unparsable : unparsable : 0.07103979 (s) : (?<!\\\\)(?<!^)(?<!\\))(?<!{)(?<![^\\s])(?<![^\\n])(?<!\\r)(?<!\\n)(?<!\\r\\n)(?<!\\r\\n){3,}|(?<=\\n)(?<=(?<!\\r),?)(?<!
2322 : failed : error init : 0.087143255 (s) : ^
2323 : unparsable : unparsable : 0.074514035 (s) : /\\b(([a-zA-Z]|
2324 : failed : failed : 0.413785458 (s) : /^[ \\t]+?
2325 : failed : failed : 3.577206642 (s) : \"^
2326 : failed : failed : 4.465598951 (s) : [^\\n]*
2327 failed : unparsable : 0 (s) : Please check your regex.
2328 : failed : failed : 15.000713128 (s) : ^(?!\\s).*?\\n?(?!\\s).*?\\n?(?!\\s).*?$
2329 : failed : failed : 0.428293155 (s) : \\s*\\/
2330 : failed : failed : 4.056768473 (s) : ^/\\*   .+?    \\*/
2331 failed : unparsable : 0 (s) : Please check your regex.
2332 : failed : failed : 0.322562372 (s) : ^[\\\\w-]+$
2333 : failed : failed : 0.70106015 (s) : /^(.+?)\\.([^/]+?)$/.
2334 : failed : pumping failed : 408.879543512 (s) : .*\\\\d{1,3}$
2335 : failed : pumping failed : 45.52632682 (s) : (.*)\\.sql$
2336 : failed : failed : 1.063550993 (s) : [0-9]{3}.[0-9]{3}.[0-9]{3}
2337 : failed : failed : 3.602786954 (s) : (.*)
2338 : unparsable : unparsable : 0.085704841 (s) : public static string FileNameExt(string file, string extension)            {                Regex regex = new Regex(\"(.*?\" + extension + \"(.*?)\\\\.html)\");                return regex.Match(file).Groups[1].Value;            }
2339 : failed : failed : 7.698878923 (s) : ^[A-Za-z0-9\\.\\_\\-]+$
2340 : failed : failed : 0.179341175 (s) : ^([^,\\s])(,([^,\\s]))+
2341 : unparsable : unparsable : 0.073777316 (s) : (?=.*[a-z])[\\dA-Fa-f]{3}\\-[\\dA-Fa-f]{3}\\-\\d{4}\\-\\d{2}|(?=.*[a-z])(\\d{2})[\\dA-Fa-f]{3}\\-[\\dA-Fa
2342 : unparsable : unparsable : 0.090588758 (s) : ^(?P<CC>\\d{2})(?P<xxx>\\d{3})$
2343 : failed : failed : 0.154540584 (s) : ^([A-Z]{2})[0-9]{4}-\\d{3}$
2344 : failed : failed : 4.091777851 (s) : [0-9]{1,2}\\.[0-9]{1,2}\\.[0-9]{1,2}\\.[0-9]{1,2}
2345 : failed : failed : 0.181999984 (s) : ^[A-Z][A-Z0-9-]{9,10}$
2346 : failed : failed : 42.83246136 (s) : ((^[A-Z]|[1-9][0-9]|[0-9][A-Z])[-\\.\\s]?[A-Z]{4}$)
2347 : failed : failed : 0.631142361 (s) : ([C][0-9][C])([0-9]{9}) or ([1][0-9]{2})([0-9]{9})
2348 : failed : failed : 0.218621001 (s) : ^(\\d{3})(?!\\d|\\.\\d{3}|\\d{2}\\.\\d{4})$
2349 : failed : failed : 1.63131941 (s) : /^
2350 : unparsable : unparsable : 0.06949142 (s) : (^\\s*CC[0-9]\\s*
2351 : failed : failed : 0.159704374 (s) : ^[\\d][\\d][\\d]$
2352 : unparsable : unparsable : 0.06871196 (s) : [0-9][0-9][0-9][0-9][0-
2353 : unparsable : unparsable : 0.098832715 (s) : r\"(0[1-9]|1[012]).*(0[1-9
2354 : unparsable : unparsable : 0.075747536 (s) : \\b(0[0-9]|2[0-3])([0-
2355 : unparsable : unparsable : 0.078976532 (s) : [^\\d]{2}\\.\\d{1,3}\\.\\d{
2356 : unparsable : unparsable : 0.086257717 (s) : 000[0-9]{3}[0-9]{3}[0-
2357 : failed : failed : 0.217950846 (s) : \\d{3}
2358 : unparsable : unparsable : 0.076435103 (s) : /^[1-9][0-9][0-9]$|[1
2359 : failed : failed : 0.158807134 (s) : ^\\d{3}(\\d{3})?\\s(\\d{3})?
2360 : failed : failed : 49.005445292 (s) : 200|210|220|221|800s|900s|0|1|2
2361 : unparsable : unparsable : 0.066306666 (s) : \\b(0?[1-9]|1[012])[0-9]{2}-(0[1-9]|1[012])[0-9]{2
2362 : failed : failed : 0.156879664 (s) : yyyy-MM-dd 
2363 : unparsable : unparsable : 0.063287202 (s) : \\d{4}-\\d{2}-\\d{2}\\s\\d{
2364 : unparsable : unparsable : 0.067710515 (s) : [0-9]{3}-[0-9]{2}-[0-9]{2}T[0-9]{
2365 : failed : failed : 0.129713703 (s) : yyyymmdd 
2366 : failed : error init : 0.116290276 (s) : (?i)
2367 failed : unparsable : 0 (s) : Please check your regex.
2368 : unparsable : unparsable : 0.06873856 (s) : ^(dd-mm-yyyy[Tt]([0-3]?[0-9])?[0-9][0-9
2369 : failed : error init : 0.113345712 (s) : (?i)^
2370 : unparsable : unparsable : 0.096717344 (s) : (yyyy-mm-dd 
2371 : failed : failed : 1.877141127 (s) : \\d{1,5}\\.\\d{0,2}
2372 : unparsable : unparsable : 0.058544822 (s) : (?P<value>[0-9][0-9][0-9][0-9][0-9][0-9][0-9])\\.?[0-9][0-9][0-9][0-9][0-9][0-9]|1)(?P<period>[\\.,]?)
2373 : failed : failed : 0.129923666 (s) : ^\\d\\d?
2374 : failed : failed : 1.777471786 (s) : \\b[A-Z]+\\b (word beginning)
2375 : failed : failed : 25.00568197 (s) : [^0-9]{1,5}\\.?[0-9]{1,2}
2376 : failed : failed : 1.370484498 (s) : [1-9][0-9]?[0-9]?[0-9]?[0-9]?.[0-9]?[0-9]?.[0-9]?[0-9]?[0-9]?.[0-9]?[0-9]?
2377 : unparsable : unparsable : 0.111325499 (s) : [0-9][0-9][0-9][0-9][0-9][0-9]|[0-9][0-9][0-9][0-9][0-9][0-9][0-9]|[0-9][0-9][0-9][0-9][0-9][0-9][0
2378 failed : unparsable : 0 (s) : Please check your regex.
2379 : failed : failed : 47.692783593 (s) : [0-9][a-zA-Z0-9]{1,5}\\.\\d{1,2}
2380 : failed : failed : 2.39818673 (s) : \\b(1[01]|02[0-1]|0[1-9]|[12][0-9]|3[01])\\.(1[0-9]|2[0-3]|[07-9])\\b
2381 : failed : failed : 0.639971375 (s) : $
2382 : unparsable : unparsable : 0.084950328 (s) : (\\$\\d|\\s+\\$\\d)|(\\d{,3}[,.]\\d{,3})
2383 : failed : failed : 0.722929492 (s) : \\b-?\\d{3}
2384 : failed : failed : 0.35447916 (s) : r'^[A-Z][A-Za-z0-9._%+-]?[0-9]{1,3}[A-Za-z0-9.-]{3,}(,|$)?'
2385 : failed : failed : 0.625094055 (s) : \\$?\\s\\d+,\\s\\d{0,3}(,\\d{3})*\\.\\d{1,5}$
2386 : failed : failed : 0.239242227 (s) : r'^$\\d{1,3}(,\\d{3})*$'
2387 : failed : failed : 0.340709735 (s) : (\\$(\\d+(,-)\\d+)?)(\\.\\d{1,2})?/100How would you generate this REGEX?
2388 : failed : failed : 0.166244631 (s) : ^\\$-?([0-9]{0,5}[,\\s]){0,6}([0-9]{3})([0-9]{3})?[0-9]{3}$
2389 : failed : failed : 0.698083877 (s) : \\d{1,3}(,\\d{3})*(\\.\\d{5})?(,-\\d{3})?I used the following reg
2390 : failed : failed : 0.491124232 (s) : This is a very hard task, as it has many specifications and rules to follow. To give you a hint, you might need to use lookahead assertions, negative lookbehind assertions, and escaping of special characters.
2391 : failed : failed : 2.173640565 (s) : [^a-zA-Z0-9\\._\\-]
2392 : failed : failed : 0.798463127 (s) : ^[a-z0-9-]{1}[a-z0-9]{2}$
2393 : failed : failed : 14.329749106 (s) : /[a-zA-Z0-9-_/.+]*$
2394 : failed : failed : 0.956163628 (s) : r\"^[a-zA-Z\\d-]+$\"
2395 : failed : failed : 0.181116309 (s) : ^[a-zA-Z0-9_]{6}$
2396 : failed : failed : 0.68889001 (s) : ^[a-z./A-Z.-]+$
2397 : unparsable : unparsable : 0.048060108 (s) : ?[a-zA-Z0-9_.+-]+@example.com
2398 : failed : failed : 0.694421939 (s) : ^[A-Za-z0-9][A-Za-z0-90-9] [A-Za-z0-9]$
2399 : failed : failed : 31.09179106 (s) : [0-9]{3}[A-Z]{3}[\\w.-]{1,}$
2400 : failed : failed : 1.261096418 (s) : ^[A-Za-z0-9_.-]+$
2401 : failed : failed : 0.415583876 (s) : simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answ
2402 : failed : failed : 0.317781971 (s) : simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answ
2403 : failed : failed : 0.339517072 (s) : simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answ
2404 : failed : failed : 0.313094704 (s) : simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answ
2405 : failed : failed : 0.365979595 (s) : simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answ
2406 : failed : failed : 0.402670393 (s) : simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answ
2407 : failed : failed : 0.394145038 (s) : simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answ
2408 : failed : failed : 0.398448026 (s) : simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answ
2409 : failed : failed : 0.341588741 (s) : simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answ
2410 : failed : failed : 0.276077625 (s) : simply checks to see if the first charactor is a. (dot)Generate a RegEx for this description. Answ
2411 : failed : failed : 0.239290116 (s) : ^(\\d{1,3})(\\.)?(\\d{1,2})$
2412 : failed : failed : 0.398779758 (s) : ^[0-9]{0,2}.[0-9]{0,2}[A-Za-z ]+$
2413 : failed : failed : 0.225798822 (s) : height\\s*
2414 : failed : pumping failed : 78.027966392 (s) : (.*)(\\s+)([0-9.]+)(.*)
2415 : failed : failed : 0.977018401 (s) : ^[0-9]+\\s[0-9]*\\.?[0-9]+$
2416 : unparsable : unparsable : 0.095258021 (s) : ^(?P<height>[\\d]+\\s*[\\.\\d]?)( \\(?P<inches>[\\d]+\\))?$
2417 failed : unparsable : 0 (s) : Please check your regex.
2418 : failed : failed : 2.143633914 (s) : \\d[\\d\\.]*
2419 : failed : failed : 3.834576554 (s) : r\"^[1-9][0-9]?[0-9]*$|^[1-9]?[0-9]*$\"
2420 : failed : failed : 1.961179689 (s) : \\(\\d{1,2}?(\\d{1,2})?(\\d{2})?(\\d{1,2})?(\\d{1,2})?(\\d{1,2}))
2421 failed : unparsable : 0 (s) : Please check your regex.
2422 : failed : failed : 0.348700499 (s) : r'^\\d{3}
2423 : failed : failed : 10.102529105 (s) : ^[a-zA-Z0-9_]{11,}$
2424 : failed : failed : 0.444526002 (s) : \"^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[-\\_\\.]).*$\"
2425 : failed : pumping failed : 6.129010407 (s) : r\".*[a-z0-9A-Z \\.-]{1,20}[a-z]{1,3}[a-z]{3}\\.\"
2426 : failed : failed : 0.347797067 (s) : ^[^a-zA-Z0-9 -]{0,50}$
2427 : unparsable : unparsable : 0.090654951 (s) : (?<!^|[&]|\\(|\\)|\\.|\\,|
2428 : failed : failed : 2.149430178 (s) : \\b
2429 : failed : failed : 7.296633526 (s) : [a-z]{1}[a-z0-9]+[a-z]$
2430 failed : unparsable : 0 (s) : Please check your regex.
2431 : failed : failed : 0.291309969 (s) : ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$
2432 : failed : failed : 0.361183084 (s) : ^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}
2433 : unparsable : unparsable : 0.306565076 (s) : \"^([0-9a-f]{1,
2434 : failed : failed : 1.028262862 (s) : [0-9a-fA-F][1-9][0-9a-fA-F]
2435 : unparsable : unparsable : 0.150769553 (s) : /^(([0-9A-Fa-f]|[0-9a-fA-F]{1,
2436 : unparsable : unparsable : 0.055929053 (s) : ^([0-9A-Fa-f]{1,
2437 : unparsable : unparsable : 0.059731243 (s) : /^([a-f0
2438 : failed : error init : 0.145858976 (s) : ^
2439 : failed : failed : 0.09575954 (s) : \\A\\b
2440 : unparsable : unparsable : 0.079107928 (s) : [a-zA-Z0-9]{1,
2441 : failed : failed : 3.509588199 (s) : (?<!\\d)(?<![\\w\\d\\s])[0-9]{5,9}
2442 : failed : failed : 0.623535988 (s) : \\d{3}[-/.]\\d{3}[-/.]\\d{4}
2443 : failed : failed : 0.101678724 (s) : ^[0-9]*$
2444 : failed : failed : 0.730036501 (s) : \\d{3}[-\\.]?\\d{3}[-\\.]?\\d{4}
2445 : failed : failed : 0.150112151 (s) : ^[1-9][0-9]*$
2446 : failed : failed : 3.393961586 (s) : [0-9]
2447 : failed : failed : 7.750381257 (s) : (\\d+(\\.\\d+)?)
2448 : failed : failed : 16.895275228 (s) : [0-9]{1,3}[A-Za-z]
2449 : failed : failed : 0.623591512 (s) : ^[0-9]*$
2450 : unparsable : unparsable : 0.071226589 (s) : ^(10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57
2451 : failed : error init : 0.128354308 (s) : ^
2452 : unparsable : unparsable : 0.081547095 (s) : (
2453 : failed : error init : 0.101189418 (s) : ^
2454 : failed : failed : 1.443865251 (s) : \\
2455 : failed : failed : 1.893636327 (s) : /
2456 failed : unparsable : 0 (s) : Please check your regex.
2457 : failed : error init : 0.162381527 (s) : ^
2458 failed : unparsable : 0 (s) : Please check your regex.
2459 : failed : failed : 2.206153018 (s) : /
2460 : unparsable : unparsable : 0.080888603 (s) : [
2461 : failed : failed : 1.913204991 (s) : 0[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-9]
2462 : failed : failed : 3.694271949 (s) : ([0-9]*[1-9][0-9]|1[2-9][0-9]|100[0-9][0-9])
2463 : failed : failed : 1.403694618 (s) : \\b
2464 : failed : failed : 0.657170081 (s) : ^\\d{0,3}\\d{0,3}\\d{0,3}\\d{0,3}\\d{0,3}$Explanati
2465 : failed : pumping failed : 40.568102916 (s) : (0|2)+\\d{1,3}
2466 : failed : failed : 0.811712539 (s) : ^[1-9]{1,2}[\\u00B2-\\u00D6]?[0-9]{1,3}$
2467 : failed : failed : 2.315773233 (s) : (00|1?)(\\d{2}?)(\\d{3})
2468 : unparsable : unparsable : 0.088414386 (s) : {0, 2}[1-9][0-9]{0,3}
2469 : unparsable : unparsable : 0.089284885 (s) : {0,2-pow(10,-i)}
2470 : failed : failed : 3.973671805 (s) : ([0-9]|1[0-9]|2[0-3]|[4-9][0-9]){0,2}[0-9]
2471 : failed : failed : 0.504711657 (s) : (\\w+)
2472 : failed : failed : 0.355402109 (s) : CREATE TABLE my_table (  id INT AUTO_INCREMENT PRIMARY KEY,  my_key VARCHAR(255) NOT NULL,  my_list VARCHAR(255) NOT NULL,  PRIMARY KEY (id) ) INSERT INTO my_table (my_key, my_list) VALUES ('my_key1','my_value1, my_value2, my_value3')
2473 failed : unparsable : 0 (s) : Please check your regex.
2474 : unparsable : unparsable : 0.081866254 (s) : create table mytable(id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(20) NOT NULL);    insert into mytable (name) values ('John');    insert into mytable (name) values ('Alex');    insert into mytable (name) values ('Peter');    insert into mytable (name) values ('Peter');    insert into mytable (name) values ('Peter');    insert into mytable (name) values ('
2475 : failed : failed : 0.140005926 (s) : SELECT * FROM table WHERE column1 REGEXP \"
2476 : failed : failed : 0.219311153 (s) : ^[a-z0-9]{3,20}$
2477 : failed : failed : 1.058275644 (s) : \\w+'
2478 : failed : failed : 13.828672206 (s) : \\w*\\s(\\w+)\\s*(.*?)\\s*\\S+
2479 failed : unparsable : 0 (s) : Please check your regex.
2480 : failed : failed : 7.327483216 (s) : SELECT     *    FROM (        SELECT             *        FROM test        WHERE             id = 1        OR             id = 2        OR             id = 3    )   WHERE       some_condition = 'your_value'   AND some_other_condition = 'your_other_value' ORDER BY some_name_column ASC;
2481 : failed : failed : 15.077122062 (s) : (?<!(?!-)[a-z]{3,4})(?!-)[a-z0-9]{3,4}
2482 : failed : failed : 1.246838188 (s) : m/^
2483 failed : unparsable : 0 (s) : Please check your regex.
2484 : unparsable : unparsable : 0.152552921 (s) : \\b(
2485 : failed : failed : 0.832875999 (s) : \\w{3,4}
2486 : unparsable : unparsable : 0.074927369 (s) : ^\\s*(([a-zA-Z\\-]{3}[a-zA-Z\\-]{2}[a-zA-Z\\-]{1})+[a-zA-Z\\-\\s]+)\\s*(\\.([a-zA-Z\\-]{1}[a-zA-Z
2487 : failed : failed : 11.865983452 (s) : ^([\\w-]+( [\\w-]+)+)$
2488 : failed : failed : 0.157682628 (s) : ^(\\w)(\\w)(\\w\\w)(\\w\\w\\w\\w)(\\w\\w\\w\\w)(\\w\\w\\w\\w\\w)
2489 : failed : failed : 2.137001674 (s) : \\(([\\w-]+)\\)
2490 : failed : failed : 3.402984853 (s) : (?<=mxn).{1,3}(?=mxn)
2491 : failed : failed : 6.640828772 (s) : [A-Z]{3}[-\\d]{2}, [A-Z]{2}[-\\d]{2}-[A-Z]{3}[-\\d]{2}
2492 : failed : failed : 0.453994553 (s) : ^\\+[0-9]+$
2493 : failed : failed : 0.249499214 (s) : 0-39(0-9)
2494 : unparsable : unparsable : 0.070163308 (s) : +([1-9][0-9]) [ap]m-[A|P][L|M]MExamp
2495 : unparsable : unparsable : 0.080413684 (s) : (\\d\
2496 : unparsable : unparsable : 0.084825245 (s) : (\\d|\\d\\d|\\d\\d\\d\\d|\\d\\d\\d\\d|\\d\\d\\d|\\d\\d) (\\d|\\d\\d|\\d\\d\\d|\\d\\d\\d|\\d\\d|\\d\\d) (\\d|\\d\\d|\\d\\d|\\d\\d|\\d\\d|\\d\\d) (\\d|\\d
2497 : unparsable : unparsable : 0.053824071 (s) : ^(?P<day_of_week>^[0-2]?[0-9]|0?$)(?P<month_day>0?[1-9]|1[0-2]|[3-9])$
2498 : failed : failed : 18.366144698 (s) : ^   # The start of a line..* $ # 0 or more characters that are not newline or line terminator (match anything, including nothing).  GMT  # The string GMT.  
2499 failed : unparsable : 0 (s) : Please check your regex.
2500 failed : unparsable : 0 (s) : Please check your regex.
2501 : failed : failed : 0.725688389 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
2502 : failed : failed : 0.140205189 (s) : ^[1-9]\\d/1[1-9]\\d/\\d{4}$
2503 : failed : pumping failed : 147.701777056 (s) : [a-zA-Z]+\\/[a-zA-Z]+\\/[a-zA-Z]+
2504 : failed : failed : 0.171107968 (s) : ^\\d{2}\\/\\d{2}\\/\\d{4}$
2505 : failed : failed : 0.521906466 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
2506 : failed : failed : 0.688675338 (s) : \\d{2}/\\d{2}/\\d{4}
2507 : failed : failed : 0.736552193 (s) : ^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$
2508 : failed : failed : 0.230594213 (s) : ^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$
2509 : failed : failed : 0.207997377 (s) : ^\\d{2}/\\d{2}/\\d{4}$
2510 : failed : error init : 0.146001894 (s) : ^
2511 : unparsable : unparsable : 0.068373577 (s) : ^(((\\\\w+).*(\\\\w+))|(\\\\w+).*\\\\w+$
2512 : failed : failed : 0.520983457 (s) : \\[\\s*#(.*)\\s*\\]
2513 : failed : failed : 2.241400592 (s) : ^#.+$
2514 : unparsable : unparsable : 0.076456162 (s) : **(\\/[^\\n.]
2515 : failed : failed : 0.466581464 (s) : ^#.*$
2516 : failed : failed : 0.687756036 (s) : ^[ \\t]*#\\\\b[ \\t]*[ \\t]*/*[ \\t]*#[ \\t]*$
2517 : unparsable : unparsable : 0.086028808 (s) : ^#(?P<level>\\d+)(?P<text>.*)$
2518 : failed : failed : 6.369691087 (s) : ^#.*$
2519 : failed : pumping failed : 22.006160516 (s) : \\*(.*?)\\*
2520 : failed : failed : 1.270483956 (s) : /^[ ]*[^\\n ]*$/         ^         |----         |----         |----
2521 : failed : failed : 0.326137067 (s) : (Regex_exact_match_all) /\\d{2}/\\d{1}\\d{2} /\\d{1}\\d{2}/\\d{4}
2522 failed : unparsable : 0 (s) : Please check your regex.
2523 : unparsable : unparsable : 0.102803841 (s) : (([0-9]{1,2}\\.?[0-9]{1,2}\\.[0-9]{1,4})([0-9]{1,2})?[0-9]{1
2524 : unparsable : unparsable : 0.064865748 (s) : (?<!\\S)\\d{1,2}(.\\d{1,2}
2525 : unparsable : unparsable : 0.064027238 (s) : (?P<day_group1>\\d{1,2}), (?P<month_group1>\\d{1,2}), (?P<year_group1>\\d{1,4}),
2526 failed : unparsable : 0 (s) : Please check your regex.
2527 : failed : failed : 1.063833262 (s) : (?m)(^(19|20)(0)(0)(0))
2528 : failed : failed : 1.031858335 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
2529 : failed : failed : 0.255454486 (s) : ^([1-9]\\d{1,2})\\/([1-9]\\d{1,2})\\/(19|20)\\d{4}$
2530 : failed : failed : 1.293006803 (s) : \\b
2531 : unparsable : unparsable : 0.087519329 (s) : [0-9]{1,3}[a-fA-F]{1,
2532 : unparsable : unparsable : 0.099703786 (s) : ^([0-9a-f]{2
2533 : unparsable : unparsable : 0.058695824 (s) : (\\\\d+, \\\\d+, \\\\d+, \\\\d
2534 : unparsable : unparsable : 0.076556431 (s) : ^([0-9A-Fa-f]{2
2535 : unparsable : unparsable : 0.073498634 (s) : \\d{1,
2536 : failed : error init : 0.113165124 (s) : ^
2537 : failed : failed : 0.140681251 (s) : ^\\D*[0-9a-fA-F]{5}
2538 : unparsable : unparsable : 0.083667517 (s) : ^[0-9a-fA
2539 : unparsable : unparsable : 0.054027302 (s) : (\\\\d{2
2540 : unparsable : unparsable : 0.072229287 (s) : ^[0-9a-fA-F]{2}[0-9a-fA-F]{2}[0-9a-fA-F]{
2541 : failed : failed : 0.135576972 (s) : ^(13[0-9][0-9]|[01][0-9]([0-9]{3}))$
2542 : failed : failed : 0.132826802 (s) : ^(?=(\\d{2}\\.){3}\\d{3})$
2543 : failed : failed : 0.180087363 (s) : ^(\\((1|2|3|4|5|6|7|8|9)\\)){1,2}$This is used to validate an Australian telephone number.Validate a phone number here
2544 : failed : failed : 0.754235917 (s) : [0-9][0-9]([0-9][0-9])?Here, a regular expression is created using the regular expression engine.
2545 : failed : failed : 0.575462044 (s) : (^[0-9]{1,3}(-|\\))[0-9]{3}$
2546 : unparsable : unparsable : 0.074873348 (s) : (\\(\\d\\d\\d\\d[-.\\s]\\d\\d\\d[-.\\s]\\d\\d\\d[-.\\s]\\d\\d\\d)))
2547 : failed : failed : 0.098267647 (s) : ^[1-9][0-9]{1,2}$
2548 : unparsable : unparsable : 0.065845874 (s) : ^\\(?[1-9][0-9]?[0-9]?[0-9]?[0-9]?[0-9][0-9]?[0-9]?[0-9]?[0-9] [0-9]?[0-9]?[0-9]?[0-9]?[0
2549 : failed : failed : 0.897324236 (s) : r'^\\((\\d{1,3})\\)$'
2550 : failed : failed : 0.267709756 (s) : (^\\(\\d{3}\\)\\d{3}$|^\\(\\d{3}\\)\\d{4}$)
2551 : failed : failed : 2.078975283 (s) : For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answ
2552 : failed : failed : 2.380843474 (s) : For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answ
2553 : failed : failed : 2.16176694 (s) : For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answ
2554 : failed : failed : 2.205374349 (s) : For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answ
2555 : failed : failed : 1.58096735 (s) : For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answ
2556 : failed : failed : 2.083258414 (s) : For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answ
2557 : failed : failed : 1.808784472 (s) : For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answ
2558 : failed : failed : 1.737255096 (s) : For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answ
2559 : failed : failed : 1.285179877 (s) : For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answ
2560 : failed : failed : 1.97764909 (s) : For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.Allows 1.0, 1.00, 1, 1.,.9,.90, 0.90.Generate a RegEx for this description. Answ
2561 : failed : failed : 0.173081664 (s) : const regex = /^[a-zA-Z][a-zA-Z0-9]*$/;
2562 : failed : failed : 0.971305724 (s) : /^[a-zA-Z0-9_]{1,50}$/;
2563 : failed : failed : 0.177279064 (s) : var regex = new RegExp(/^[a-zA-Z0-9_]+$/);
2564 : failed : failed : 0.496138161 (s) : '^[a-zA-Z0-9]+
2565 : failed : failed : 0.849649039 (s) : ^[a-zA-Z_]{1,63}$
2566 : failed : failed : 3.091281795 (s) : (?i)^[a-z][a-z0-9_]*$
2567 : failed : failed : 4.945431609 (s) : [a-zA-Z0-9_-]*[a-zA-Z0-9_]*
2568 : failed : failed : 8.157952227 (s) : ^[a-zA-Z_]{3}[a-zA-Z0-9_]*$      (^[a-zA-Z_]{3}[a-zA-Z0-9_]*)      ^      # match start
2569 : success : init : 2.819411779 (s) : ^[a-zA-Z_0-9]([a-zA-Z0-9_]*[a-zA-Z0-9])*$Explanati
2570 failed : unparsable : 0 (s) : Please check your regex.
2571 : failed : failed : 0.196401052 (s) : Tel.|
2572 : unparsable : unparsable : 0.127669215 (s) : ^(?=
2573 : failed : failed : 0.76692584 (s) : \\d{2}-\\d{2}-\\d{4}
2574 : unparsable : unparsable : 0.068665303 (s) : (?=.*)(^
2575 : unparsable : unparsable : 0.080526364 (s) : \\(
2576 : failed : failed : 27.543649576 (s) : [0-9]{4}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[.-][0-9]{2}
2577 : unparsable : unparsable : 0.078975921 (s) : ([0-9]|[0-9]{1,2})[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0
2578 : failed : failed : 0.604540206 (s) : \\w+\\.\\d{3}\\&#231;&#227;o
2579 : failed : failed : 0.400825319 (s) : (9\\\\d{0,6})
2580 : unparsable : unparsable : 0.077839653 (s) : (?=\\d\\d[-\\d]\\d[-\\d]\\d[-\\d]\\d[-\\d]\\d\\d\\d\\d\\d\\d)(?=\\d\\d[-\\d]\\d[-\\d]\\d[
2581 : failed : failed : 4.435329598 (s) : ^[0-9a-fA-F]{0,256}$
2582 : failed : failed : 0.346369484 (s) : [0-9a-fA-F]{1,16}
2583 : failed : failed : 0.183398793 (s) : ^[0-9a-fA-F]{0,4}$
2584 : unparsable : unparsable : 0.074969558 (s) : ^(?P<hexStr>\\b[0-9a-fA-F]{0,64}\\b)(?!\\b$)
2585 : failed : failed : 2.812947374 (s) : ^[0-9a-fA-F]+$
2586 : failed : failed : 5.490080151 (s) : ^[0-9a-fA-F]{1,}$
2587 : failed : failed : 0.184991226 (s) : ^[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}$
2588 : unparsable : unparsable : 0.058536777 (s) : (?P<hex_string>\\w+)\\b
2589 : failed : failed : 6.115506158 (s) : ^[0-9a-fA-F]+$
2590 : failed : failed : 0.14913969 (s) : ^[0-9A-Fa-f]{1,8}$
2591 : failed : failed : 0.293744709 (s) : THE Complex Password Filter Matching 3 of 4 Character catagori
2592 : failed : failed : 0.26038583 (s) : THE Complex Password Filter Matching 3 of 4 Character catagori
2593 : failed : failed : 0.215260358 (s) : THE Complex Password Filter Matching 3 of 4 Character catagori
2594 : failed : failed : 0.212624803 (s) : THE Complex Password Filter Matching 3 of 4 Character catagori
2595 : failed : failed : 0.250263394 (s) : THE Complex Password Filter Matching 3 of 4 Character catagori
2596 : failed : failed : 0.283591756 (s) : THE Complex Password Filter Matching 3 of 4 Character catagori
2597 : failed : failed : 0.245447286 (s) : THE Complex Password Filter Matching 3 of 4 Character catagori
2598 : failed : failed : 0.20206621 (s) : THE Complex Password Filter Matching 3 of 4 Character catagori
2599 : failed : failed : 0.195078155 (s) : THE Complex Password Filter Matching 3 of 4 Character catagori
2600 : failed : failed : 0.241972599 (s) : THE Complex Password Filter Matching 3 of 4 Character catagori
2601 : failed : failed : 0.204699221 (s) : ^(\\d+-\\d+)$
2602 : unparsable : unparsable : 0.089814086 (s) : (\\d{1,2}a)(\\d{1,2})|(\\d{1,2}b)(\\d{1,2})|(\\d{1,2}c)(\\d{1,
2603 : unparsable : unparsable : 0.125833416 (s) : ^(?=.*a)(?=.*b)(?=.*c)(?=.*d)(?=.*e)(?=.*f)(?=.*g)(?=.*h)(?=.*i)(?=.*
2604 : failed : failed : 1.289213219 (s) : [a-zA-Z]+
2605 : failed : failed : 0.53808966 (s) : (?<=^(?=.{4}|.{5}))\\d
2606 : unparsable : unparsable : 0.071107446 (s) : /^(?=\\d{10})(?=
2607 : failed : pumping failed : 65.467210104 (s) : ([A-Z]?[0-9]*)\\.([0-9]*)\\.([0-9]*)\"
2608 : failed : failed : 1.242086609 (s) : (\\d\\d)\\d{7}|\\d{5}\\d{5}
2609 failed : unparsable : 0 (s) : Please check your regex.
2610 : failed : failed : 4.696224662 (s) : \\d{1,2}
2611 : failed : failed : 1.485870221 (s) : ([a-zA-Z]{4,32})
2612 : failed : failed : 0.697686913 (s) : ^[a-zA-Z0-9 ]{4,32}$
2613 : failed : failed : 0.340421666 (s) : ^[a-zA-Z ]{4,32}$
2614 : failed : failed : 0.251475204 (s) : ^[A-Za-z]{4,32}$
2615 : unparsable : unparsable : 0.099456232 (s) : ^[A-Za-z\\s][A-Za-z\\s][A-Za-z\\s][A-Za-z\\s][A-Za-z\\s][A-Za-z\\s][A-Za
2616 : failed : failed : 0.328788832 (s) : ^[a-zA-Z ]{4,32}$
2617 : failed : failed : 0.363557501 (s) : ^[a-zA-Z\\s]{4,32}$
2618 : failed : failed : 0.318362297 (s) : ^[a-zA-Z0-9]{4,32}$ ---
2619 : unparsable : unparsable : 0.065061244 (s) : (?=^[a-zA-Z ]{3,32}$) &amp; (?=^[a-zA-Z ]+$) &amp; (?=^\\\\S+$)(?=^[a-zA-
2620 : failed : failed : 0.341226694 (s) : ^[a-zA-Z]{4,32}$
2621 : failed : failed : 3.842695698 (s) : (?i)(\\d+\\.\\d*\\.\\d*\\.\\d*\\.\\d*\\.\\d*\\.\\d*\\.\\d*\\.\\d*)
2622 : unparsable : unparsable : 0.117688815 (s) : [0-9a-fA-F]{0,
2623 failed : unparsable : 0 (s) : Please check your regex.
2624 : failed : failed : 5.927225654 (s) : \\b((\\d{1,3}\\.){3}\\d{1,3}\\.){3}\\d{1,3}\\b
2625 : failed : failed : 1.632946306 (s) : /^
2626 : unparsable : unparsable : 0.110226481 (s) : >>> m = re.compile(\"^
2627 : failed : failed : 0.218959745 (s) : ^([0-9a-fA-F]{1,4}\\.){3}[0-9a-fA-F]{1,4}$
2628 : unparsable : unparsable : 0.0839044 (s) : /^(\\d+(\\.\\d+)?[a-zA-Z0-9\\-_\\+\\/\\.\\s]*){2,}\\.(\\d+(\\.\\d+)?[a-zA-Z0-9\\-_\\+\\/\\.\\s]*){2,}\\.(\\d+(\\.\\d+)?[a-zA-Z0-9\\-_\\+\\/\\.\\s]
2629 : failed : failed : 61.887314919 (s) : [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}.[0-9]{1,3}|\\[(0x[0-9a-fA-F]{1,4})\\]
2630 : failed : error init : 0.097857298 (s) : ^
2631 : failed : failed : 0.97418196 (s) : ^\\d{3}|\\d{4}$
2632 failed : unparsable : 0 (s) : Please check your regex.
2633 : failed : failed : 0.749160974 (s) : ^CVC\\d{4}$
2634 : failed : failed : 0.642033145 (s) : ^(3[47][89]|4[0-9][0-9]|5[1-9]\\d)\\d{3}$
2635 : failed : failed : 0.196948177 (s) : ^\\d{3}-\\d{2}-\\d{2}$
2636 : failed : failed : 0.10027698 (s) : ^\\d{3}
2637 : failed : failed : 1.294288624 (s) : (2[0-9]|3[0-9]|4[0-9])
2638 : failed : failed : 0.655464297 (s) : /^\\d{3}$/;
2639 : unparsable : unparsable : 0.05983103 (s) : (?=.{3}$)(?=.{3}$)(?=.{4}$)(?=.{4}$)(?=.{4}$)[0-9]{3}[0-9]{3}[0-9]{
2640 : failed : failed : 2.429894847 (s) : ([\\d]{3}|[\\d]{4})
2641 : failed : pumping failed : 163.712860039 (s) : (.{2,})([a-zA-Z])|([0-9])
2642 : failed : failed : 37.436637092 (s) : (?<![A-z])(?![^A-z0-9 ])[A-z]\\w{1,}
2643 : failed : failed : 0.548816959 (s) : (^[a-zA-Z]{1,2} [a-zA-Z]{1,2} [a-zA-Z]{1,2} [a-zA-Z]{1,2})
2644 : failed : failed : 0.163341154 (s) : /^\\D*\\d{2}( [A-Z]\\d{2})? +$/.
2645 : failed : failed : 0.912134879 (s) : [a-zA-Z ]+
2646 : failed : failed : 0.233068365 (s) : [A-Za-z][A-Za-z0-9 ]{0,25}
2647 : failed : failed : 1.266068699 (s) : (?=^.{2,30}$)(?=.*[a-z])(?=.*\\s[a-z])
2648 : failed : failed : 0.734271652 (s) : ^[a-zA-Z\\s]+$
2649 : failed : failed : 1.215959854 (s) : [A-Z][a-z\\s]{0,100}
2650 : unparsable : unparsable : 0.066086233 (s) : \\b(?=\\w+
2651 : failed : failed : 2.561243933 (s) : \\s?[0-9]{3}\\s(\\.|_)?[0-9]{3}\\s(\\.|_)?[0-9]{3}
2652 : failed : failed : 0.661278985 (s) : ^\\+?[0-9]{2}[0-9]?[0-9]?[0-9]?[0-9]? - \\d{9}$
2653 : failed : timeout : 600 (s) : [^^-]+\\d{1,5}-\\d{1,5}[^-]
2654 : unparsable : unparsable : 0.060553172 (s) : \\+?(?P<area>\\d{1,2})\\d{3}-\\d{4}-\\d{2}
2655 : failed : failed : 14.366222226 (s) : ^\\+?(\\d{2,3})([-a-zA-Z]{1})$
2656 : failed : failed : 0.341350886 (s) : r'^(\\d{1,2}|\\d{1})?\\.?\\s?((\\d{1,3})?(\\.\\d{1,3})?)?(\\d{3})?$'
2657 : failed : failed : 0.273353033 (s) : .{3}?[0-9]{4,9}This will match a phone number where the city code is any number between 2 and 9 followed immediately by any number of digits. Also matches the country code for the phone number.
2658 : failed : failed : 0.242060535 (s) : ^[+]?(\\d{1,2}[-]|\\d{1,2})[ 0-9]{1,3}[-]?(\\d{1,2})?$ The above RegEx will match numbers with an optional plus sign, one to two digits, followed by
2659 failed : unparsable : 0 (s) : Please check your regex.
2660 : failed : pumping failed : 31.815014944 (s) : (\\+?|0[0-9]|1[0-9]|2[0-9]|3[01])[- ]+.*
2661 : unparsable : unparsable : 0.060344011 (s) : /^[0-9]{1,
2662 : unparsable : unparsable : 0.071421645 (s) : .{1,2}[a,p][0-9]{1,
2663 : failed : failed : 0.225806487 (s) : [0-19] [0-9]? [AM|PM]This is a normal date in the format yyyy-mm-dd, where a number from 1 - 31 is used to represent the day of the year.Generate a RegEx for this description. Answ
2664 : unparsable : unparsable : 0.060177899 (s) : ^(\
2665 : failed : failed : 0.731226029 (s) : \"((0|1[1-9])|2[0-2])[0-5][0-9]\\s?[0-5][0-9][0-5]\"
2666 : failed : failed : 26.813181477 (s) : [0-2]?[0-9]|3[0-1]|AM|PM
2667 : unparsable : unparsable : 0.080600283 (s) : ^(\\d{1,2})\\s?[AP]M\\s?(\\d{1,2
2668 : failed : failed : 0.268930621 (s) : ^(\\d{1,2})\\s*[AP]M$
2669 : failed : failed : 0.144823337 (s) : ^(1|2)\\ 
2670 : failed : failed : 0.681599978 (s) : 1
2671 : failed : failed : 0.183093943 (s) : ^\\d{5}-\\d{4}$
2672 : failed : failed : 0.963065733 (s) : /^\\d{5}
2673 : failed : failed : 1.34722356 (s) : \\s?
2674 : failed : failed : 0.316746692 (s) : ^\d{5}[ -]?\d{4}$
2675 : failed : failed : 2.150311237 (s) : \\b5[0-9]{3}[- ]4[0-9]{0,4}\\b
2676 : failed : failed : 0.249221333 (s) : ^\\d{5}\\-(\\d{4})?$
2677 : failed : failed : 0.166834615 (s) : ^\\d{5}
2678 : failed : failed : 0.883422553 (s) : ^[0-9]{5} | [0-9]{4}(-[0-9]{4})$
2679 : failed : failed : 1.187098038 (s) : [A-Z]\\d{3}\\s\\d{3}$
2680 : failed : failed : 1.845308487 (s) : ht
2681 : failed : failed : 0.53654644 (s) : \\b[0-9]{5}\\s[0-9]{4}\\b
2682 : failed : failed : 1.344739658 (s) : [0-9]{4}-?[0-9]{3}
2683 : failed : failed : 0.959090079 (s) : ^\d{1,3}-?\d{3}-?\d{4}$
2684 : unparsable : unparsable : 0.085206248 (s) : ?
2685 : failed : failed : 0.801690661 (s) : (\\d{5})(\\d{4})([\\s-]?)(\\d{5})
2686 : failed : failed : 0.748256149 (s) : \\d{5}[ -]?\\d\\d{4}
2687 : failed : failed : 3.590350715 (s) : \\b(?=.*?[a-zA-Z])[a-zA-Z]{5}
2688 : failed : failed : 0.672459062 (s) : ^[0-9]{5}[ -]?[0-9]{4}$
2689 : failed : failed : 0.456905384 (s) : ^\\d{3} [- ]?\\d{4}$
2690 : failed : failed : 41.851840382 (s) : [0-9]{5}-[0-9]{4}
2691 : failed : failed : 15.127793759 (s) : (?<!\\d)\\s+[A-Z]+\\s+[a-z]+
2692 : failed : failed : 54.478922602 (s) : (?<![0-9]{10})([0-9]{2}[A-Za-z]{5}[0-9]{5})(?![0-9]{10})
2693 : unparsable : unparsable : 0.085360206 (s) : (?<![A-Za-z0-9\\s]\\s[A-Za-z0-9\\s]\\s[A-Za-z0-9\\s]\\s[A-Za-z0-9\\s]\\s[A-Za-z0
2694 : failed : failed : 0.684013088 (s) : (\\d{4})([A-Z][a-z]{2})
2695 : unparsable : unparsable : 0.066991629 (s) : (?!
2696 : failed : failed : 0.549713166 (s) : \\b(\\d{4}-\\d{2}-\\d{2}-\\d{2})\\b
2697 : failed : error init : 0.092472365 (s) : ^
2698 : unparsable : unparsable : 0.080337401 (s) : [\\d-]{1,2}\\d{2}[T-Z]{2
2699 failed : unparsable : 0 (s) : Please check your regex.
2700 : failed : failed : 0.790393667 (s) : \\d{2}-\\d{4}
2701 : failed : failed : 0.175053156 (s) : Validate american date forma
2702 : failed : failed : 0.208093898 (s) : Validate american date forma
2703 : failed : failed : 0.152766141 (s) : Validate american date forma
2704 : failed : failed : 0.165689561 (s) : Validate american date forma
2705 : failed : failed : 0.200115969 (s) : Validate american date forma
2706 : failed : failed : 0.159618412 (s) : Validate american date forma
2707 : failed : failed : 0.130679381 (s) : Validate american date forma
2708 : failed : failed : 0.190470436 (s) : Validate american date forma
2709 : failed : failed : 0.152860378 (s) : Validate american date forma
2710 : failed : failed : 0.227292389 (s) : Validate american date forma
2711 : failed : error init : 0.104668042 (s) : ^
2712 : unparsable : unparsable : 0.061044563 (s) : [01][0-9]{2}-02-29|[12][0-9]{3}-03-31|[01][0-9]{2}-04-30|[12][0-9]{3
2713 : failed : error init : 0.133479364 (s) : ^
2714 : failed : failed : 0.200363533 (s) : RegEx ^\\d{4}-\\d{2}-\\d{2}$
2715 : failed : failed : 1.979131656 (s) : (0?[1-9]|1[012]|2[0-9]|3[01])-?[0-9]{2}-?[0-9]{2}
2716 : failed : failed : 0.194224185 (s) : \\d{4}-\\d{2}-\\d{2} [AP]M (and the year MUST be 4 digits and the month must be 2 digits and the day must be 2 digits).
2717 : failed : failed : 2.04791486 (s) : \\b
2718 : failed : failed : 0.2118863 (s) : ^(\\d{4})-(\\d{2})-(\\d{2})$
2719 : failed : failed : 0.171333069 (s) : ^[0-3][0-9]-[[0-9]-]{1,2}
2720 : unparsable : unparsable : 0.073338224 (s) : ^(?=.*?-)(?=.*?)(?=.*?)(?=.*?)(?=.*?)(?=.*?)(?=.*?)(?=.*?)(?=.*?)(?=.*?
2721 : unparsable : unparsable : 0.050979104 (s) : 1(?<IP>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|2)(?<IP>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})
2722 : failed : failed : 2.882807104 (s) : /
2723 : failed : failed : 0.130815867 (s) : #!/bin/bash echo \"
2724 : unparsable : unparsable : 0.086897094 (s) : (
2725 : failed : failed : 1.264106124 (s) : ^[a-zA-Z0-9]{1,3}\\.[a-zA-Z0-9]{1,3}\\.[a-zA-Z0-9]{1,3}\\.[a-zA-Z0-9]{1,3}$
2726 : failed : failed : 0.517891217 (s) : ^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$ \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$
2727 : failed : failed : 26.913405317 (s) : \\s+.+?\\s+((\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})?)\\s+(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})
2728 : unparsable : unparsable : 0.093068932 (s) : IP[0-9]{1,
2729 failed : unparsable : 0 (s) : Please check your regex.
2730 : unparsable : unparsable : 0.07243912 (s) : ^(?P<IP>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}).*[ -](?P<port>(\\d{1,5}))$
2731 : unparsable : unparsable : 0.073877353 (s) : (([0-9][0-9]|2[0-8][0-9]|[0-9]|7[0-3])[-]([0-9]|[0-9][
2732 : unparsable : unparsable : 0.070649318 (s) : (\\d{3}[-\\s]?\\d{3}[-\\s]?\\d{4}|9\\d{3})\\.?\\d{3}\\.?\\d{3
2733 : failed : failed : 0.119209673 (s) : ^\\d{3}[-\\.\\s]?\\d{3}[-\\.\\s]?\\d{4}$
2734 : unparsable : unparsable : 0.086790244 (s) : ^\\(?\\d{3}\\)?\\s?\\d{3}\\)?[-&quot;\\+\\(]?[ \\t]+\\d{3}[-&quot;\\
2735 failed : unparsable : 0 (s) : Please check your regex.
2736 : unparsable : unparsable : 0.092047699 (s) : (?<no-dash-or-space-allowed>\\(\\d{3}\\)\\s*\\)In other words, a number with 3 digits, with optional trailing spaces and dashes, and only one space allowed.
2737 : failed : failed : 0.480364324 (s) : [\\(]{3}[- ][0-9]{3}[- ][0-9]{2,3}\\([0-9]{4}\\)\\]
2738 failed : unparsable : 0 (s) : Please check your regex.
2739 : unparsable : unparsable : 0.06510194 (s) : \\(
2740 : unparsable : unparsable : 0.061186207 (s) : ^(\\(\\s*)(&quot;|&quot;\\s*)(([0-9]{9})([0-9]{9})([0-9]{4})(\\
2741 : failed : failed : 0.935107398 (s) : -0.1, 0.01, 0.0005, -0.00005, 0.000000001
2742 : failed : failed : 0.126532255 (s) : ^[1-9][0-9]?
2743 : failed : failed : 8.595275131 (s) : (^[-+]?[0-9]*\\.[0-9]+)(\\.?[0-9]+)$
2744 : unparsable : unparsable : 0.107986757 (s) : [^-\\s
2745 : unparsable : unparsable : 0.067758996 (s) : r\"(?P<fraction>\\d+
2746 : failed : failed : 0.513492509 (s) : Positive decimal values could be represented by a positive decimal point (.) followed by one or more digits. Negative decimal values could be represented by a negative decimal point (-) followed by one or more digits.
2747 failed : unparsable : 0 (s) : Please check your regex.
2748 failed : unparsable : 0 (s) : Please check your regex.
2749 : failed : failed : 10.655404924 (s) : [0-9]{1,3}\\.?[0-9]{0,2}(,[0-9]{3})*\\.[0-9]{1,4}
2750 : unparsable : unparsable : 0.077355747 (s) : [-, ]?(\\d
2751 : failed : failed : 8.648507304 (s) : ^[1-9][1-9][0-9]|[1-9][0-9]{2}-[0-9][0-9]$
2752 : failed : failed : 0.167208847 (s) : ^[0-9]{5}(-)?[0-9]{4}$
2753 : failed : failed : 0.742100031 (s) : r'^[- ]\\d{5}$'
2754 : failed : failed : 44.63606483 (s) : ([0-9]{5})?-[0-9]{4}-
2755 : failed : failed : 0.188761466 (s) : ^\\d{5}(-\\d{5})?$
2756 : failed : failed : 44.067811925 (s) : [0-9]{2,5}-[0-9]{4}
2757 : failed : failed : 0.192402334 (s) : ^[-]?(1[0-9]|2[0-4][0-9]|25[0-5])[-]?[0-9]{4}$
2758 : failed : failed : 169.54654156 (s) : [A-Z]{1,3}\\s[0-9]{3}\\-?[0-9]{3}|[A-Z]{1,4}\\s[0-9]{5}
2759 : failed : failed : 0.203975065 (s) : ^\\d{2}
2760 : unparsable : unparsable : 0.097385194 (s) : /^[1-9][0-9]|[1-9]?[0-9][0-9]|[1-9][0-9]?[0-9][0-9][0-9]|[1-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9
2761 : failed : failed : 0.169837419 (s) : RegEx 4[1-3][0-9]{12,15}
2762 : failed : failed : 0.192848429 (s) : ^\\d{4}\\d{12,15}$
2763 : failed : failed : 0.211752208 (s) : ^^4[1-9][1-9][1-9][1-9][0-9][0-9]{8}$
2764 : failed : failed : 0.185987962 (s) : ^\\d{4}\\d{5,11}\\b
2765 : failed : failed : 0.169290314 (s) : ^(\\d{4})(\\d{1,2})(\\d{3,4}$)
2766 : failed : error init : 0.124754115 (s) : ^
2767 : failed : failed : 0.168942533 (s) : ^4[1-9][0-9]{0,2}[0-9]{0,3}[0-9]{0,4}$
2768 : failed : failed : 0.644180607 (s) : ^4[1-9][0-9]{0,3}$
2769 : failed : failed : 0.769611149 (s) : ^\\\\d{4}[12|13|14|15]\\\\d$
2770 : failed : failed : 0.237668389 (s) : ^4[0-9]{4,15}$
2771 : failed : failed : 0.201261083 (s) : ^51[13578]\\d{13}[12]$
2772 : failed : failed : 11.123588588 (s) : [A-Z]{2}[0-9]{14}[A-Z]
2773 : unparsable : unparsable : 0.122607265 (s) : /^(?=
2774 : failed : failed : 0.171932743 (s) : ^51[0-9]{13}$
2775 : failed : failed : 0.276757037 (s) : (^51[5-9]{3}[0-9]([0-9]{1}[0-9]{1}[0-9]{1})?[0-9]$)
2776 : failed : failed : 2.266484224 (s) : (?i)\\b
2777 : failed : failed : 0.982344375 (s) : /^51
2778 : unparsable : unparsable : 0.0777472 (s) : \\b[0-9]{5}\\D[\\d]{14}\\b|\\b[0-9]{5}\\D[\\d]{15}\\b|\\b[0-9]{5}\\D[\\d]{16}\\b|\\b[0-9]{5}\\D[\\d]{17}\\b|\\b[0-9]{
2779 : failed : failed : 0.164347348 (s) : ^51
2780 : failed : failed : 0.873967578 (s) : ^[51-55]\\d{13}$
2781 : unparsable : unparsable : 0.078245082 (s) : *(?i)(
2782 : failed : failed : 0.917215284 (s) : [A-Z]{2}\\s?[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}
2783 : failed : failed : 3.061148217 (s) : ^AN\\s(1|2)\\sAAN|AAN\\s(3|4)\\sANN|AANN\\s(5|6)\\sANA$
2784 : failed : failed : 0.1589385 (s) : ^[A-Z]{1}[A-Z][a-z]{1}[A-Z][a-z]{1}$
2785 : unparsable : unparsable : 0.069219992 (s) : /^[A-Z]{1}[A-Z]{1}[A-Z]{1}$|^[A-Z]{1}[A-Z]{3}[A-Z]{2}$|^[A-Z]{1}[A-Z]{1}[
2786 : failed : failed : 0.154943098 (s) : ^A[0-9]{3}$
2787 failed : unparsable : 0 (s) : Please check your regex.
2788 : failed : failed : 3.004852086 (s) : [A-Z]{3}\\s[0-9]{3}\\s[A-Z]{3}
2789 : failed : failed : 4.63340724 (s) : [^A-Za-z0-9]
2790 : failed : failed : 0.203252342 (s) : a(n(a|n)a)? (A string of three characters. The 'a' could be either 'a' or 'n') where 'a' or 'n' can appear any number of times.
2791 failed : unparsable : 0 (s) : Please check your regex.
2792 : failed : failed : 1.016856803 (s) : \\s+
2793 : failed : failed : 0.177860333 (s) : (?<!^)(?!$)[^\\s]*?
2794 : failed : failed : 0.966842376 (s) : [^ ]+( \\S+)?(, )?
2795 : failed : failed : 1.197355196 (s) : (?<= )\\\\s{2,}(?= )
2796 failed : unparsable : 0 (s) : Please check your regex.
2797 : unparsable : unparsable : 0.117325134 (s) : [a-zA-Z0-9!@#%^&|\\(\\)\\~\\-\\_\\=
2798 failed : unparsable : 0 (s) : Please check your regex.
2799 : failed : failed : 0.123935533 (s) : var re = /^(\\S+)\\s*
2800 failed : unparsable : 0 (s) : Please check your regex.
2801 : failed : failed : 0.292101852 (s) : A string in CCYYMM/YYYYMM format means the string occurs in the first five months of the year.
2802 : failed : failed : 0.927976015 (s) : [12][0-9][0-9][2][0-9][0-9][0-9]/[0-9][0-9][0-9]
2803 : failed : failed : 0.769301901 (s) : CCYYMM (2-digit) + MM (2-digit) / DD (2-digit) / Y(2-digit) (1-digit)
2804 failed : unparsable : 0 (s) : Please check your regex.
2805 : failed : failed : 0.748712534 (s) : \\b(CCYYMM|CCYYYY)\\d{2}(MM|MMM\\d{2})
2806 : failed : failed : 3.233598539 (s) : (?<![0-9]{4})([0-9]{4})/([0-9]{2}[0-9])/([0-9]{2}[0-9])/([0-9]{2})
2807 : failed : failed : 0.110986544 (s) : %d/%y
2808 : failed : failed : 13.294308102 (s) : [0-9]{4}-[0-9]{2}/[0-9]{2}
2809 : failed : failed : 1.564400347 (s) : cc(?=[0-9]{4})([0-9]{2})([0-9]{2})\\/[0-9]{4}
2810 : failed : failed : 15.539275884 (s) : [0-9]{4}[-/][0-9]{4}[-/][0-9]{4}
2811 : failed : failed : 1.259237046 (s) : [^0-9]\\d{1,2}
2812 : unparsable : unparsable : 0.090304345 (s) : (?<Percentage>{percentage})%
2813 : failed : pumping failed : 107.362891884 (s) : [0-9]*\\.([1-2][0-9]|99)\\.(0[0-9]|1[0-9]|2[0-9]|3[0-1]|4[0-9])
2814 : failed : failed : 0.797730095 (s) : \\d{1,3}
2815 : failed : failed : 1.179796645 (s) : 0.0-100.0%\"\"\"
2816 : failed : error init : 0.09810913 (s) : |^\\d+%$
2817 : failed : failed : 1.566465264 (s) : %(0-9\\.?\\d*|\\d+)%
2818 : failed : failed : 0.241668741 (s) : ^\\s*[^%][\\s%]*$
2819 : failed : failed : 0.177134533 (s) : [^0-9.]
2820 : failed : pumping failed : 221.823322588 (s) : (\\\\+[0-9.]+)%
2821 : failed : failed : 1.413152289 (s) : Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out th
2822 : failed : failed : 1.551674336 (s) : Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out th
2823 : failed : failed : 0.776419458 (s) : Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out th
2824 : failed : failed : 2.10291846 (s) : Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out th
2825 : failed : failed : 0.506846695 (s) : Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out th
2826 : failed : failed : 1.125697679 (s) : Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out th
2827 : failed : failed : 1.827896682 (s) : Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out th
2828 : failed : failed : 0.599774131 (s) : Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out th
2829 : failed : failed : 1.430063396 (s) : Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out th
2830 : failed : failed : 2.118001985 (s) : Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings. Ordinarily have no search significance. I used this to remove the words in my own web search application. Take out th
2831 : failed : failed : 0.318737409 (s) : [0-9a-fA-F] 5. Write a RegEx pattern that validates an Email address. Answ
2832 : failed : failed : 0.252534548 (s) : ^[01]+$
2833 : failed : failed : 0.141127977 (s) : ^[01]+$
2834 : failed : failed : 0.49341911 (s) : ^(?=.*[1-9])(?=.*[a-zA-Z])(?=.*[0-9]).{0,30}$
2835 : failed : failed : 0.54345088 (s) : [0-9a-fA-F]{1,40}
2836 : failed : failed : 1.0754898 (s) : \\b[01]+\\b
2837 : failed : failed : 0.217155256 (s) : ^[0-9a-fA-F]+$
2838 : failed : failed : 0.356636651 (s) : Regex = \\[(?P<bit>0b[01]*)(?P<exp>(?P<expression>(.*))?)\\]
2839 : failed : failed : 3.512255113 (s) : [0-9A-Fa-f]
2840 : failed : failed : 0.136527953 (s) : ^[01]*$
2841 : failed : failed : 1.953635672 (s) : (\\d{1,2})\\.(\\d{4}|\\d{6})
2842 : failed : failed : 13.057838879 (s) : [a-f0-9]{6}-[a-f0-9]{4}-[a-f0-9]{4}-\\d{4}$
2843 : failed : failed : 0.155098398 (s) : ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
2844 : unparsable : unparsable : 0.073624359 (s) : (ES
2845 : failed : failed : 0.319596749 (s) : re.compile(r'^[123456789]{10}$')
2846 : unparsable : unparsable : 0.062755175 (s) : esn_pattern = re.compile( r'^\\d{4}-\\d{2}-\\d{4}\\s\\d{
2847 : failed : failed : 0.942078132 (s) : (\\d{2})[A-Za-z ]{2}\\s(2[A-Za-z 0-9]{3})-([0-9]{4})\"\"\"# TO
2848 : failed : failed : 0.138499936 (s) : ^[0-9A-Fa-f]{10}$\"\"\"
2849 : failed : failed : 5.073007158 (s) : [0-9a-f]{2}-[0-9a-f]{2}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}
2850 : failed : failed : 0.245632734 (s) : `\"^[0-9a-f]{6}-[0-9a-f]{4}-[3][0-9a-f]{3}-[2][0-9a-f]{2}-[1][0-9a-f]{2}-[0-9]{12}$\"`
2851 : failed : failed : 27.588289129 (s) : 03[0-9]\\d{8}|[1-9][0-9]\\d
2852 : unparsable : unparsable : 0.092837428 (s) : [^0-9]\\+[0-9]{4}\\-[0-9]{4
2853 : failed : failed : 23.875593429 (s) : [\\s0-9]{3}\\s[\\s0-9]{3}\\s\\
2854 : unparsable : unparsable : 0.113618523 (s) : ^[0-9]{3}[ ][0-9]{9}[ ][0-9
2855 : unparsable : unparsable : 0.095697874 (s) : [^0-9]\\d{3}[^0-9]\\d{3}[
2856 : failed : failed : 0.917168406 (s) : .{10,33}
2857 : unparsable : unparsable : 0.124067639 (s) : (?<!^\\d{4}\\s)(?!^\\d{3}\\s)(?!^
2858 : failed : failed : 1.585062178 (s) : \\[\\d{3}\\] \\s?[0-9]{2}[- ]?
2859 : unparsable : unparsable : 0.077194254 (s) : ([0-9]{3}-(3[0-9]{2}|[0-9
2860 : failed : failed : 2.102487563 (s) : [^\\s]\\d{3}[^\\s]?[^\\s]\\d
2861 : failed : failed : 1.120755424 (s) : ^(07[7-9])[0-9]{8}$
2862 : unparsable : unparsable : 0.056914399 (s) : /[0-9]{3}[0-9]{3}[0-9]{3}[
2863 : failed : failed : 0.168783034 (s) : ```pythonimport refrom typing import List
2864 : failed : failed : 4.9796569 (s) : (07[78][9]|07[789][0-9])[ 0-9]
2865 : failed : failed : 0.139775845 (s) : ^\\d{5}[- ]\\d{3}$
2866 : failed : failed : 0.49429541 (s) : ```^[7-9]\\d{8}$
2867 : unparsable : unparsable : 0.098472631 (s) : \\b(8[0-9]{3}[ 0-9]{4}[ 0-9]{
2868 : failed : failed : 0.486268069 (s) : [^ ]{4}[0-9]{8}
2869 : unparsable : unparsable : 0.146375484 (s) : ^\\d{3}(\\s|\\-|\\+|[\\s-]\\d{4})(\\
2870 : unparsable : unparsable : 0.092047869 (s) : ^(\\(\\d{3}\\)\\s[\\d]{3}\\s)?(\\(\\d{2}\\)\\
2871 : unparsable : unparsable : 0.068324595 (s) : ^(?P<month>0123456789|[1-9])(?P<year>\\d{4})$
2872 : unparsable : unparsable : 0.073952764 (s) : (?i)(
2873 : failed : failed : 0.127128201 (s) : ^([1-9]|0[1-9])
2874 : failed : failed : 6.223565892 (s) : ^[1-9]|[1-9][0-9]|[1-9][0-8][0-9][0-9]$
2875 : failed : failed : 2.27105867 (s) : ^(0?[1-9]|[12][0-9])|(1?[0-2])$
2876 : failed : error init : 0.122665093 (s) : ^|[1-9][0-9]{0,2}$
2877 : failed : failed : 0.887096443 (s) : \\b1[0-2]? ([a-z]{3})-([a-z]{3})\\b
2878 : failed : failed : 0.16086662 (s) : \\d\\d\\d\\d\\d/\\d\\d/\\d\\d (1-9)
2879 : failed : failed : 1.399579993 (s) : \\d{1,2}-?\\d{2,3}
2880 : failed : failed : 2.370560638 (s) : (0|1)\\d{3}(0|1)?\\d{2}
2881 : failed : failed : 0.361082386 (s) : This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET do
2882 : failed : failed : 0.85139059 (s) : This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET do
2883 : failed : failed : 0.377622439 (s) : This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET do
2884 : failed : failed : 11.858588875 (s) : This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET do
2885 : failed : failed : 1.211351385 (s) : This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET do
2886 : failed : failed : 1.306421413 (s) : This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET do
2887 : failed : failed : 0.951068467 (s) : This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET do
2888 : failed : failed : 0.586212065 (s) : This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET do
2889 : failed : failed : 0.680076937 (s) : This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET do
2890 : failed : failed : 0.326299191 (s) : This should be the pattern described in the documentation for the.NET TimeSpan.Parse method - generally parses time spans.From the.NET do
2891 : failed : failed : 7.49417828 (s) : 0(?!0(?=0|$))
2892 : failed : failed : 1.38942132 (s) : (0[0-9]|1[0-9])
2893 : failed : failed : 0.191007381 (s) : ^[1-9][0-9][0-9]?$
2894 : unparsable : unparsable : 0.077554208 (s) : (?=
2895 : failed : failed : 0.748035055 (s) : ^[1-9][0-9]*(\\.[0-9]*)?$
2896 : failed : failed : 0.45960534 (s) : [0-9]{1,2}(.[0-9]{1,6})
2897 : failed : error init : 0.130675825 (s) : (?<!0)
2898 : failed : failed : 1.218232561 (s) : [1 - 9][0 - 9][0 - 9][0 - 9][0 - 9][0 - 9][0 - 9][0 - 9][0 - 9][0 - 9]
2899 : failed : failed : 0.465679134 (s) : 1-9
2900 : failed : failed : 0.672544161 (s) : -?\\d+0\\d+
2901 : failed : failed : 0.185140065 (s) : [^\\s\\d_]
2902 : failed : failed : 3.082191323 (s) : (a-zA-Z_0-9\\-\\.)+$
2903 : failed : failed : 6.636707443 (s) : ^[a-zA-Z0-9_-]+$
2904 : failed : failed : 0.180950299 (s) : \\bUnix\\b
2905 : unparsable : unparsable : 0.09107111 (s) : #(?P<name>\\w+-\\w+-\\w+-\\w+)This should match exactly what you're searching for.
2906 : failed : failed : 0.628532094 (s) : ^/[a-z0-9\\.'\\-_]+$
2907 : unparsable : unparsable : 0.074400242 (s) : [a-zA-Z0-9-
2908 : failed : failed : 31.874354183 (s) : [^\\[\\]]{0,2}\\d{1,2}\\w{0,5}
2909 : failed : failed : 0.141072252 (s) : [0-9a-zA-Z_-]{6}
2910 failed : unparsable : 0 (s) : Please check your regex.
2911 : failed : failed : 0.465589747 (s) : RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answ
2912 : failed : failed : 0.427696047 (s) : RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answ
2913 : failed : failed : 0.32509259 (s) : RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answ
2914 : failed : failed : 0.419284846 (s) : RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answ
2915 : failed : failed : 0.366494701 (s) : RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answ
2916 : failed : failed : 0.505945587 (s) : RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answ
2917 : failed : failed : 0.604821763 (s) : RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answ
2918 : failed : failed : 0.37197894 (s) : RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answ
2919 : failed : failed : 0.323391054 (s) : RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answ
2920 : failed : failed : 0.440986715 (s) : RAR file extensions.Works also with '*.part01.rar' given '.rar' to be the file extension.Does not support volumes exceed 101 for s## (r99, s00, s01,...) serie.Generate a RegEx for this description. Answ
2921 failed : unparsable : 0 (s) : Please check your regex.
2922 : unparsable : unparsable : 0.08531449 (s) : [
2923 : unparsable : unparsable : 0.064880525 (s) : [
2924 failed : unparsable : 0 (s) : Please check your regex.
2925 : unparsable : unparsable : 0.110054279 (s) : [
2926 : failed : failed : 0.14206448 (s) : \\
2927 : unparsable : unparsable : 0.069074128 (s) : [
2928 failed : unparsable : 0 (s) : Please check your regex.
2929 : unparsable : unparsable : 0.07178733 (s) : (
2930 failed : unparsable : 0 (s) : Please check your regex.
2931 : failed : error init : 0.111628096 (s) : ^
2932 : failed : failed : 0.135219983 (s) : ^.{6}$
2933 : unparsable : unparsable : 0.06624448 (s) : [\\s\\S]*?(
2934 : failed : failed : 159.044248125 (s) : ^(?!.{3}\\s\\s\\s).*?[^.]([0-9]{1,2})([0-9]{1,2}|[0-9])$
2935 : failed : failed : 0.715420211 (s) : ^([a-zA-Z0-9-]{1,63})$
2936 failed : unparsable : 0 (s) : Please check your regex.
2937 : failed : error init : 0.113756241 (s) : ^
2938 : unparsable : unparsable : 0.083522695 (s) : ^([0-9a-fA-F]{1,
2939 : failed : error init : 0.102771451 (s) : ^
2940 : failed : failed : 0.344119571 (s) : ^\\d{2}\\.\\d{1,2}\\.(\\d{1,2}\\.){2}\\d{1,2}$
2941 : failed : failed : 0.668878526 (s) : \\$
2942 : failed : failed : 0.952061426 (s) : \\d{4}\\s+
2943 : unparsable : unparsable : 0.059621388 (s) : ^[0-9]{1,3}[-.]?[0-9]{4}[-.]?[0-9][0-9
2944 : unparsable : unparsable : 0.093906941 (s) : ?P<dollars>.{0,}(?P<dollars>$|(?<=\\d)\\.)?(?P<years
2945 : unparsable : unparsable : 0.087719294 (s) : [$]{{4,20}}[,](?=,?$)
2946 : failed : failed : 0.344670182 (s) : /\\$(\\d+)\\.(\\d{3})$/;
2947 : unparsable : unparsable : 0.12894302 (s) : ^[^$,]{1,3}(-?[0-9]{3}-?[0-9]{3}-?[0-
2948 : failed : error init : 0.141139158 (s) : | (?<=\\$)\\d+
2949 : failed : failed : 0.732004757 (s) : \\$(\\d+\\.?\\d*|\\d+|\\d{1,2})
2950 : failed : failed : 1.665075992 (s) : \\$
2951 : failed : failed : 0.44663923 (s) : Name            DescriptionFred Flintstone       A dinosaur scientistBuddy McFadden  A playful boyWilma Rudolph   A famous Olympic gold medalistAlbert Einstein      A brilliant scientist
2952 : failed : failed : 0.256385359 (s) : Peter Flintstone, Fred Flintstone, Barney Flintstone, Toto.
2953 : failed : failed : 0.889933856 (s) : Fred Flintstones (character 0), Barney Rubble (character 1), Mr. Flute (character 2), and Penny (character 3).
2954 : failed : failed : 0.402529049 (s) : The four main characters of The Flintstones are Fred Flintstone, Barney Rubblehead, Donald Duck, and Huey.
2955 : failed : failed : 0.999225226 (s) : The four main characters of The Flintstones are Fred Flintstone, Barney Rubble, Lucy Stone, and Clyde Flintstone. The RegEx for this description can 
2956 : failed : failed : 0.159006136 (s) : Flintstones, Fred, Barney, Barney Sally
2957 : failed : failed : 0.149157683 (s) : Main characte
2958 : failed : failed : 0.358472698 (s) : John Flintstone, Frank Lloyd Wright, Pete Seeger, and Charles Schultz.
2959 : failed : failed : 0.216255943 (s) : Fred Flintstone, Barney Rubble, Mom, Dad
2960 : failed : failed : 0.14994079 (s) : Flintstones, Monsta, Sid and Barney.
2961 : failed : failed : 0.202238012 (s) : ^[01]?[0-9]{3}[-.]?[0-9]{3}[-.]?[0-9]{4}$
2962 : failed : failed : 1.293464661 (s) : [^0-9]{6}|[^0-9]{7}
2963 : failed : failed : 1.44765008 (s) : ^[0-9]{1,6}$|^[0-9]{1,7}$
2964 : failed : failed : 0.160413762 (s) : ^[0-9]{3}[01]?[0-9]{4}$
2965 : unparsable : unparsable : 0.068242261 (s) : ^[1-9][0-9]{2,}[0-9]{0,3}(?=
2966 : unparsable : unparsable : 0.088978803 (s) : ^(00[1-9][0-9]|[1-9]0[0-9]|1[9]0[0-9]|2[0-9]0[0-9]|2[1-9]0[0-9]|3[0-9]0[0-9]|3[1
2967 : failed : error init : 0.094900532 (s) : ^
2968 : failed : failed : 1.825562351 (s) : \\b(0\\d{1}[-\\s]?\\d{3}\\b)|0[2-9]\\d{3}[-\\s]?\\d{4}
2969 : failed : failed : 1.148092606 (s) : ^[^0-9]*[0-9]{1}[^0-9]{0,61}[0-9]{1}$
2970 : failed : failed : 0.190270733 (s) : ^(0[1-9]|1[012])-?8[1-9]{4}$
2971 : failed : failed : 0.895732395 (s) : ^((1[5-9]|2[0-3])[0-9]|[1-9])[0-3]|[4][0-9]|[1-9][0-9]$
2972 : failed : failed : 1.26411994 (s) : ^(0[1-6][0-9])?$|^(0[1-9][1-9][0-9])?$|^(1[012])[0-3]$|^(1[013])[0-2]$
2973 : failed : failed : 28.500795434 (s) : [1-3][0-2]|4?[0-9]|5[0-2]
2974 : failed : failed : 0.67254872 (s) : ^(0[1-9]|1[0-2])[01][0-9]|2[0-3]
2975 : unparsable : unparsable : 0.101890822 (s) : \\d{1,
2976 : failed : failed : 0.201190862 (s) : ^([1-3]?[0-9]|4[0-9]|5[0-9])$
2977 : failed : failed : 0.252057224 (s) : ^([1-9][0-9]|1[012])[apm]$
2978 : failed : failed : 7.406742387 (s) : [0-12]{0,2}[ap]m|[0-9]0?[ap]m[ap]m|[0-9]0?[ap]m[ap]m[ap]m
2979 : failed : failed : 0.212159812 (s) : (^\\d\\d?)
2980 : unparsable : unparsable : 0.082689294 (s) : (
2981 : failed : failed : 0.958590774 (s) : ^[a-zA-Z0-9_]{6,}$
2982 : failed : failed : 6.215679494 (s) : ^[a-zA-Z0-9\\s]+$
2983 : failed : failed : 0.120208593 (s) : ([a-zA-Z0-9]+)
2984 : failed : pumping failed : 3.100988291 (s) : ^[A-Za-z0-9\\s]*[A-Za-z0-9\\s]+[A-Za-z0-9\\s]+[A-Za-z0-9\\s]+$Now, run the te
2985 : failed : pumping failed : 59.165157668 (s) : (.*?)(?=^[A-Za-z0-9_]*$)(?<![A-Za-z0-9_])([A-Za-z\\d])(?!.*\\1)[A-Za-z0-9\\d_\\-\\.]+$
2986 : failed : failed : 0.73392309 (s) : ^[a-zA-Z0-9]{1,20}$
2987 : failed : failed : 0.611300887 (s) : (^[a-zA-Z0-9-_\\.]{6,20}$)
2988 : failed : failed : 0.154182583 (s) : [a-zA-Z0-9_]
2989 : failed : failed : 0.500736082 (s) : r'^[a-zA-Z0-9_\\-]+$'
2990 : failed : failed : 7.830839313 (s) : ^[A-Za-z0-9.-]*$
2991 : unparsable : unparsable : 0.078353555 (s) : (^m(0[0-9]|1[0-2])\\/\\d\\d\\/\\d\\d\\/\\d{4}$|^(0[1-9]|1[0-2])\\/
2992 : failed : failed : 0.819026395 (s) : \\d{4}-\\d{2}-\\d{2}
2993 : failed : failed : 0.242488426 (s) : [0-9]{2}-[0-9]{2}-[01]{4}This description is more specific, and the number of digits before and after [0-9] are always 2.
2994 : unparsable : unparsable : 0.075278257 (s) : (4, 12)   (00\\d{1,2}, 00\\d{1,2})   (100\\d{1,2}, 00\\d{1,2})   (\\d{4
2995 failed : unparsable : 0 (s) : Please check your regex.
2996 : unparsable : unparsable : 0.097546586 (s) : (?<!\\d)(
2997 : unparsable : unparsable : 0.081491101 (s) : ^(?P<Dates>[0-9]{4}\\/[0-9]{1,2}\\/[0-9]{1,2},?)+$  ^(?P<Year>[
2998 : unparsable : unparsable : 0.081278242 (s) : \\b(\\d\\d)(
2999 : failed : error init : 0.103186878 (s) : ^
3000 : failed : failed : 0.126882841 (s) : (?<wday>[0-5]?[0-9]?)
3001 : failed : failed : 0.144594538 (s) : ^(?=.{4}$)\\d+\\.\\d+$
3002 : failed : pumping failed : 31.732858047 (s) : [0-9]+(\\.[0-9]+)+
3003 : failed : failed : 0.39752579 (s) : /^0\\d(\\.\\d*)?
3004 : failed : error init : 0.126349092 (s) : ^
3005 : failed : failed : 0.840844912 (s) : [^+-]*[+-]?[0-9]*(.[0-9]*)?
3006 : failed : failed : 23.650337503 (s) : .{5}\\.(\\d{1,2},?)
3007 : unparsable : unparsable : 0.090559001 (s) : (?<=\\d
3008 : failed : error init : 0.156453636 (s) : ^
3009 : failed : failed : 4.549100336 (s) : 0(?=[1-9]\\d*\\.\\d+|\\.)(?=0(?=[1-9]\\d*\\.\\d+|\\.)|0)(?![^0-9]*0)+0
3010 : failed : pumping failed : 111.443467769 (s) : [a-zA-Z]+\\.[0-9]{1,20}
3011 : unparsable : unparsable : 0.095919459 (s) : /^[1-9][0-9]|0[1-9
3012 : unparsable : unparsable : 0.08450263 (s) : \\d{4}-\\d{2}-\\d{2,2
3013 : failed : failed : 1.309194286 (s) : \\d{1,2}/\\d{1,2}-\\
3014 : failed : failed : 26.166126998 (s) : ([0-9]{4})-([0-9]{2})-
3015 failed : unparsable : 0 (s) : Please check your regex.
3016 failed : unparsable : 0 (s) : Please check your regex.
3017 : failed : failed : 0.134263683 (s) : import re
3018 : unparsable : unparsable : 0.095108571 (s) : ^(0[1-9]|1[012]|[1-9
3019 failed : unparsable : 0 (s) : Please check your regex.
3020 : failed : failed : 0.163890813 (s) : (?<!^)
3021 : unparsable : unparsable : 0.07748034 (s) : ^(100+999)?[0-9][0-9][0-9][0-9]\\.[0-9][0-9][0-9][0-9]\\.[0-9][0-9]\\.[0-9]\\.[0-9]\\.[0-
3022 : failed : failed : 0.164762365 (s) : \\d\\d\\d\\d-\\d\\d-\\d\\d\\d
3023 : failed : failed : 0.904940437 (s) : \\d{4}[0-9]{2}[0-9]{2}[0-9]\\d
3024 : failed : pumping failed : 3.014200252 (s) : ^(\\d{1,2}(\\d{1,2})[^,\\s]?)+(    (\\d{1,2})\\2{0,1}($|,)    (\\d{4}))$
3025 : failed : failed : 3.960220576 (s) : (?<!\\d)\\d{4}
3026 : failed : failed : 0.144636778 (s) : ^(?=\\d{2})
3027 : failed : error init : 0.120235164 (s) : ^
3028 : unparsable : unparsable : 0.080308867 (s) : (see the following link)(?<!\\d)(
3029 : unparsable : unparsable : 0.090114989 (s) : (see demo)^(?=.{3,7})(?=\\d{2}
3030 : failed : failed : 0.500217751 (s) : ^(0?[1-9]\\d|1[012])(19|20)\\d{1,2}(0[1-9])$
3031 : unparsable : unparsable : 0.05634373 (s) : (?<start_year>1600|1601|1602|1603|1604|1605|1606|1607|1608|1609|1610|1611|1612|1613|1614|1615|1616|1617|1618|1619|1620|1621|1622|1623|1624
3032 : unparsable : unparsable : 0.081168126 (s) : /((^(19|20)(\\d{2})[-](\\d{4}))|((^(19|20)(\\d{2})[-](\\d{3}))|((^(19|20)(\\d{2})[-](\\d{4}))|((^(19|20)(\\d{2})[
3033 : failed : failed : 4.23647908 (s) : \\b
3034 : failed : failed : 1.249344441 (s) : 0.8.0.0.0-3.9.0  0.8.0.1-9.9.0  0.8.1-9.9.0  0.8.2-9.9.0  0.8.3-9.9.0
3035 : failed : failed : 1.059372558 (s) : [^(0[1-9][0-9])]|[1-9][0-9]\\d?[0-9]
3036 : failed : failed : 0.223797344 (s) : ^(    [1-9]\\d{4}    | 10(0[1-9])    | 100(0[1-9])    | 1000(0[1-9])    | 10000[0-9])$
3037 : failed : failed : 0.102709285 (s) : //ye
3038 : failed : failed : 0.500244371 (s) : ^(19[1-9]|2[0-2])[0-9]{4}$
3039 : failed : failed : 1.686301409 (s) : (0,1)([0-9][0-9][0-9])(0|[12][0-9][0-9])
3040 failed : unparsable : 0 (s) : Please check your regex.
3041 : unparsable : unparsable : 0.06034918 (s) : \\d{1,
3042 : failed : failed : 1.251170199 (s) : (0|[1-2][0-9]|3[0-1])[0-9]{2}[0-9]{3}
3043 : unparsable : unparsable : 0.092036798 (s) : [0-9]{0,
3044 : failed : failed : 1.857150933 (s) : ([1-9]|[1-2][0-9]|3[0-1])([0-5][0-9])
3045 failed : unparsable : 0 (s) : Please check your regex.
3046 : unparsable : unparsable : 0.070713349 (s) : ^(?P<hours>\\d{1,2}\\d{1,
3047 : unparsable : unparsable : 0.0611234 (s) : ^\\d{
3048 failed : unparsable : 0 (s) : Please check your regex.
3049 : failed : failed : 0.14368215 (s) : YMMHMS with separators.
3050 : unparsable : unparsable : 0.112194737 (s) : ^(\\d{2}
3051 : failed : failed : 0.269307777 (s) : ^[+-]? [0-9]*\\.?[0-9]?[0-9]$ ^[+-]? [0-9]*\\.?[0-9]?[0-9]$ ^[ ]? [0-9]*\\.?[0-9]?[0-9]$ ^[+-]?
3052 failed : unparsable : 0 (s) : Please check your regex.
3053 : failed : failed : 0.303815256 (s) : ^-?\\d+\\.\\d+$
3054 : failed : failed : 0.399009618 (s) : ^\\d+\\.\\d+$
3055 : unparsable : unparsable : 0.100207349 (s) : (?!0.0).*(0.0|1.0|2.0|3.0|4.0|5.0|6.0|7.0|8.0|9.0|10.0|11.0|12.0|13.0).*(0.0|1.0|2.0|3.0|4.0
3056 : failed : failed : 0.388006955 (s) : ^(0.|nan|inf|-?\\d+|\\d+\\.\\d+|\\d+\\.\\d+|\\d+|-?\\d+$)$
3057 : failed : failed : 3.008249038 (s) : [\\+-]?\\d*
3058 : failed : failed : 0.293861006 (s) : ^([0-9]+(.[0-9]*)?|[0-9]*$)$
3059 : failed : failed : 14.334479905 (s) : \\d*\\.\\d{2}
3060 : failed : pumping failed : 27.146322018 (s) : (?<!\\s)(?<!\\.)(?<!\\.)[0-9]+(\\.[0-9]+)+
3061 : failed : failed : 0.101201109 (s) : ^\\d{4}
3062 : failed : error init : 0.121087169 (s) : ^
3063 : failed : failed : 0.239965792 (s) : ^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}
3064 : failed : failed : 0.905642031 (s) : ^[01]$|^[1-9]2[0-9]$
3065 : failed : failed : 0.394371974 (s) : /\\d{4}-\\d\\d-\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\
3066 : failed : failed : 0.501964242 (s) : ^[0-9]{3}-[0-9]{2}-[0-9]{4}$
3067 : failed : failed : 0.296706865 (s) : Regex = r'\\d{1,2}\\/[0-9]{1,2}\\/[0-9]{4}\\s?
3068 : unparsable : unparsable : 0.0729627 (s) : /^(0[1-9]|1[012])\\/(0[1-9]|1[012])\\/(0\\d\\d\\d|\\d\\d\\d\\d|\\d\\d\\d
3069 : failed : failed : 2.099211718 (s) : (^(0*[1-9])|(1[012]|0[13578]))/([0-9][0-9])|(3[01])/([0-9][0-9]) Explan
3070 : unparsable : unparsable : 0.074975049 (s) : \\b(
3071 failed : unparsable : 0 (s) : Please check your regex.
3072 : failed : failed : 0.278963118 (s) : ^[1-9]\\d*\\.\\d*$ or ^\\d*(\\.\\d+)?$
3073 : failed : failed : 1.964731179 (s) : \\d{1,3}(,\\d{3})*\\.\\d{1,2}
3074 : failed : failed : 0.254139774 (s) : var number = new RegExp(\"^[0-9]{1,3}(,[0-9]{3})*|[0-9]{1,3}$\");
3075 : unparsable : unparsable : 0.087356364 (s) : ^[1-9][0-9]{0,3}(,|\\.|))?$
3076 : failed : failed : 1.280286404 (s) : \\d+
3077 : failed : failed : 0.250636624 (s) : Number with \",\" as separator and \".\" as decimal separator and is greater than 0.I was trying to complete the third question of the homework, and this was my attem
3078 : failed : error init : 0.135395553 (s) : ^
3079 : failed : error init : 0.109385796 (s) : ^
3080 : failed : pumping failed : 90.390596627 (s) : [^,]+[.,]?[0-9]+[^,]
3081 : failed : failed : 26.283196013 (s) : .{1,3}$
3082 : failed : failed : 0.596994516 (s) : [aeiou]This simple reg-ex will accept any vowel letter.
3083 : failed : failed : 0.76391901 (s) : ^[aeiouAEIOU]{2,}$
3084 : failed : failed : 0.872178828 (s) : (1..16)\\\\^(?=[A-Z]{1})
3085 : failed : failed : 1.427506619 (s) : [^aeiouAEIOU] - any character that is not a vowel letter.
3086 : failed : failed : 2.114531066 (s) : ^([^aeiouAEIOU]|e[^aeiouAEIOU])+$
3087 : failed : failed : 1.294666331 (s) : ^[aeiou]*\\b
3088 : failed : failed : 1.108178262 (s) : [a-zA-Z]
3089 : failed : pumping failed : 121.25022008 (s) : [a-zA-Z]{1,}[aeiouAEIOU]
3090 : failed : failed : 0.754817417 (s) : [aeiou]
3091 : failed : failed : 0.623103218 (s) : (\\\\d{7,9}\\\\.\\\\d{0,9})
3092 : failed : failed : 0.464851043 (s) : /^\\d{0,6}
3093 : failed : error init : 0.11216448 (s) : (?<![\\d.])
3094 : failed : failed : 1.037684164 (s) : ^[0-9]{1,7}([1-9][0-9]{1,3})?(\\.?[0-9]*)?$
3095 : failed : failed : 0.15097671 (s) : [^0-9.]
3096 : failed : failed : 0.20326732 (s) : ^\\d*[1-9]0*[0-9]*[0-9]{0,8}$
3097 : unparsable : unparsable : 0.080383587 (s) : [0-9]*([0-9]*[1-9][0-9]*)?[0-9]*([0-9]*[1-9][0-9]*)?[0-9]*([0-9]*[1-9][0-9]*)?[1-
3098 : failed : failed : 0.117481557 (s) : ^0.{0,7}
3099 : failed : failed : 0.168057025 (s) : ^[0-9]+(.[0-9]{0,1})?$
3100 : unparsable : unparsable : 0.07309099 (s) : ([\\d\\.]+)(%(\\d+)
3101 : failed : failed : 0.635436493 (s) : Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answ
3102 : failed : failed : 0.684034558 (s) : Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answ
3103 : failed : failed : 0.86750726 (s) : Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answ
3104 : failed : failed : 0.696786277 (s) : Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answ
3105 : failed : failed : 0.83009427 (s) : Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answ
3106 : failed : failed : 0.986142237 (s) : Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answ
3107 : failed : failed : 0.631859063 (s) : Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answ
3108 : failed : failed : 0.609974082 (s) : Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answ
3109 : failed : failed : 0.606461314 (s) : Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answ
3110 : failed : failed : 0.634723447 (s) : Applied to a.RTF document, returns all the names of the# bookmarks. Useful to retrieve# dinamically# the list of bookmarks from a document.Generate a RegEx for this description. Answ
3111 : failed : failed : 35.427365055 (s) : '.*'. I'm not sure where to place the.* inside the quotes. htt
3112 : failed : failed : 0.209455759 (s) : A list of words separated by a comma
3113 : failed : failed : 20.274066856 (s) : \\\"[^\\\"]*\\\"
3114 : failed : failed : 2.209046155 (s) : ([\w\ \-]+)
3115 : failed : failed : 15.392315435 (s) : \"[a-zA-Z0-9_]*\"
3116 : failed : failed : 2.107716835 (s) : \"([\\w\\s]+)\"
3117 : failed : failed : 0.176356155 (s) : \"x,y,z\"
3118 : failed : failed : 31.158653637 (s) : [\\'](.*?)[\\']
3119 : failed : pumping failed : 235.270420695 (s) : [^\"]+  Exerci
3120 : failed : failed : 0.282115742 (s) : \"RegEx for this description\"Generate a RegEx for this description. Answ
3121 : failed : failed : 1.430168433 (s) : (999)(?<!\\d{3}-){9}\\\\1\\\\d{9}
3122 : failed : failed : 0.901173163 (s) : /^\\d{4}-\\d{3}-\\d{2}-\\d{1}
3123 : failed : failed : 0.58074676 (s) : ^[0-9]{3}-(1?[0-9]{1}|2?[0-9]{2}|3?[0-9]{3})$
3124 : failed : failed : 1.023138145 (s) : \"^([1-9][0-9]{3}-?){3}([1-9][0-9]{3}-?){3}-?([1-9][0-9]{3})$\"
3125 : failed : failed : 0.335916469 (s) : ^\\d{3}-\\d{4}-\\d{5}$
3126 : failed : failed : 0.242055385 (s) : ^\\d{3}-?\\d{9}$
3127 : failed : failed : 16.484904524 (s) : [0-9]{3}-[0-9]{4}[0-9][0-9]
3128 : failed : failed : 0.143595999 (s) : ^[0-9]{3}-?[0-9]{4}-?9[0-9]{3}$
3129 : failed : failed : 0.894959287 (s) : [9]{3}-([1-9][0-9]{9}|0)
3130 : failed : failed : 0.340329013 (s) : \"^[0-9]{3}-?[0-9]{4}$
3131 : failed : failed : 1.553617034 (s) : ([01]?[5-9]\\d|2[012]|3[01])The answer is correct.
3132 : failed : failed : 2.1920775 (s) : \\d+\\.?\\d*
3133 : failed : failed : 3.069361126 (s) : a+
3134 : failed : failed : 0.859780601 (s) : x\\d*((\\.\\d+)?e)?
3135 : failed : pumping failed : 64.312255849 (s) : (\\+\\d+)
3136 : failed : failed : 4.530853657 (s) : 0?[1-9][0-9]?
3137 failed : unparsable : 0 (s) : Please check your regex.
3138 : failed : failed : 3.940817051 (s) : \\d{1,}
3139 : failed : failed : 0.116324661 (s) : [0-9]+[,.\\s]?
3140 : failed : failed : 4.99182694 (s) : \\d+|\\+
3141 : failed : failed : 2.127571615 (s) : \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}
3142 : failed : failed : 0.212007456 (s) : IPv6.0/24
3143 : failed : failed : 1.406123587 (s) : \\\\d\\\\d\\\\d\\\\d\\\\d|\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d|\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d|\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d|\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d|\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d|\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d\\\\
3144 : failed : failed : 1.560235678 (s) : (^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)
3145 : failed : failed : 0.229015986 (s) : ^[0-9.]+$
3146 : failed : error init : 0.156094764 (s) : ^
3147 : failed : failed : 2.610030931 (s) : 0.00.001.0.00.02.00
3148 : unparsable : unparsable : 0.090723439 (s) : ^(0|1)*(?P<ip>\\d\\d\\d\\.\\d\\d\\.\\d\\d\\.\\d\\d)[\\.\\-](?P<prefix>[0-9a-fA-F]{1,4})(?P<suffix>[a-z]{2})$
3149 : failed : failed : 57.619946355 (s) : ([A-Fa-f0-9]|[A-Fa-f0-9][A-Fa-f0-9])\\.[b-df-hj-np-tv-z]{1,3}
3150 failed : unparsable : 0 (s) : Please check your regex.
3151 : unparsable : unparsable : 0.11798549 (s) : ^(((0[1-9]|1[012])/(0[1-9]|1[012])/((0[1-9
3152 : failed : failed : 0.156214138 (s) : ^(0[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])
3153 : unparsable : unparsable : 0.072322592 (s) : ([0-9]{1,2}/[0-9]{1,2}/[0-9]{4})([
3154 : failed : failed : 8.101281295 (s) : (?<month>\\d{1,2})\\s+|\\s(?<day>\\d{1,2})$
3155 : unparsable : unparsable : 0.072868243 (s) : var regex = new Regex(@\"^
3156 : unparsable : unparsable : 0.064155759 (s) : [0-9]{1,2}/([0-9]{2})\\/([0-9]{2})\\/([0-9]
3157 : unparsable : unparsable : 0.069440244 (s) : (?P<month>\\w{1,2})(?P<day>\\d{1,2})(?P<year>\\d
3158 : unparsable : unparsable : 0.094006017 (s) : ^(0)?[1-9]\\d{2}|1[0-2]\\d{3}[0-3]\\d{
3159 : unparsable : unparsable : 0.07913065 (s) : ([0-9]{2}\\/[0-9]{2}\\/[0-9]{4}|[0-9]{
3160 : failed : failed : 0.191042808 (s) : ^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$
3161 : failed : failed : 0.775964586 (s) : Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answ
3162 : failed : failed : 1.493430989 (s) : Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answ
3163 : failed : failed : 0.71922726 (s) : Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answ
3164 : failed : failed : 0.998620764 (s) : Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answ
3165 : failed : failed : 1.210891835 (s) : Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answ
3166 : failed : failed : 0.808886306 (s) : Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answ
3167 : failed : failed : 0.857383862 (s) : Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answ
3168 : failed : failed : 0.905899824 (s) : Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answ
3169 : failed : failed : 0.756329267 (s) : Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answ
3170 : failed : failed : 0.532787772 (s) : Regular expression to limit types of files accepted. This example matches.jpg and.gif files only.Generate a RegEx for this description. Answ
3171 : unparsable : unparsable : 0.057194383 (s) : (^
3172 : failed : failed : 0.118529549 (s) : const regex = /^\\d{1,2}
3173 failed : unparsable : 0 (s) : Please check your regex.
3174 : unparsable : unparsable : 0.088197539 (s) : (^[0-9]{1,3}(.[0-9]{1,3})?
3175 : unparsable : unparsable : 0.070550684 (s) : [ ]              # A space    [ ]              # A space    [^]                # Anything but a space   .               # Any character    [ ]              # A space    [ ]              # A space    [^]                # Anything but a space
3176 : failed : failed : 0.30797664 (s) : \"^\\$\\d{1,2}\\s?$\"
3177 : failed : failed : 0.27990403 (s) : ^[$][0-9]{1,3}.{0,4}[$]$
3178 : unparsable : unparsable : 0.064743439 (s) : [0-9]\\d{0,3}[ ]?[0-9]{0,3}[ ]?[0-9]{0,3}[ ]?[0-9]{0,3}[ ]?[0-9]{0
3179 : failed : failed : 1.970610048 (s) : (\\$)0*?
3180 : failed : pumping failed : 160.141115386 (s) : [^\\s000]*\\$(.{4,8})\\.([0-9]{0,3})[^\\s000]*
3181 failed : unparsable : 0 (s) : Please check your regex.
3182 : failed : failed : 0.180536694 (s) : ^[0-9a-fA-F]{8}$
3183 : failed : failed : 0.177333857 (s) : ^[A-Za-z0-9]{8}-[0-9A-Za-z0-9]{4}-[0-9A-Za-z0-9]{4}-[0-9A-Za-z0-9]{4}-[0-9A-Za-z0-9]{12}$
3184 : failed : failed : 1.101323516 (s) : [a-z0-9]{11}
3185 : failed : failed : 0.107861372 (s) : import re
3186 : failed : failed : 0.326574015 (s) : [0-9a-c]
3187 : failed : failed : 0.245973351 (s) : ^([0-9][a-z]|[A-Z])([0-9][a-z]|[A-Z][a-z][A-Z]|[a-z][0-9]|[a-z][A-Z][0-9])$
3188 : failed : failed : 0.127750416 (s) : $str = \"the product key for this software must be a valid six-digit hexadecimal number\". $re = '#^[0-9a-f]{6}$#i'; $return = preg_match($re, $str); print_r($return);
3189 : failed : timeout : 600 (s) : [^\\w\\s]{3,40}\\.
3190 : failed : failed : 1.032432691 (s) : [RegEx]\\[[0-9][0-9]][0-9][0-9]
3191 : failed : failed : 2.022051808 (s) : [^A-Za-z0-9\\-\\s]
3192 : failed : failed : 0.967056958 (s) : ^[\\x20-\\x7E]+$
3193 : failed : failed : 11.445199028 (s) : <\\s*[^\\s\\t\\r\\f\\n\\v]*\\s*/>
3194 : failed : failed : 0.847155589 (s) : \\w+\\s
3195 : unparsable : unparsable : 0.097872607 (s) : (
3196 : failed : failed : 5.642800497 (s) : \\/[\\w\\d_\\-]*\\/
3197 : failed : failed : 1.193930873 (s) : [^g\\x09\\x0D]
3198 : failed : failed : 0.793121184 (s) : \\n|^\\t|^\\f|^\\v|^\\r|^0x[0-9a-f]
3199 : unparsable : unparsable : 0.080534229 (s) : \\p{L}*\\n|\\t|\\r
3200 : unparsable : unparsable : 0.095663269 (s) : [^\\x00-\\x7f] [^\\x00-\\x7f\\x80-\\x9f\\x
3201 : unparsable : unparsable : 0.070048513 (s) : /^\\d{3}\\.\\d{3}[-
3202 : failed : error init : 0.097287361 (s) : (?<!0).*?
3203 : unparsable : unparsable : 0.085828213 (s) : \\[\\[
3204 : unparsable : unparsable : 0.086805222 (s) : [\\d{7}-]?[\\d{6}
3205 : unparsable : unparsable : 0.08168866 (s) : ^[a-z]\\d{4}[a-z
3206 : unparsable : unparsable : 0.061873515 (s) : \\b[[0-9]+\\.[0-9]+(.[
3207 : unparsable : unparsable : 0.064504692 (s) : \\[[0-9]{4}\\.[0-9]
3208 : unparsable : unparsable : 0.07486309 (s) : /[0-9]{6}\\.?[0-9
3209 : failed : failed : 0.14863233 (s) : \\d-\\d
3210 : unparsable : unparsable : 0.061822048 (s) : [\\d\\.\\d]+([-,\\s\\-\\w]
3211 : failed : failed : 0.930131451 (s) : ^([0-9]{1,2}(\\.\\d+)?|[0-9]+)$
3212 : failed : failed : 0.512962327 (s) : ^\\d+(\\.\\d{1,2})?$
3213 : failed : failed : 3.162667984 (s) : (?<![\\d\\.])([0-9]\\d*\\.\\d{2})(?![\\d\\.])
3214 : failed : failed : 0.158816401 (s) : The format of the RegEx should 
3215 : failed : failed : 0.356797472 (s) : (I have a specific regex for this)    (^\\d+\\.\\d{1,2}$)
3216 : failed : error init : 0.089254338 (s) : ^
3217 : failed : failed : 52.201188862 (s) : ( [0-9]* [0-9]*.[0-9]? )
3218 : unparsable : unparsable : 0.059803278 (s) : (((?<!\\$)\\d*\\.\\d{2})(\\s*)|(?<!\\$\\d*\\,\\d{2})(\\s*))
3219 : failed : failed : 0.56273406 (s) : [0-9]{1,2}(.[0-9]{0,2})
3220 : failed : failed : 0.169028473 (s) : (\\d+\\.\\d{2})?
3221 : failed : failed : 0.344360992 (s) : Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answ
3222 : failed : failed : 0.359865046 (s) : Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answ
3223 : failed : failed : 0.375285813 (s) : Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answ
3224 : failed : failed : 0.435588987 (s) : Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answ
3225 : failed : failed : 0.424610429 (s) : Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answ
3226 : failed : failed : 0.332568591 (s) : Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answ
3227 : failed : failed : 0.383457706 (s) : Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answ
3228 : failed : failed : 0.372816058 (s) : Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answ
3229 : failed : failed : 0.32359712 (s) : Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answ
3230 : failed : failed : 0.411767188 (s) : Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W),degrees,minutes,seconds.Range check for minutes and seconds (0-59),max.latitude 90.00.00, max longitude 180.00.00Generate a RegEx for this description. Answ
3231 : failed : failed : 0.596936157 (s) : (the RegExp below is not complete, I'm just trying to show you what I was trying to do.)/(?<!\\S)\\s*#.*(?!\\S)/gm
3232 : failed : failed : 0.387851033 (s) : \\S*\\s\\S*\\s\\S*\\s\\S*\\s\\S*\\s\\S*\\s\\s\\S*\\s\\S*\\s\\S*
3233 : failed : failed : 1.370310392 (s) : /* * *  *  * * * *   * *   // This is a comment *  * //      //     //       // This is not
3234 : failed : failed : 0.939007341 (s) : ^([a-zA-Z0-9]*)(\\s*)([a-zA-Z0-9]*)\\s*$
3235 : failed : failed : 4.16808252 (s) : (I think)#!/bin/bash
3236 : failed : failed : 1.27428235 (s) : /[\\s\\w\\-\\.]+
3237 : failed : failed : 0.565405081 (s) : *!\\thisfile \\s\\S+\\s*
3238 : failed : failed : 0.344862703 (s) : (The regexes above aren't quite correct - but I tried to make a RegEx for this)^                       # Beginning of line
3239 : failed : failed : 0.244562018 (s) : /*!* @param      file         The filename of the file to process. *             @param      comment_mark  The comment marker to use. *             @param      linenumber The linenumber of the line to process. *             @param      line           The line to process. *             @param      newline        The newline to process. *             @param      output_file
3240 failed : unparsable : 0 (s) : Please check your regex.
3241 : failed : failed : 0.242134623 (s) : 0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|
3242 : failed : failed : 0.765525989 (s) : \\d{1,3}
3243 : failed : failed : 0.122191296 (s) : [0-9A-Z]{1,10}
3244 : unparsable : unparsable : 0.093621036 (s) : 0[1-9][0-9] or 0[1-9]\\d|1[012]\\d|2[012]\\d|3[012]\\d|4[012]\\d|5[012]\\d|6[012]\\d|7[012]\\d|8[012]\\d|9[012]\\d or 100[0-9]|101[
3245 : failed : pumping failed : 61.275350559 (s) : .*[0-9]{1,3}\\.\\s[0-9]{1,3}\\.\\s[0-9]{1,3}.
3246 : failed : failed : 0.157707394 (s) : 0 - 1023
3247 : unparsable : unparsable : 0.075272906 (s) : [0-9]{3,5}(?=
3248 : failed : failed : 0.346140415 (s) : (0|[1-9]\\d?|1?\\d\\d{2}|[2-9]\\d{3})If you have any further questions, feel free to ask.Best regards,[Name]
3249 : failed : failed : 0.396626986 (s) : [0-9][0-9]
3250 : failed : failed : 21.724532367 (s) : (0|1?[9]\\d|2[0-3]\\d|[4-9]\\d|\\d)(/|$)
3251 : unparsable : unparsable : 0.119756667 (s) : ^(?P<number>
3252 : failed : error init : 0.115919331 (s) : (?<=^|\\s)
3253 : failed : failed : 1.011111304 (s) : [0-9]{10,12}
3254 : unparsable : unparsable : 0.072931241 (s) : (?<=^\\d{3}\\d{2}\\d{1}).*(?<!\\d{1}|[^\\d\\s]|\\d{1}
3255 : failed : failed : 8.734630269 (s) : (\\d{1,3}|\\d{3,4}|\\d{1,4}|\\d{1,5})
3256 : failed : failed : 1.689996459 (s) : [0-9]
3257 : failed : failed : 4.262236544 (s) : \\b[0-9]{1,100}\\b
3258 : failed : pumping failed : 202.72976389 (s) : [a-z0-9_][a-z0-9_0-9]*$
3259 : unparsable : unparsable : 0.10540384 (s) : 0-9A-Za-z\\d\\s*[-\\/.]\\s*[0-9]{1,2}|1-9A-Za-z\\d\\s*[-\\/.]\\s*[0-9]{1,2}|0-9A-Za-z\\d\\s*[-\\/.]\\s*[0-9]{1,
3260 : failed : failed : 5.969503623 (s) : r'[1-9]\\d{3}(\\.\\d{1,3})?|1\\d{1,3}(\\.\\d{1,3})?|9\\d{1,3}(\\.\\d{1,3})?'Generate a RegEx for this description. Answ
3261 : failed : failed : 6.903911381 (s) : (?<ip>[0-9]{1,3}\\.){3}[0-9]{1,3}
3262 : failed : failed : 0.629619931 (s) : [0-9]{3}[a-zA-Z][0-9]{3} - 3 letters followed by 3 digits.
3263 : unparsable : unparsable : 0.073914072 (s) : (?<![\\d])(?<!
3264 : failed : failed : 0.186960885 (s) : ^49152|^65535
3265 : failed : failed : 2.609481062 (s) : [[0-9]{1,3}]
3266 : failed : failed : 0.154248707 (s) : ^[0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}$
3267 : failed : failed : 0.172993559 (s) : ^(49152|65535)[0-9]{9}$
3268 : failed : pumping failed : 271.278639352 (s) : [A-Z0-9]{3,}\\s[A-Z0-9]{3,}[A-Z0-9]{3,}[0-9A-Z]
3269 : failed : failed : 0.331095702 (s) : \\b\\d{1,4}\\s?[a-zA-Z]{0,1}\\s?\\d{11}\\b
3270 : unparsable : unparsable : 0.061579845 (s) : /^(1[0-9]|2[0-4][0-9]|25[0-5])[0-9]\\|(1[0-9]|2[0-4][0-9]|25[0-5])[0-9]\\|(1[0-9]|2[0-4][0-9]|25[
3271 : failed : failed : 0.868407326 (s) : (?<n>\\d{1,9}\\.|\\d{1,4}\\.(\\d{1,3})|\\d{1,3}\\.(\\d{1,4}))\\s\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}
3272 : unparsable : unparsable : 0.111952653 (s) : r'(?i)\\b(
3273 : failed : pumping failed : 2.443715889 (s) : \\b(0|[1-9][0-9]*[1-9][0-9]*[1-9][0-9]*[1-9][0-9]*\\b).
3274 : unparsable : unparsable : 0.098382101 (s) : (?<m_IP_and_port>[0-9]{1,3}
3275 : failed : failed : 1.233128595 (s) : 0[1-9][1-9][0-9]
3276 : failed : failed : 11.714202135 (s) : (?i)[0-9]|[1-9][0-9]|[1-9][0-9][0-9][0-9][0-9]|[0-9]
3277 : unparsable : unparsable : 0.105099019 (s) : (?i)(0|[1-9][0-9]*\\.)(0|[1-9][0-9]*\\.)(0|[1-9][0-9]*\\.)(0|[1-9][0-9]*\\.)(0|[1-9][0-9]*\\.)(0|[1-9][0
3278 : failed : failed : 136.093036258 (s) : [0-9]{1,4}[1-9]{1,4}\\ (127[0-9]|192[0-9]|192[0-9]\\.){3}[0-9]{1,4}
3279 : failed : failed : 0.380406742 (s) : ^\\d{1,3}\\s*\\/\\d{1,3}\\s*\\/\\d{1,3}\\s*\\/\\d{1,3}\\s*\\/0$
3280 failed : unparsable : 0 (s) : Please check your regex.
3281 : failed : failed : 1.256896213 (s) : [0-9]{1,2}-[0-9]{1,2}-[0-9]{1,2}-[0-9]{1,2}-[0-9]{1,2}-[0-9]{1,2}-[0-9]{1,2}-[0-9]{1,2}
3282 : failed : failed : 0.283143286 (s) : 0-65536 (0-65536)
3283 : failed : failed : 1.430406779 (s) : 0(1[1-9]|2[0-8]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9])
3284 : unparsable : unparsable : 0.102743779 (s) : (^|\\.)?\\d{1,6,10,17,35,44,53,69,88,97,99,100,101,110,111,112,113,115,116,117,118,119,121,122,124,125,126,128,130,131,132,134,135,136,138,139
3285 : failed : failed : 6.518581069 (s) : (\\d+)(_[0-9]{3}\\_)?(0[1-9]|[1-9]\\d|1[012])[A-Z]{1,3}$
3286 : unparsable : unparsable : 0.115080401 (s) : [A-Za-z0-9()&]{0,63}(\\.|-)[A-Za-z0-9()&]{0,63}(-\\.|-)[A-Za-z0-9()&]{0,63}(\\.|-)[A-Za-z0-9()&]{
3287 : failed : failed : 1.688907029 (s) : /([0-9][0-9][0-9][0-9]|[0-9][0-9])[.]([0-9][0-9][0-9][0-9]|[0-9][0-9])[.]([0-9][0-9][0-9][0-9][0-9])
3288 : failed : failed : 55.450289921 (s) : .net|web|www|www|web|www|www|www|www
3289 failed : unparsable : 0 (s) : Please check your regex.
3290 : failed : pumping failed : 10.390180393 (s) : .*[0-9]{0,4}\\..*[0-9]{0,4}(?=\\.\\.)
3291 : failed : failed : 0.668952004 (s) : \\d{10}
3292 : failed : failed : 0.410639897 (s) : \\d{5,14}
3293 : failed : failed : 1.082950441 (s) : [0-9]{3}
3294 : failed : failed : 0.781458104 (s) : ^[0-9][0-9][0-9][0-9]$
3295 : failed : failed : 9.87345002 (s) : 0{0,}1{0,}2{0,}...9{0,}0
3296 : failed : failed : 0.129625147 (s) : ^[\\d]{3}$
3297 : failed : failed : 11.88238786 (s) : (0|[1-9]\\d*)
3298 : failed : failed : 1.292355755 (s) : [a-z][0-9]{0,9}
3299 : failed : failed : 0.173219692 (s) : ^\\d{3}-\\d{3}-\\d{4}$
3300 : failed : failed : 0.164916223 (s) : ^[0-9](\\s|$)
3301 : failed : failed : 12.008703339 (s) : ^\\s*[^\\s\\n]+\\n$
3302 : failed : failed : 2.51410482 (s) : (?<!\\\\)/ 
3303 : failed : failed : 0.171326697 (s) : CREATE REGEX_STRING_COMMENT_PATTERN '^[^\\r\\n\\t\\f]+'
3304 failed : unparsable : 0 (s) : Please check your regex.
3305 : unparsable : unparsable : 0.086730232 (s) : ^(?(DEFINE)  (?<Comment1>\\s*@\\s*COMMENT\\s*=\\s*(\"[^\"]*\")?) # comment1  (?(DEFINE)   (?<Comment2>\\s*@\\s*COMMENT\\s*=\\s*(\"[^\"]*\")?) # comment2
3306 : failed : failed : 2.689068498 (s) : ^^(?i)(.*)(?<!//)(?<!\\r\\n)
3307 : failed : pumping failed : 32.004880197 (s) : (?<!^|\\n)(?<!\\r\\n)(?<!\\t)(\\*{3,})(?=\\r\\n|\\n)(?!^|\\n)(?!\\r\\n|\\t)(?!\\r\\n|\\t)+
3308 : failed : pumping failed : 593.767017351 (s) : .*%BEGIN%\\s*%END%.*
3309 : failed : failed : 22.505485866 (s) : \\/\\/?.*?(?=\\/)|(?<=\\/)\\*(?=\\/).
3310 : failed : failed : 0.581258047 (s) : <regexp_quote>(%s)\\r?\\n(\\\\r?\\n|\\r?\\n|\\r?\\n)<*>
3311 : failed : failed : 0.227646253 (s) : ^[a-zA-Z0-9]{1,19}$
3312 : failed : failed : 21.99138112 (s) : [0-9]{5}[a-z]{3}[0-9]{3}[a-z]{3}
3313 : failed : failed : 0.435583246 (s) : \\d{3}-\\d{2}-\\d{4}-\\d{2}-\\d{2}-\\d{3}
3314 : unparsable : unparsable : 0.068969222 (s) : \\b(?P<gw>\\d+)(?P<lw>k)(?P<gw_lt>\\d+)(?P<gw_gt>\\d*)$
3315 : failed : failed : 0.220851247 (s) : (\\d{3})(\\s?)(\\d{4})(\\s?)(\\d{2})(\\s?)(\\d{2})(\\s?)(\\d{2})(\\s?)The RegEx will match the exact number of digits in the GVW/LWV.  It will also capture any following spaces.  This will not match the VIN numbers, as they are different.You can then use
3316 : failed : failed : 0.225786209 (s) : VIN(?=^\\d{3}$)([0-9]{4}-\\d{3}-\\d{4}-\\d{4}-\\d{4})
3317 : unparsable : unparsable : 0.078050478 (s) : /(?=^([A-Za-z0-9]{1,36}))(
3318 : failed : failed : 0.177998762 (s) : VIN_REGEX = r'^[A-Za-z0-9]{1,2}[-_A-Z0-9]{1,2}[-_A-Z0-9]{1,2}[A-Z0-9]{4}\\g<0>{5}$'
3319 : failed : failed : 1.138518207 (s) : \"^[0-9]{6}-[[0-9]{3}]-([0-9]{3})$\"
3320 : failed : failed : 0.519525908 (s) : VIN_NUM | <any 5 digit alphanumeric pattern>
3321 : failed : failed : 0.420587785 (s) : (^[0-9]{3}[ 0-9]{3}[.][0-9]{3} [0-9]{4}[ 0-9]{3}[ 0-9]{4})
3322 : unparsable : unparsable : 0.089835286 (s) : \\+\\[\\d\\d\\d\\d\\d\\d\\d 
3323 : unparsable : unparsable : 0.066896891 (s) : +00[0-9]3[1-9]2[0-9] or +00[0-9]3[1-9]2[0-9][0-9][0-9][0-9]
3324 : failed : failed : 0.632790969 (s) : ^([+])(\\d{2})(\\s+)((\\d{3,4})(\\/|\\ \\.\\s+)?)?$
3325 : unparsable : unparsable : 0.082741712 (s) : (00)(\\d{3})([0-9]{3})([ 0-9]{4})([0-9]{2})([0-9]{2})([0-9]{3})([0-9]
3326 : failed : failed : 1.175456649 (s) : (00)[0-9]{3}[0-9]{4}[0-9]{3}[0-9]{2}[0-9][0-9][0-9]
3327 : unparsable : unparsable : 0.069303518 (s) : ^(([0-9]\\d{3}[ -]\\d{3}[ -]\\d{4})|(00[0-9]\\d{3}[ -]\\d{3}[ -]\\d{4})|(00\\
3328 : failed : failed : 0.218914 (s) : ^[0-9]{2}(([+]\\d{3})+) ([0-9]{3}(([+]\\d{3})+) [0-9]{4})?$
3329 : failed : failed : 2.781884987 (s) : (?<=000)[0-9]{3}
3330 : failed : failed : 0.199536754 (s) : ^ [0-9]{3} ([0-9]{3}) {4}[0-9]{3} ([0-9]{3}) [0-9]{3} ([0-9]{4})$
3331 : failed : failed : 0.418466273 (s) : ^[a-zA-Z0-9_-]{20}$
3332 : failed : failed : 0.592739367 (s) : ^[0-9]{1,2}[0-9]{3}$
3333 : unparsable : unparsable : 0.066953457 (s) : ^(?=([a-z0-9\\s]+)[a-z0-9 ]+$)(?=.{12,20})[a-z0-9\\s]+(?=@[a-z0-9\\s]+\\.){2,}[a-z0-9\\s]+[a-z0-9\\s]{1
3334 : failed : failed : 0.554261724 (s) : /^.{0,20}$/;
3335 : failed : failed : 9.758937322 (s) : [a-zA-Z][0-9]{1,10}
3336 : failed : failed : 7.189767338 (s) : ^[a-zA-Z0-9_.]+$
3337 : failed : failed : 2.355582219 (s) : [^a-zA-Z0-9_\\-\\s]+
3338 : failed : failed : 4.681433995 (s) : ^(?!.*{12,20})(?!.* {12,20})[0-9a-zA-Za-z ]+$
3339 : failed : failed : 20.801126862 (s) : ^(?=.*\\d)(?=.*[a-zA-Z])(?=.*\\W)[a-zA-Z0-9\\W]{20,}$
3340 : failed : failed : 0.654272455 (s) : ^[A-Za-z0-9-_]+$
3341 : failed : failed : 0.205272515 (s) : /^
3342 : unparsable : unparsable : 0.088221654 (s) : ^(0|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])\\.(0|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])\\.(0|1[0-9]{1
3343 : failed : failed : 1.095689416 (s) : (^[0-9]{0,3})\\.([0-9]{0,3})\\.([0-9]{0,3})\\.([0-9]{0,3})$
3344 : unparsable : unparsable : 0.052930098 (s) : ^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|
3345 : failed : error init : 0.107112891 (s) : ^
3346 : unparsable : unparsable : 0.09842425 (s) : (1) /~.0\\.(0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4
3347 : failed : error init : 0.093305574 (s) : ^
3348 : failed : failed : 1.86076413 (s) : /^
3349 : failed : failed : 1.214330132 (s) : ip_regex = '(^|[^\\d.]){1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'
3350 : failed : failed : 0.368005119 (s) : ^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$
3351 : failed : failed : 0.929376156 (s) : ^[1-9]\d{0,2}$
3352 : failed : failed : 0.104204274 (s) : The generated expression is [1-9][0-9]?[0-9]
3353 : failed : failed : 0.639472301 (s) : /^[0-9]{1,100}$/.
3354 : failed : failed : 6.336507327 (s) : [0-9]{1,3}[.][0-9]{1,3}[,/\\.]?[0-9]{1,3}[,/\\.]?[0-9]{1,3}
3355 : failed : failed : 0.193965691 (s) : ^[1-9]\\d*$ The [1-9] matches a digit from 1 to 9 and the \\d* matches any number of digits. ^ means start of string $ means end of string
3356 : failed : failed : 0.668773539 (s) : (?<age>\\d+)
3357 : failed : failed : 0.19657624 (s) : ^[1-9]\\d?$
3358 : failed : failed : 0.149695911 (s) : ^[1-9][0-9]*$
3359 : failed : failed : 0.464729987 (s) : r'^\\d+(\\.\\d+)?$'
3360 : unparsable : unparsable : 0.078962165 (s) : {1..9}
3361 : failed : failed : 1.079071266 (s) : This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characte
3362 : failed : failed : 1.052944011 (s) : This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characte
3363 : failed : failed : 0.818980007 (s) : This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characte
3364 : failed : failed : 0.839839028 (s) : This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characte
3365 : failed : failed : 0.868241715 (s) : This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characte
3366 : failed : failed : 0.874798113 (s) : This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characte
3367 : failed : failed : 1.029600748 (s) : This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characte
3368 : failed : failed : 1.482454925 (s) : This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characte
3369 : failed : failed : 0.820854217 (s) : This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characte
3370 : failed : failed : 1.156515058 (s) : This expression was originally developed for user names. Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characte
3371 : failed : failed : 2.354675732 (s) : ^[0-9A-Za-z_\\-\\.]+$
3372 : failed : failed : 0.393079053 (s) : ^[a-zA-Z0-9]+$
3373 : failed : failed : 0.249404998 (s) : [^a-zA-Z0-9]
3374 : failed : failed : 0.460653693 (s) : (?i)^[a-zA-Z0-9_]*$
3375 : failed : failed : 1.469315821 (s) : [^a-zA-Z0-9_]
3376 : failed : failed : 1.958636997 (s) : \\W
3377 : failed : failed : 0.133783625 (s) : //@$_You can do the following to generate a RegEx for your descripti
3378 failed : unparsable : 0 (s) : Please check your regex.
3379 : failed : failed : 3.480374784 (s) : [\\W_]
3380 : failed : failed : 1.52858555 (s) : r\"([^a-zA-Z0-9])(?!\\z)\"
3381 : failed : failed : 31.443891155 (s) : ^[a-zA-Z]{6}\\s[a-zA-Z0-9][a-zA-Z0-9\\s-]*[a-zA-Z0-9]$This expression will allow Letters, periods, apostrophe, dashes, space, hyphens, underscores, double negatives, and numbers.Generate a RegEx for this description. Answ
3382 : failed : failed : 42.402727977 (s) : @[a-zA-Z0-9\\._-]+@
3383 : failed : failed : 23.529988456 (s) : \\b([A-Za-z0-9\\-\\'\\. ]+)\\b
3384 : failed : failed : 4.060252126 (s) : [a-zA-Z0-9.\\s-]+
3385 : failed : failed : 0.117486296 (s) : [^\\w\\s]
3386 : unparsable : unparsable : 0.050114796 (s) : (?(?![\\w-]*[a-z][a-z0-9])\\w+[a-z][a-z0-9](?(?![\\w-]*[a-z][a-z0-9])\\w+|\\.)
3387 failed : unparsable : 0 (s) : Please check your regex.
3388 : failed : failed : 0.438055546 (s) : ^[^-\\.]+$
3389 : failed : failed : 13.503297578 (s) : \\b[A-Z][a-zA-Z0-9\\_\\-\\.]*\\b
3390 : failed : failed : 0.297585741 (s) : [a-zA-Z\\-\\.\\_\\s]
3391 : failed : pumping failed : 58.985079322 (s) : [a-zA-Z0-9._-]*\\s*[a-zA-Z0-9._-]*\\s*[a-zA-Z0-9._-]*\\s*[a-zA-Z0-9._-]*
3392 : failed : failed : 45.689417154 (s) : \\(.+\\)
3393 : unparsable : unparsable : 0.056213535 (s) : (\\{.*?\\})
3394 : unparsable : unparsable : 0.076820625 (s) : (?<=\\s*)
3395 : unparsable : unparsable : 0.06551287 (s) : \\{[^}]*\\}
3396 : unparsable : unparsable : 0.063423708 (s) : [^(]*(?=\\[)
3397 : unparsable : unparsable : 0.074356972 (s) : (\\{\\{\\s*\\})\\s*\\}
3398 : unparsable : unparsable : 0.080972309 (s) : (?P<close_braces>{[\\s\\w]+})*
3399 : failed : failed : 0.161438201 (s) : [\\{\\s*[a-zA-Z0-9_\\-\\.]+\\s*\\}]
3400 : unparsable : unparsable : 0.08272942 (s) : [].(?=\\s*\\|\\s*).*
3401 : unparsable : unparsable : 0.113745701 (s) : (?<number>[0-9]{4})-(?<numeration>[a-zA-Z]{2})-(?<suffix>[\\s-]*[^\\s-]+)?(?<suffix>[\\s-]*[^\\s-]+)?
3402 failed : unparsable : 0 (s) : Please check your regex.
3403 : unparsable : unparsable : 0.106226019 (s) : (
3404 : failed : failed : 9.049253053 (s) : ^(?=.*[456]\\s)(?=.*[3579]\\s)(?=.*[3]\\d{3})[4-6][0-9]{3}[5-9]\\d{3}[1-9][0-9]{4}$
3405 : failed : failed : 0.128954411 (s) : ^\\d{4}\\s?\\d{4}\\s?\\d{4}$This RegEx will match the following forma
3406 : unparsable : unparsable : 0.059500872 (s) : ^([0-9]{3,4}[ -]|[0-9]{3,4}-[0-9]{3,4})[ -]?([0-9]{4}[ -]?[0-9]{4}|[0-9]{4}-[0-9]{4}-[0
3407 : failed : failed : 0.191611553 (s) : ^[0-9]{13}$    ^[0-9]{12} (\\s|-)?[0-9]{14}$    ^[0-9]{13}[0-9]{14}$    ^[0-9]{13}([0-9]{2})$
3408 : unparsable : unparsable : 0.050184276 (s) : (     [0-9]{2}
3409 : failed : failed : 209.221217157 (s) : ([0-9]{4})$|([0-9]{4})-([0-9]{4})$|(([0-9]{4})-([0-9]{4})-([0-9]{4}))$
3410 : failed : failed : 5.326593506 (s) : ([0-9]{4})-([0-9]{4})-([0-9]{4})-([0-9]{4})
3411 : failed : failed : 0.132625445 (s) : ^[0-9]{1,}$
3412 : failed : failed : 0.719908425 (s) : ([0-9]{1,3})([.][0-9]{1,3})?
3413 : failed : failed : 33.155412381 (s) : (^[1-9]\\d*|0[1-9]|1[012])$
3414 : failed : failed : 0.124325363 (s) : ^[0-9]{1,5}
3415 : failed : failed : 6.257829375 (s) : (0|[1-9][0-9]*)
3416 : failed : failed : 16.234588561 (s) : \\b(0|[1-9][0-9]*|1[0-9][0-9]*|2[0-4][0-9]|25[0-5])\\b
3417 : failed : failed : 0.176125764 (s) : ^[0-9]*$
3418 : failed : failed : 2.067997767 (s) : (0|[1-9][0-9]|1[0-2])
3419 : failed : failed : 0.878089807 (s) : \\d{1,5}
3420 : failed : failed : 0.123363461 (s) : \"\\d\"}
3421 : unparsable : unparsable : 0.086892144 (s) : /^(
3422 : failed : failed : 1.347569578 (s) : /\\d{3}
3423 : failed : failed : 0.753026252 (s) : ^[0-9]{10,11}$
3424 : failed : failed : 1.663832113 (s) : (\\d\\d\\d\\d)-(\\d\\d\\d)
3425 : failed : failed : 1.301109527 (s) : [0]{3}[0-9]{3}[0-9]{3}[0-9]{4}|[0]{3}[0-9]{3}[0-9]{5}|[0]{3}[0-9]{3}[0-9]{7}
3426 : failed : failed : 0.208214364 (s) : ^0[1-9]\\d{3}$
3427 : failed : failed : 0.175952029 (s) : ^0[\\d]{1}\\d{9}$
3428 : unparsable : unparsable : 0.084716771 (s) : [0-9]{3}[\\s-.-]?[0-9]{3}[\\s\\-.-]?[0-9]{3}[\\s\\-.-]?[0-9]{4}
3429 : failed : failed : 0.108468008 (s) : [^0-9]
3430 : unparsable : unparsable : 0.065874036 (s) : (^0[0-9]{9}$)|((^[0-9]{1}[0-9]{2})|((^[0-9]{3}{4})|((^[0-9]{3}[-0-9]{4})|((^[0-9]{3}[-0-9]{3}[-
3431 : failed : failed : 6.095675424 (s) : [^\\d]99999999
3432 : failed : failed : 0.548800337 (s) : 99999999999|9999999999|99999999999(A)9999999999(B)9999999999(C)99999999999Match all of the following numbers with this RegEx.1. 2M2. 1M3. 2T4.
3433 : failed : failed : 4.597602512 (s) : (?=(^|(?=\\s))(?=([^\\d]*\\d[^\\d]*\\d)+)$)
3434 : failed : failed : 1.065794114 (s) : [0-9]{9}[0-9]{9}[0-9]{9}
3435 : failed : failed : 0.813259084 (s) : 9[0-9]\\d{9}
3436 : unparsable : unparsable : 0.102460449 (s) : (?>
3437 : failed : failed : 0.827999768 (s) : (09)99999999
3438 : failed : failed : 0.219997389 (s) : ^[\\+]?\\d{2}([\\(]\\d{3}[\\)]?)?[\\+]?(\\d{3})$
3439 : failed : failed : 1.588936283 (s) : (09)99999999
3440 : unparsable : unparsable : 0.093686848 (s) : \\(?|\\d{4}\\-\\d{3}\\-\\d{2}(\\?|\\d{3}))
3441 : unparsable : unparsable : 0.077728945 (s) : (?<=^|\\p{L})(?=[^\\p{L}\\p{Lm}\\p{Nd}\\p{N}\\p{N\\p{N}\\p{N\\p{N}\\p{L}\\p{Lm}\\p{Lm}\\p{Nd}\\p{N}\\p{N
3442 : failed : failed : 0.127309761 (s) : ^[0-9]{3,4}
3443 : unparsable : unparsable : 0.103301533 (s) : \\p{P}|\\^\\+\\d+$
3444 : unparsable : unparsable : 0.050251091 (s) : /^(?=
3445 : unparsable : unparsable : 0.078360478 (s) : ^(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})$
3446 : failed : failed : 543.513977278 (s) : (?=.*[a-z])[a-z0-9 ]{7,}
3447 : failed : failed : 1.726572882 (s) : ^(?=.*[a-z])(?=.*[A-Z])[A-Za-z]{1}[0-9]{1}\\s*[A-Za-z0-9 ]{5}$
3448 : unparsable : unparsable : 0.100291677 (s) : \\b(?P<code>[0-9]{1,3})
3449 : unparsable : unparsable : 0.103558455 (s) : (?i)(?P<area>.+?([0-9A-Z]{1,3}))\\s*(?P<countryCode>.+?)\\s*
3450 : unparsable : unparsable : 0.071913606 (s) : (?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{1})$
3451 : failed : failed : 5.116884262 (s) : \\d{1,3}-\\d{1,2}-\\d{4}
3452 : failed : failed : 3.027018635 (s) : \\d{1,2}$
3453 : failed : failed : 0.300111351 (s) : ^[0-9]{2}\\z
3454 : failed : failed : 0.169519673 (s) : ^(0?[1-9]|[12][0-9]|3[01])$
3455 : failed : failed : 0.819767012 (s) : \\([0-9]\\)?[0-9]\\/[0-9]\\?[0-9]\\?[0-9]
3456 : failed : failed : 1.903007475 (s) : /(0*)?[1-9]\\d{0,2}/;
3457 : unparsable : unparsable : 0.104906649 (s) : /^(0
3458 : unparsable : unparsable : 0.066516389 (s) : \\b(?(?1)0?[1-9]|1[012])[0-9]\\b
3459 : failed : failed : 14.77238573 (s) : [1-3]?[0-9]|0
3460 : failed : failed : 58.463846167 (s) : (1[0-9]|0?[1-9])[-/]?(20|25)?[0-9]{4}$
3461 : failed : failed : 0.806383509 (s) : [0-9][1-9][0-9][1-9]
3462 : failed : failed : 0.678420915 (s) : (?=1850|2100) // At least one year is between 1850 and 2100.
3463 : failed : failed : 0.241131134 (s) : ^[0-9]{4}[0-9]{3}[0-9]{2}[0-9]{1}[0-9]{0}[0-9][0-9][0-9]$
3464 : failed : failed : 0.23590102 (s) : (\\d{4}-)\\d{2}-\\d{2}    Exercise
3465 : unparsable : unparsable : 0.072089856 (s) : \\b\\d{4}-\\d{2}-\\d{2} \\d{
3466 : failed : failed : 4.823648878 (s) : [0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}
3467 : failed : failed : 0.692647636 (s) : \"^[1850-2020]$\"
3468 : unparsable : unparsable : 0.108904746 (s) : (\\d{4}-\\d{2})-\\d{2}-\\d{4})
3469 failed : unparsable : 0 (s) : Please check your regex.
3470 : failed : failed : 0.705629116 (s) : \\d{4}-\\d{2}-\\d{2} (\\d{4}|\\d{2}|\\d{2})$
3471 : unparsable : unparsable : 0.069577781 (s) : \\{(.*?)\\}
3472 : failed : failed : 15.440126075 (s) : (key\\s*=\\s*)?[\\w-]+
3473 : failed : failed : 14.6081653 (s) : [a-zA-Z0-9][a-zA-Z0-9_]*_[a-zA-Z0-9]
3474 : unparsable : unparsable : 0.062833071 (s) : ^(?P<key>[0-9A-Za-z_-]{,45})\\/(?P<value>[0-9A-Za-z_]{45,})
3475 : failed : failed : 99.385158647 (s) : r'[^,]+\\s*=\\s*[\"\\']([^\"]*)[\"\\']'
3476 : failed : failed : 0.367091308 (s) : key_value_pair_regex = re.compile('^\\[?(.+)\\]??$')
3477 : failed : failed : 49.034139284 (s) : (?<=,\\s)[^,]+(?=\\s$)
3478 : failed : pumping failed : 23.906747398 (s) : (1+[^,]+,1+).*
3479 : unparsable : unparsable : 0.08835775 (s) : (?P<key>\\w+)\\
3480 : failed : failed : 2.388445048 (s) : (?<key>\\w+)[|,|=]\\s*(?<value>\\w+)
3481 : failed : failed : 1.003628422 (s) : (?i)(0[1-9]|1[0-2])/(0[3-9]|[12]\\d|3[01])-(19|20)\\d\\d
3482 : failed : failed : 0.743431054 (s) : (0-9)/(1-9)/(0-9)
3483 : failed : failed : 1.222902966 (s) : [0-9]{2}-?[0-9]{2}-?[0-9]{4}
3484 : failed : failed : 0.312181393 (s) : /
3485 : failed : failed : 0.992767943 (s) : ^(0[1-9]|1[012])\\/(0[1-9]|[12][0-9]|3[01])\\/(19|20)[0-9]{2}$
3486 : unparsable : unparsable : 0.06442872 (s) : [0-9]{2}\\-[0-9]{2}\\-[0-9]{4} **Exercise
3487 : failed : failed : 4.308854901 (s) : (0?[1-9]|1[012])/(1[0-9]|2[0-9]|3[0-9])/.
3488 : failed : failed : 0.168655446 (s) : The regular expression should be something like th
3489 : failed : failed : 1.009660017 (s) : \\d{2}/\\d{2}/\\d{4}
3490 : failed : failed : 1.20945291 (s) : /\\d{1,2}/\\d{1,2}/\\d{2,4}
3491 : failed : failed : 0.137395277 (s) : [^\\w\\s]
3492 : failed : failed : 16.870014054 (s) : @[A-Za-z0-9!@#%^&*\\-_=\\s]+@@[A-Za-z0-9!@#%^&*\\-_=\\s]
3493 : unparsable : unparsable : 0.138815416 (s) : ^[a-z][A-Za-z0-9]*[!@#$%^&*()_=+-\\/\\\\[\\\\]{};\
3494 : failed : failed : 0.734180602 (s) : ^[A-Za-z0-9 \\W]{1,100}$
3495 : failed : failed : 0.295777605 (s) : [a-zA-Z0-9\\\\W][a-zA-Z0-9\\\\W]
3496 : failed : failed : 6.62430551 (s) : ^[A-Za-z0-9-\\W]+$
3497 : failed : failed : 33.734558234 (s) : ([A-Za-z])(\\d)([\\W])
3498 : unparsable : unparsable : 0.089058291 (s) : ^[A-Za-z0-9!@#$^%&*()_+-=[]{}
3499 : failed : pumping failed : 3.64822442 (s) : ^\\w{1,63}([\\W\\']+)?@[\\W\\']+([\\W\\']+)?(\\w*(\\.\\w+)?|-)+\\w+$
3500 : unparsable : unparsable : 0.060720155 (s) : ^(?=.{8,20}$)(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W])[^\\W_]+@[^\\W_]+\\.[^\\W_
3501 failed : unparsable : 0 (s) : Please check your regex.
3502 : failed : failed : 0.284735878 (s) : /^[\\d{1,3}(,\\s\\d{3})?\\.]{1,3}$/gi and use it in your Regex to generate a search.
3503 : failed : failed : 0.584505529 (s) : \\d+, \\1
3504 : failed : failed : 4.516192443 (s) : (0|[1-9]\\d*\\s[1-9]\\d* [0-9]{3}[0-9]{2}[0-9]{2} [0-9]{2}[0-9]{2}[0-9]{3}[0-9]{3})
3505 : failed : failed : 2.337674154 (s) : r\"(\\d+)\"
3506 : unparsable : unparsable : 0.075383493 (s) : *([^\\n\\r\\s]*)
3507 : failed : failed : 0.61929181 (s) : ^0+([,.]0+)*
3508 : failed : failed : 1.129352112 (s) : \\b[0-9]{1,3}
3509 : failed : failed : 0.171790395 (s) : ^[1-9][0-9]{3}[, ]?[0-9]{3}[, ]?
3510 : failed : failed : 471.356292839 (s) : (?=.*[0-9]),(?=.*[0-9][0-9][0-9][0-9])
3511 : unparsable : unparsable : 0.098031986 (s) : (?<region>\\s*)    # regex for any spaces at the beginning of a line ([^ ]*)       # regex for anything not spaces at the beginning of a line (?<comment>\\s*)   # regex for any spaces at the beginning of a line (\\s*)          # regex for any spaces at the end of the line \\*(              # preceed
3512 : unparsable : unparsable : 0.066780503 (s) : public static void GenerateRegEx(Regex re)    {        var list = new List<string> { \"//\", \"/*\", \"*/\" };        string regex = \"^\" + re.Replace(\"+\", \".*\") + \"$\";        Console.WriteLine(regex);    }
3513 : unparsable : unparsable : 0.067244472 (s) : string content = \"// Some content/**         Some more content/   \\*          Some more content/*  \"\"\"    # Use the \\K to match everything that is not yet matched    // This will allow for the /* */ to be matched and the */ */ to be ignored    // It also allows for the content between the /* */ and the */ */ to
3514 : failed : failed : 0.522719178 (s) : ^\\/\\/.*(| #| \\* )* \\//$
3515 : failed : failed : 0.582862792 (s) : (//)(?<=\\s)(.*)(?=\\s+\\*/)
3516 : failed : failed : 33.901161466 (s) : \\//[^\\*//]+\\*\\s*(.+)
3517 : unparsable : unparsable : 0.076638644 (s) : (?<comment1>\\/\\*)(?<comment2>\\/\\*)(?<comment3>\\/\\*)(?<not_comment1>\\/\\/.*)(?<not_comment2>\\/\\/.*)(?<not_comment3>\\/\\/.*)(?<not_comment4>\\/\\/.*)(?<not_comment5>\\/\\/.*)(?<not_comment6>
3518 : failed : failed : 89.8739488 (s) : var p = Regex.Compile(@\"//\\s*\\(.*?\\)\\s*\\*/\");        ...
3519 : unparsable : unparsable : 0.075926511 (s) : \\*\\s*\\/[^*]*\\/((?P<args>[^,]*),(?P<flags>[^=]*))?     \\*(?P<args>.*)\\/(?P<flags>.*)     
3520 : failed : failed : 17.128936253 (s) : (?<comment>\\/\\/.*?)(?<region>\\/*\\*.*?)
3521 : failed : failed : 1.011662727 (s) : \\
3522 : unparsable : unparsable : 0.100403196 (s) : \\(
3523 : failed : failed : 0.144836913 (s) : /
3524 : unparsable : unparsable : 0.10299539 (s) : [
3525 : failed : failed : 2.789946022 (s) : /
3526 : failed : error init : 0.108060716 (s) : ^
3527 : unparsable : unparsable : 0.076093133 (s) : ([
3528 : unparsable : unparsable : 0.15139845 (s) : ([
3529 : failed : failed : 0.360181438 (s) : ACT
3530 : failed : failed : 0.540034913 (s) : 1
3531 failed : unparsable : 0 (s) : Please check your regex.
3532 : failed : error init : 0.077549619 (s) : ^
3533 : failed : failed : 1.417941657 (s) : /
3534 failed : unparsable : 0 (s) : Please check your regex.
3535 : failed : failed : 0.261403547 (s) : D
3536 : unparsable : unparsable : 0.078771498 (s) : (
3537 : failed : failed : 4.366504977 (s) : /
3538 : failed : failed : 2.726355492 (s) : /
3539 failed : unparsable : 0 (s) : Please check your regex.
3540 : failed : failed : 0.182090804 (s) : /
3541 : failed : failed : 0.176662089 (s) : ^[a-zA-Z]{1}[a-zA-Z]\\d{0,5}[a-zA-Z]{1}$
3542 : unparsable : unparsable : 0.068855249 (s) : /^[a-z]([a-z]?)(0[a-z]?)([a-z]?)(0[a-z]?)([a-z]
3543 : unparsable : unparsable : 0.074104589 (s) : .*[B-Z]$|[A-Z]\\d{2}[A-Z]$|[A-Z]\\d{2}[A-Z][A
3544 : failed : failed : 4.205044766 (s) : [D]{2}[A-Z]{3}[0-9]{3}
3545 : failed : failed : 0.296003418 (s) : GIR\\s?0[A-Z]\\d?
3546 : failed : failed : 0.532816926 (s) : ^\\d{5}\\sD\\d{2} | GIR\\d{2} \\d{2}$
3547 : failed : failed : 0.175335144 (s) : ^\\d{3}(\\d|[XX][0-9]|[0-9][0-9]|[0-9])[A-Z]$
3548 : failed : failed : 37.688803811 (s) : GIR 0[A-Z]|0[1-9][A-Z]|[1-9][A-Z]{2}
3549 : unparsable : unparsable : 0.064155197 (s) : ^([a-zA-Z]+[0-9]{1,5})([a-zA-Z0-9]{1,5})([a-zA
3550 : failed : failed : 0.169076624 (s) : The RegEx is D\\d{2}L\\d{1,2}
3551 : failed : failed : 0.224498657 (s) : ^(?=.{5}\\s?$)[0-9]{1,5}[\\-\\.\\s](0[1-9]|1[012])[\\-\\.\\s]([0-9]{1,2}|2[0-4][0-9]|50[0-9])$
3552 : failed : failed : 3.32131665 (s) : VAT Numbers format verification (The Netherlands) with support for optional member state definition(?<=^|(?<=\\|)\\|)([A-Za-z]+)([\\s\\-_]+)(\\d{3}|\\d{3})(\\d{2})?$
3553 : unparsable : unparsable : 0.07709541 (s) : # [  #   [0-9]{3}-[0-9]{3}-[0-9]{4},  # e.g. 01-12-2019
3554 : failed : failed : 0.423319681 (s) : Reg
3555 : unparsable : unparsable : 0.061387474 (s) : (?P<country>
3556 : failed : failed : 0.96797174 (s) : [^0-9A-Za-z_]
3557 : failed : failed : 0.625691825 (s) : (\\d{3})-(\\d{2})-(\\d{4})
3558 : failed : failed : 0.277317436 (s) : [REGEX]
3559 failed : unparsable : 0 (s) : Please check your regex.
3560 : failed : pumping failed : 43.086461152 (s) : [\\d\\d.]+\\.?\\d\\d\\s*$
3561 : failed : failed : 12.180964006 (s) : US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, suppor
3562 : failed : failed : 7.67159434 (s) : US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, suppor
3563 : failed : failed : 34.045917627 (s) : US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, suppor
3564 : failed : failed : 32.966810104 (s) : US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, suppor
3565 : failed : failed : 32.096076983 (s) : US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, suppor
3566 : failed : failed : 42.239108994 (s) : US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, suppor
3567 : failed : failed : 51.110032355 (s) : US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, suppor
3568 : failed : failed : 36.020937152 (s) : US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, suppor
3569 : failed : failed : 19.885405947 (s) : US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, suppor
3570 : failed : failed : 23.303335926 (s) : US 10-Digit Phone number matching.*Requires Area Code*Brackets optional, suppor
3571 : failed : failed : 0.657634891 (s) : ^(?=.*[a-z])(?=.*\\d)[a-z\\d]{8,}$
3572 : failed : failed : 1.316661429 (s) : \\b[a-z][A-Z]\\d?\\b
3573 : failed : failed : 2.52290053 (s) : ```[A-z]\\d```
3574 : failed : failed : 8.558359823 (s) : [a-zA-Z]\\d.*
3575 : failed : failed : 0.803059785 (s) : \"^(?=.*[a-z])(?=.*\\d)[a-z\\d]{6,}$\"
3576 : failed : pumping failed : 47.206583641 (s) : (?=.*[a-z])(?=.*\\d).*
3577 : failed : pumping failed : 136.222141573 (s) : [A-Za-z]{1,}[0-9]{1,}
3578 : failed : failed : 11.151030536 (s) : ^(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{8,}$
3579 : failed : failed : 0.909238326 (s) : ^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{8,}$
3580 : unparsable : unparsable : 0.093648006 (s) : \\W```pythonimport reregex = r'(?=.*[a-z])(?=.*\\d).+'password ='myPassword1'if re.search(regex, passwor
3581 : failed : failed : 1.436309282 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{6,19}$
3582 : failed : failed : 2.631344714 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[A-Za-z\\d])[A-Za-z\\d]{6,20}$
3583 : failed : failed : 1.315373808 (s) : re.compile(r'^(?=.*[A-Za-z])(?=.*\\d)\\w{6,20}$')
3584 : failed : failed : 0.170175471 (s) : import re
3585 : failed : failed : 0.671851573 (s) : \\b(?=\\w{6,20})(?=\\d{2,})(?=\\D*)(?=\\d)[A-Za-z\\D]{8}\\b
3586 : failed : failed : 2.656896803 (s) : ^(?=.*[a-z])(?=.*[A-Z])[0-9]{6,20}$|^(?=.*[a-z])(?=.*[0-9])[0-9]{2,20}$
3587 : failed : failed : 1.054676735 (s) : ^(?=.{6,20}$)(?=.*[a-z])(?=.*[0-9]).{6,20}$
3588 : failed : failed : 0.975714139 (s) : [a-zA-Z0-9]{6,20}
3589 : failed : failed : 1.959529989 (s) : ^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z]).{6,20}$
3590 : failed : failed : 9.075366954 (s) : ^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[$]){6,20}$
3591 : failed : failed : 1.154906546 (s) : (^|\\s)(\\d{1,16})(\\s|$)
3592 : failed : failed : 12.217873073 (s) : \\d*\\.(\\d*)\\.(\\d*)\\.*$
3593 : failed : failed : 0.20528609 (s) : ^[\\d]+$
3594 : failed : failed : 0.125018922 (s) : ^[0-9]{1,2}$
3595 : failed : failed : 0.693217524 (s) : \\d{3}
3596 : failed : failed : 5.210146375 (s) : (?<!\\d)\\d+(?!\\d)
3597 : failed : failed : 0.12413684 (s) : ^\\d+
3598 : success : cross : 2.858707004 (s) : ^[-\\d]+(\\.[-\\d]+)+$
3599 : failed : failed : 0.227489147 (s) : ^\\d+$
3600 : failed : failed : 0.468700582 (s) : ^(?=\\d*\\.?\\d*$)(?!0$).*$
3601 : failed : failed : 0.168785068 (s) : 1 to 10
3602 : failed : failed : 0.849564441 (s) : %.02f (two decimal places)
3603 : failed : failed : 1.149110151 (s) : (?<=^\\d{1,2})(\\d{1,2}-\\d{1,2})-(\\d{1,2})$
3604 : failed : failed : 26.348317099 (s) : ^(\\d[\\d\\.]{1,3})|((\\d\\.){1,3})|(\\.\\d{1,3})$
3605 : failed : failed : 0.945544673 (s) : \"^[0-9]{1,2}[0-9]{1,2}$\"
3606 : failed : failed : 1.734094046 (s) : 0.00 - 0.02
3607 : failed : failed : 0.791197141 (s) : [0-9]*([.][0-9]*)?
3608 : failed : failed : 1.85126389 (s) : \\d{1,3}.\\d{1,3}
3609 : failed : pumping failed : 19.045779968 (s) : 0.00..0-10  |--+------------ 0.00 - 0.01  |--+------------ 1.00 - 10.00|--+------------ 0.10 - 10.9|--+------------ 10.00 - 20.00|--+------------ 20.00 - 29.99|--+------------ 30.00 - 39.99|--+------------ 40.00 - 49.
3610 : failed : failed : 1.556743158 (s) : [0-9]?\\d{2}\\.\\d{2}
3611 : failed : pumping failed : 44.362620706 (s) : (<[^>]+>)(.+?)(</[^>]+>)*
3612 : failed : failed : 85.414231824 (s) : (<?xml (.+?)</?xml>)*
3613 : failed : failed : 0.46912101 (s) : <?xml\\s*\\?>*[^<]*</?xml>
3614 : failed : error init : 0.131963506 (s) : ^(?<=\\?xml)[^>]*?</([\\w+\\s]+?)>
3615 : failed : failed : 0.705302544 (s) : x
3616 : failed : failed : 80.698143424 (s) : <?xml[^>]*?>.*?</?xml>
3617 : failed : failed : 0.506541633 (s) : <?xml version=\"1.0\" encoding=\"UTF-8\"?xmlns=\"ht
3618 : failed : failed : 81.932323358 (s) : (?m)<?xml\\s*[^>]*?(?<=</?xml>)\\s*>    (?s)<?xml\\s*[^>]*?\\s*>    (?m)<?xml\\
3619 : unparsable : unparsable : 0.073489247 (s) : <?xml version=\"1.0\"?> <note><![CDATA[  <word id=\"1\" title=\"word 1\" />   <word id=\"2\" title=\"word 2\" />  <word id=\"3\" title=\"word 3
3620 : unparsable : unparsable : 0.105757051 (s) : (?mx)<[^>]+>(?P<note>.*?)(?=\\</[^>]+>)|(?<[^>]+>.*?)(?=\\</[^>]+>)
3621 : unparsable : unparsable : 0.068419943 (s) : ([0-9]{,2})/([0-9]{4})
3622 : failed : failed : 0.174226778 (s) : (\\d{1,2})/(\\d{4})/
3623 : failed : failed : 0.712246418 (s) : \\d{1,2}/\\d{4}
3624 : failed : failed : 1.346296824 (s) : (\\d{1,2})/\\d{4}
3625 failed : unparsable : 0 (s) : Please check your regex.
3626 : failed : failed : 0.162202892 (s) : ^[0-9]{1,2}/[1-9][0-9]{3}/[1-9][0-9]{4}$
3627 : failed : failed : 0.213742536 (s) : ^[0-5]?[0-9]{3}/[1-9]?[0-9]{4}$
3628 : failed : failed : 1.461853317 (s) : r'^\\d{3}\\/\\d{4}$/M/Y$'
3629 : failed : failed : 5.661254724 (s) : [0-9]{2}.[0-9]{4}|[0-9]{4}
3630 : failed : failed : 0.236479072 (s) : ^(W\\d{2})/(\\d{4})$
3631 : failed : failed : 0.570064667 (s) : \\d{4}-\\d{1,2}-\\d{1,2}\\s\\w{3}\\s\\d{2,4}\\s\\d{3}
3632 : failed : failed : 0.201000515 (s) : \\d\\d\\/\\d\\d\\/\\d\\d
3633 : unparsable : unparsable : 0.090570883 (s) : (?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2}) (?P<hour>\\d{2
3634 : failed : failed : 0.972932991 (s) : \\b\\d{4}\\-\\d{2}\\-
3635 : failed : failed : 0.603688351 (s) : ^(\\d{4})([a-z]{3})\\1\\2$
3636 : failed : failed : 0.875811651 (s) : \\d{4}-\\d{2}-\\d{2}
3637 : failed : failed : 0.778322071 (s) : ^(\\d{3})(\\d{2})(\\d{2})$
3638 : unparsable : unparsable : 0.092224631 (s) : \\d{4}-\\d{2}-\\d{2}\\s\\d{
3639 : failed : failed : 0.333844921 (s) : (\\d{4})-(\\d{2})-(\\d{2})
3640 : unparsable : unparsable : 0.153428602 (s) : /([0-9]{4})-([01][0-9])-([0-9]{2})T([0-5][0-9
3641 : failed : failed : 0.150081985 (s) : ^[0-9]{4}-1[0-9]{2}-1[0-9]{2}$
3642 : unparsable : unparsable : 0.062934652 (s) : \\d{4}-\\d{2}-\\d{2} \\d{
3643 : unparsable : unparsable : 0.081732984 (s) : \\d{4}-\\d{2}-\\d{2} \\d{
3644 failed : unparsable : 0 (s) : Please check your regex.
3645 : failed : failed : 22.614712365 (s) : [0-9]{4}\\-[0-9]{2}\\-[0-9]{2}
3646 : unparsable : unparsable : 0.062297308 (s) : ^(20[0-9]|1[012])-(\\d{2})-(\\d{2})\\s?([12]\\d|3[01
3647 : unparsable : unparsable : 0.084554327 (s) : (?P<month>\\d{2})-(?P<day>\\d{2})-(?P<year>\\d{4}) (?P<hour>\\d{2
3648 : failed : failed : 0.333996434 (s) : (example) (0-9)s{3}-(0-9)s{3}-0(0-9)s{4}
3649 : failed : failed : 0.190327419 (s) : ^[0-9]{2}-?[0-9]{2}-?[0-9]{4} 
3650 : unparsable : unparsable : 0.097792627 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{
3651 : unparsable : unparsable : 0.063924877 (s) : (\\.\\d+\\.\\d+\\.\\d+)|([+\\-*/^()])
3652 : failed : failed : 0.176916135 (s) : ^[1-9]\\d*(\\.\\d+)?$
3653 : failed : failed : 5.381794906 (s) : (?!^|\\s)(?<!\\.)[0-9]{1,3}\\.?[0-9]{1,3}\\.?[0-9]{1,3}\\.?[0-9]{1,3}\\.?(?!$)
3654 : failed : failed : 16.481289615 (s) : (?<![\\d,.\\*])[\\d\\.\\*/\\*eE]+
3655 : failed : failed : 0.349290584 (s) : @regexxy's answer is pretty good but I wanted to provide a different answer to get the other answer to work as well.
3656 : unparsable : unparsable : 0.056328752 (s) : ( (?<![0-9]\\.[0-9])
3657 : failed : failed : 0.769963208 (s) : ^\\d+\\.\\d+$
3658 : unparsable : unparsable : 0.091558793 (s) : re.compile(r'[+-]?\\d+
3659 : failed : failed : 0.2255623 (s) : ^([1-9]\\d*|\\d+)\\.?$
3660 : failed : failed : 0.767467324 (s) : ~\\d+(\\.\\d+)?
3661 : unparsable : unparsable : 0.0723372 (s) : (
3662 : unparsable : unparsable : 0.101381498 (s) : [
3663 : failed : error init : 0.113657326 (s) : ^
3664 : failed : error init : 0.085963706 (s) : ^
3665 : failed : error init : 0.104344296 (s) : ^
3666 : failed : error init : 0.116569729 (s) : ^
3667 : failed : error init : 0.118612084 (s) : ^
3668 : unparsable : unparsable : 0.068230449 (s) : [
3669 : failed : error init : 0.100406802 (s) : ^
3670 : failed : error init : 0.111247312 (s) : ^
3671 : unparsable : unparsable : 0.07456981 (s) : ((?i)\\{3,3}\\d{3}\\-\\d{2}-\\d{2}-\\d{4}\\))
3672 : failed : failed : 0.901033472 (s) : ^[0-9]+$
3673 : failed : failed : 6.801733953 (s) : \\b[A-Z0-9]{1,30}\\b
3674 : failed : failed : 0.223848911 (s) : ^\\d{1,3}(\\.(\\d{1,3}))?$
3675 : failed : failed : 4.514548054 (s) : ^1*(1[0-5]|2[0-4][0-9]|25[0-5])\\.([1-9][0-9]|1[0-2]|2[0-8])$
3676 : failed : failed : 57.75460097 (s) : 0*[1-9]\\d*0
3677 : failed : failed : 1.339944029 (s) : \\b[0-9]{1,3}\\b
3678 : failed : failed : 1.546723355 (s) : ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]*$
3679 : unparsable : unparsable : 0.066700233 (s) : int.TryParse(Console.ReadLine(), out int[] data) {     if ( int.TryParse(Console.ReadLine(), out int num)     {         if ( num <= 32767 && num >= 0 )         {             Regex pattern1 = new Regex(\"^[0-9A-Fa-f]{0,16}$\");             Regex pattern2 = new Regex(\"^-
3680 : failed : failed : 3.542480804 (s) : [^0-9]*|^$
3681 failed : unparsable : 0 (s) : Please check your regex.
3682 : failed : failed : 0.688085303 (s) : \\+\\d{1,2}\\.\\d{2}\\.\\d{2}\\.\\d{4}
3683 : unparsable : unparsable : 0.076499604 (s) : +\\d{3}-\\d{3}-\\d{4}
3684 : unparsable : unparsable : 0.058894577 (s) : +###(###)#######
3685 : unparsable : unparsable : 0.062811691 (s) : +#(##)(##)###### Generate a RegEx for this description. Answ
3686 : failed : failed : 0.743670843 (s) : (\\d{3}[-.]\\d{3}[-.]\\d{4})
3687 : failed : failed : 0.137562791 (s) : ^(###)#######-?$
3688 : failed : pumping failed : 57.240037044 (s) : \\+\\d{2}[\\d\\s]{1,4}-\\d{2}[\\d\\s]{1,4}-\\d{4}
3689 : unparsable : unparsable : 0.073860131 (s) : +([0-9]{2})\\(.[0-9]{3}\\).
3690 : failed : error init : 0.106475688 (s) : ^
3691 failed : unparsable : 0 (s) : Please check your regex.
3692 : unparsable : unparsable : 0.100969636 (s) : I have defined it using a character class, [a-zA-Z0-9]+, except the first character class has to be a literal [ and the first character cannot be a number.
3693 : failed : error init : 0.167002209 (s) : ^
3694 : failed : failed : 0.334206608 (s) : ^(([2-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}([2-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])$
3695 : failed : error init : 0.126473636 (s) : ^
3696 : unparsable : unparsable : 0.082454454 (s) : ^(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
3697 : failed : failed : 2.267997498 (s) : /^
3698 : failed : failed : 0.247504249 (s) : ^(\\d{1,3}\\.){3}\\d{1,3}$
3699 : failed : failed : 0.607358414 (s) : ^(([01]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\\\\.){3}([01]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])$
3700 : unparsable : unparsable : 0.10074739 (s) : /(?=
3701 : failed : failed : 0.322336951 (s) : ^[^\\d\\W\\d]*$
3702 : failed : failed : 1.319272218 (s) : (?<GridNumber>\\d+)\\s+
3703 : failed : failed : 0.168036767 (s) : Grid Ref_\\d(?=\\sGrid_)
3704 : failed : failed : 0.171753637 (s) : ^[0-9]{2}-[0-9]{2}-[0-9]{4}$
3705 : failed : failed : 10.753294633 (s) : \\|\\/\\|\\/\\|\\/\\/\\|\\/\\/\\/\\/\\/\\/\\/\\/
3706 : failed : failed : 0.913784559 (s) : (\\\\d{1,2}),(\\\\d{1,2}),(\\\\d{1,2}),(\\\\d{1,2}),
3707 : unparsable : unparsable : 0.075226079 (s) : [0-9A-Z]{2,4}[0-9A-Z]{2,4}[0-9A-Z][0-
3708 : failed : failed : 1.248497966 (s) : \\d{2}/\\d{2}/\\d{2}
3709 : unparsable : unparsable : 0.072341758 (s) : [0-9][0-9][0-9][0-9]|[0-9][0-9][0-9][0-9][0
3710 : failed : failed : 30.317539382 (s) : [0-9]{6}-[0-9]{4}-[0-9]{4}$
3711 : failed : failed : 17.052121219 (s) : \\b [A-Z][a-zA-Z0-9-]* \\b
3712 : failed : failed : 75.83294998 (s) : <img[^>]*>
3713 : failed : failed : 0.283340294 (s) : This pattern could intercept the value of the tag title $1, in every web pages, it could be found in '$1'.
3714 : failed : failed : 0.126455511 (s) : The pattern for this regex is \"?t
3715 : failed : failed : 0.254188636 (s) : $1/4
3716 : unparsable : unparsable : 0.081475712 (s) : $(
3717 : failed : failed : 0.445014707 (s) : htt
3718 : failed : failed : 2.192280269 (s) : \\$(\\a?\\d{1,3}[a-zA-Z0-9\\-_]{1,2}\\.)+/?
3719 : failed : failed : 71.271635692 (s) : <title>(.*?)</title>
3720 : failed : failed : 0.192241793 (s) : $(\\w*)\\s+\\$1
3721 : failed : failed : 8.637898357 (s) : <h(\\d+)-[a-z]>|<h(1[3-9]|1[02]|0[1-9]|[12])[a-z]>|<\\/h(1[3-9]|1[02]|0[1-9]|[12])[a-z]>
3722 : failed : failed : 1.365723342 (s) : /(?<![\\w-])
3723 : failed : failed : 0.293833434 (s) : ^(<\\d+-\\d+\\.html>|<\\d+\\.html>)$
3724 : failed : failed : 16.382833326 (s) : <[^>]+>
3725 failed : unparsable : 0 (s) : Please check your regex.
3726 : failed : failed : 0.36138927 (s) : <h[1-9]\\/[1-9][0-9]\\/[0-9]>
3727 : failed : failed : 0.241698276 (s) : <!DOCTYPE html> <html> <head><title>
3728 : failed : failed : 0.131223931 (s) : <h1-6>\\s+
3729 : failed : failed : 57.968713429 (s) : (?<=\\<h1)(\\s*)(.*?)\\s*>
3730 : unparsable : unparsable : 0.099083194 (s) : ((?<=[<>=&>\\-+/*\\[\\]\\{\\}\\{\\}\\(\\)\\+\\*\\(\\)])|\\.|\\s|\\/|[^\\w\\s])
3731 : failed : failed : 7.987483997 (s) : r\"\\b[A-Za-z][A-Za-z0-9]{2,}-\\d{9}[A-Za-z]\\b\"
3732 : unparsable : unparsable : 0.085544592 (s) : \\bCAS\\d{1,4,6}\\b(?=CAS|
3733 : failed : failed : 16.938716666 (s) : \\b[A-Z]{1}[0-9]{1,2}[A-Z-0-9]*\\b
3734 : unparsable : unparsable : 0.094235015 (s) : \\A(C
3735 : failed : failed : 1.687475068 (s) : (?<![A-Za-z0-9])(CAS\\s+\\d{3}[A-Za-z0-9]?)
3736 : failed : failed : 0.287370371 (s) : r'^c\\d{3}-\\d{3}-\\d{4}$'
3737 : failed : failed : 0.739565295 (s) : [0-9A-Fa-f]{6}-[0-9A-Fa-f]{6}-[0-9A-Fa-f]{10}
3738 : failed : failed : 0.441791181 (s) : \\d{1,9},\\s\\d{1,10}
3739 : failed : failed : 0.188035537 (s) : ^\\d
3740 : failed : failed : 24.987273148 (s) : r\".*?([A-Za-z]\\d[A-Za-z]\\d[A-Za-z]\\d[A-Za-z]\\d[A-Za-z]\\d)*\"
3741 : unparsable : unparsable : 0.04980225 (s) : ^\\d?[ ]*[\\(\\.\\-]?(\\d{3})?[\\)\\.\\-
3742 : failed : failed : 0.1489473 (s) : ^\\d?[ ]*[-\\(\\)]?(\\d{3})[-\\(\\)]?
3743 : unparsable : unparsable : 0.102258369 (s) : ^\\d?[ ]*\\(?(\\d{4})
3744 : unparsable : unparsable : 0.064304537 (s) : ^\\s?\\d{1,3}[ ]?(\\(\\d{3}\\)\\s)?(\\
3745 : unparsable : unparsable : 0.085126879 (s) : ^(\\d)?[ ]*([-\\(\\.\\-]\\d{3}\\)?[ ]*([
3746 : unparsable : unparsable : 0.05466685 (s) : ^(\\d[ -]?\\d) {3}([ -](\\d{3})){4
3747 : unparsable : unparsable : 0.05795158 (s) : ^(\\d)?[ ]+(\\d{3}[ ]+)?(\\d{3}[ ]+
3748 : unparsable : unparsable : 0.093038564 (s) : ^\\+?((\\d?[ ]*)?[(.\\-]?(\\d{3})?
3749 : unparsable : unparsable : 0.062806311 (s) : ^\\d+[\\ ]*\\(\\d{3}\\)[ \\-\\.]?\\d{
3750 : unparsable : unparsable : 0.103777424 (s) : ^\\d[ ]*[\\(\\.\\-](\\d{3})([\\)]\\.\\-](
3751 : failed : failed : 2.994460437 (s) : img.(jpg|gif|png)$
3752 : failed : failed : 0.652853649 (s) : \"^[a-zA-Z0-9\\._-]+$\"
3753 : unparsable : unparsable : 0.090234143 (s) : `^[a-zA-Z0-9-_.
3754 : failed : failed : 0.530985707 (s) : r'^[a-zA-Z0-9_]+\\.(jpg|gif|png)$'
3755 failed : unparsable : 0 (s) : Please check your regex.
3756 : failed : failed : 3.935167692 (s) : ^[a-zA-Z0-9_\\-\\.]+\\.(jpg|gif|png)$
3757 : failed : pumping failed : 22.897479286 (s) : [^.]*\\.jpg|[^.]*\\.gif|[^.]*\\.png
3758 : failed : failed : 97.73982845 (s) : r\".*(jpg|gif|png)\"
3759 : failed : failed : 6.515319262 (s) : r'\\.jpg|\\.gif|\\.png$', where.jpg,.gif, and.png are the three recognized image formats.
3760 failed : unparsable : 0 (s) : Please check your regex.
3761 : failed : error init : 0.1487071 (s) : (?<!\\d)
3762 : failed : failed : 2.374879636 (s) : \\-?([1-9][0-9]{3})(,)?
3763 : failed : failed : 0.186373664 (s) : ^-?\\d{1,3}\\.\\d{1,3}$
3764 : failed : failed : 0.227930183 (s) : ^[+-]?((\\d{1,3})[,\\s\\.]?)(\\d{3})\\b
3765 : failed : failed : 5.103884529 (s) : \\d+
3766 : failed : failed : 0.723997142 (s) : \\d+
3767 : unparsable : unparsable : 0.084089937 (s) : /^(?<sign>-|\\+)([0-9]{0,3}
3768 : failed : failed : 0.131716984 (s) : ^0?-?0{3,}$
3769 : failed : failed : 0.834966534 (s) : \\d+,([1-9]\\d{3}|[1-9]\\d{2})
3770 : unparsable : unparsable : 0.089092966 (s) : '((-?\\d
3771 : failed : failed : 2.695561196 (s) : \\d,?.|\\d,?\\d,?|\\d,?\\d,?|\\d,?\\d,?|\\d,?\\d,?|\\d,?\\d,?|\\d,?\\d,?|\\d,?\\d,?|\\d,
3772 : failed : pumping failed : 264.592068599 (s) : ([0-9.,]+,[0-9.]+)
3773 : unparsable : unparsable : 0.051173628 (s) : (\\\\d+
3774 : failed : failed : 142.817693092 (s) : 0|1|2|3|4|5|6|7|8|9|0.0|1.0|2.0|3.0|4.0|5.0|6.0|7.0|8.0|9.0
3775 failed : unparsable : 0 (s) : Please check your regex.
3776 : failed : pumping failed : 172.186741048 (s) : [0-9]*\\.0[0-9]*[,][0-9]*\\.0[0-9]*[.]0[0-9]*
3777 : failed : failed : 1.37092859 (s) : \\d\\.\\d\\.\\d\\s,\\s\\d\\.\\d\\.\\d\\
3778 : failed : failed : 2.503220097 (s) : ^0|1-9|0.0|2.0
3779 : unparsable : unparsable : 0.072208919 (s) : (^[0-9]*.[0-9]+(,[0-9]*)*[0-9]\\.?[0-9]*$
3780 : failed : failed : 0.279554115 (s) : r'^[0-9.-]+(,[0-9.-]+)*$'
3781 : failed : failed : 0.246927889 (s) : ^[a-zA-z0-9 -.]{25}$
3782 : failed : failed : 2.797213771 (s) : [a-zA-Z0-9]*
3783 : failed : failed : 0.175047445 (s) : [a-zA-Z0-9 -_]
3784 : failed : failed : 7.592378189 (s) : [0-9a-zA-Z][0-9a-zA-Z0-9_]*
3785 : failed : failed : 1.320542617 (s) : `[a-zA-Z\\d -]`
3786 : failed : failed : 1.018170733 (s) : r'^[\\w ]+$'
3787 : failed : failed : 0.666011267 (s) : ^[a-zA-Z0-9 ]*$
3788 : unparsable : unparsable : 0.06246367 (s) : (?i)(?!^)((?!.)
3789 : failed : failed : 5.032014324 (s) : ^[a-zA-Z0-9 -]*$
3790 : failed : failed : 0.248165136 (s) : [a-zA-Z0-9']+
3791 : failed : failed : 0.23197597 (s) : ^[0-9]{1,3}(,\\d{3})*(\\.\\d{2})?$
3792 : failed : failed : 0.151689765 (s) : ^(?!\\$|0\\.)
3793 : failed : failed : 0.305557359 (s) : ^0([0-9]{0,2}[,.])?([0-9]{1,2}[,.])?([0-9]{1,2}[,.])?([0-9]{1,2})$
3794 : failed : failed : 0.137520973 (s) : ^\\$[0-9][\\.,\\d]{0,2}$
3795 : failed : failed : 0.490222333 (s) : [1-9][0-9]{0,3}[0-9]+
3796 : unparsable : unparsable : 0.080200284 (s) : [0-9]{1}(,[0-9]{2})?(,[0-9]{3})?(,[0-9]{4})?(,[0-9]{5})?(,[0-9]{6})?(,[0-9]{
3797 : failed : failed : 0.713553555 (s) : \\$[,0-9]{1,8}(\\.\\d{0,2})?$
3798 : failed : failed : 0.540065761 (s) : \\$[0-9]{1,7}(,?\\d{3})?(\\.\\d{2})?(,?\\d{2})?
3799 : failed : failed : 1.307710688 (s) : (0|[1-9][0-9]*(,[0-9]{0,2})?(E[+-]?[0-9]{1,2})?)
3800 : failed : error init : 0.11732842 (s) : ^
3801 : failed : failed : 0.136907945 (s) : ^\\d{3}[ -]?\\d{3}[ -]?\\d{4}$
3802 : failed : failed : 0.109166967 (s) : ^[0-9][ -]?[0-9][ 0-9]{3}$
3803 : failed : failed : 0.186236057 (s) : ^(?=\\d{5}-)?(\\d{3})?-?\\d{4}-?$
3804 : unparsable : unparsable : 0.093255641 (s) : ^\\\\(([0-9]{3} | [0-1]?[0-9][0-9]?)\\\\)-(([0-9]{3,4} | [0-1]?[0-9][0-9]?)\\\\) (\\\\d{3}[-.]?\\\\d
3805 : failed : failed : 139.863263275 (s) : ([^\\( ]|^[^\\s]|[^\\s0-9] ){3,9} \\d\\d$
3806 : failed : failed : 0.146326562 (s) : var numRegEx = \"^(?=(\\\\d{3})\\\\1\\\\1\\\\1$)\\\\b[\\\\w-]{2}\\\\d[\\\\w-]{1}\\\\d(?=\\\\d{3})\\\\b$\";
3807 : unparsable : unparsable : 0.061244397 (s) : (^
3808 : unparsable : unparsable : 0.070903284 (s) : (?(\\d{3}-)?\\d{3}-)?\\d{4}
3809 : unparsable : unparsable : 0.06343031 (s) : \\b(00[1-9]|[1-9]\\d|1[0-9]{2}|2[0-4]\\d|25[0-5])\\s*\\((00[1-9]|[1-9]\\d|1[0-9]{2
3810 : failed : failed : 17.725075768 (s) : ([\\d\\D]|^)??[\\w\\D]{4}
3811 : failed : failed : 2.707208216 (s) : \\b
3812 : failed : error init : 0.103827819 (s) : (?<![\\s])|(?<=[\\s])(?![\\d.])
3813 : failed : pumping failed : 113.142803057 (s) : [a-zA-Z]+[0-9]{1,2}[a-zA-Z]{1,2}[a-zA-Z0-9]
3814 : failed : failed : 0.41042831 (s) : \\d{4}-\\d{2}-\\d{2}-\\d{2}-\\d{1}
3815 : failed : failed : 0.213029381 (s) : (yyy)(\\d{2})(\\d{2})(\\d{2}\\.)(\\d{3})
3816 : failed : failed : 0.197264188 (s) : \"yyyy-mm-dd.nn\"
3817 : unparsable : unparsable : 0.087639204 (s) : (?<!\\d{4})-(?P<day>\\d{2})(?P<month>\\d{2})(?P<year>\\d{4})\\.(?P<num>\\d{3})
3818 : failed : failed : 0.456218628 (s) : (yyyy).(mm).(dd).(nn)
3819 : unparsable : unparsable : 0.090668647 (s) : \"(?P<yyyy>\\d{4})(?P<mm>\\d{2})(?P<dd>\\d{2})(?P<nn>\\d{1})\"
3820 : failed : failed : 1.495830742 (s) : [0-9]{4}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{1}
3821 : failed : failed : 0.127802364 (s) : ^[0-9]+[,.]?[0-9]{1,2}
3822 : failed : failed : 1.088842234 (s) : [0-9]{3,6}(,[0-9]{2})?|\\$[0-9]+(\\.\\d{1,2})?
3823 : failed : failed : 0.171934916 (s) : (.+?)
3824 : unparsable : unparsable : 0.070912882 (s) : (.{1,2})(
3825 : failed : failed : 0.561020952 (s) : ^\\d{1,3}[\\.,]\\d*[\\.,]\\d*[\\.,]\\d*
3826 : failed : failed : 0.162093598 (s) : ^\\d{0,3}\\.\\d{0,5}$
3827 : failed : failed : 2.160016622 (s) : (?<![\\d.])(?<![^\\d.,])(?![^\\d.,])(?![^,$])\\s?\\$?(?<![.,])(?![^,])\\s?
3828 : unparsable : unparsable : 0.094196292 (s) : (?<P>[^,\\$\\s]+
3829 : failed : failed : 0.781709124 (s) : r\"^\\$\\d+
3830 : failed : failed : 0.720529969 (s) : ^[-0-9]+
3831 : failed : failed : 1.066897399 (s) : DD[0-9]{4}-[0-9]{2}[0-9]{2}-\\d{4}
3832 : failed : failed : 0.127418565 (s) : ^[0-9]{5}-[0-9]{4}-[0-9]{2}$
3833 : failed : failed : 0.564213971 (s) : ^\\d{2}[- ]\\d{8}$
3834 : failed : failed : 0.634906911 (s) : ^\\d{2}[-\\s]\\d{4}$
3835 : failed : failed : 0.220310384 (s) : ^[0-9]{2}\\-[0-9]{4}\\-[0-9]{2}$.
3836 : failed : failed : 27.618630496 (s) : [0-9]{2}[0-9]{3}-[0-9]{4}
3837 : failed : pumping failed : 24.972385981 (s) : (?=.*[D])(?=.*[M])(?=.*[Y])
3838 : unparsable : unparsable : 0.094475185 (s) : (?<year>\\d{2})-(?<month>\\d{2})-(?<day>\\d{4})-(?<-date>\\w+)
3839 : failed : failed : 0.70653939 (s) : \\d{2}-[0-9\\d]{4}-\\d{3}\\d{2}\\d{1}
3840 : failed : failed : 2.079134051 (s) : (regex) /-?[0-9]{2}
3841 : failed : failed : 0.351380147 (s) : Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the \"days part\" of a class schedule field. The string should only accept any of the ff set of lette
3842 : failed : failed : 0.304629952 (s) : Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the \"days part\" of a class schedule field. The string should only accept any of the ff set of lette
3843 : failed : failed : 0.41164009 (s) : Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the \"days part\" of a class schedule field. The string should only accept any of the ff set of lette
3844 : failed : failed : 0.418026238 (s) : Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the \"days part\" of a class schedule field. The string should only accept any of the ff set of lette
3845 : failed : failed : 0.371714916 (s) : Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the \"days part\" of a class schedule field. The string should only accept any of the ff set of lette
3846 : failed : failed : 0.393194559 (s) : Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the \"days part\" of a class schedule field. The string should only accept any of the ff set of lette
3847 : failed : failed : 0.366735732 (s) : Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the \"days part\" of a class schedule field. The string should only accept any of the ff set of lette
3848 : failed : failed : 0.397311859 (s) : Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the \"days part\" of a class schedule field. The string should only accept any of the ff set of lette
3849 : failed : failed : 0.395462676 (s) : Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the \"days part\" of a class schedule field. The string should only accept any of the ff set of lette
3850 : failed : failed : 0.367793532 (s) : Matches a string if it is valid in the form of MWF or TTHS. Maybe used for validating the \"days part\" of a class schedule field. The string should only accept any of the ff set of lette
3851 : unparsable : unparsable : 0.069916807 (s) : ^([0-1][0-9
3852 : unparsable : unparsable : 0.102134999 (s) : \"^((0[1-9]|1[0-2
3853 : failed : error init : 0.090436462 (s) : ^
3854 : failed : failed : 1.192067283 (s) : \\b(\\d{2}|3[0-1]\\d|2[0-3]\\d)\\s(am|pm)\\b
3855 : unparsable : unparsable : 0.067455507 (s) : (ex) r'(^|[^\\d ])([\\d]{2
3856 : unparsable : unparsable : 0.054150693 (s) : ^([1-9][0-9]|1[0-2]
3857 : unparsable : unparsable : 0.06108608 (s) : \"^[01][0-9]{
3858 : unparsable : unparsable : 0.099793584 (s) : \"([01]\\d|2[0-3
3859 : unparsable : unparsable : 0.070885851 (s) : ^(0[1-9]|1[012])?[0-9]{
3860 : unparsable : unparsable : 0.059213344 (s) : ^[01]?[0-9]|2[0-
3861 : failed : failed : 0.591925664 (s) : ^(\\+|\\-)?\\d+(\\.\\d+)?$
3862 failed : unparsable : 0 (s) : Please check your regex.
3863 : failed : pumping failed : 187.682011311 (s) : [0-9]+\\.\\d*
3864 : failed : failed : 1.685683933 (s) : %#V.?[0-9]+
3865 : unparsable : unparsable : 0.072239857 (s) : ?
3866 : failed : failed : 0.293203866 (s) : r'^[-+]?(\\d+\\.\\d*|\\.\\d+)(e[+-]?\\d+)$'
3867 : failed : failed : 0.193267223 (s) : ^\\d+(\\.\\d+)?$
3868 : failed : failed : 31.359059619 (s) : [-+]?\\d*\\.\\d+|[-+]?\\d+
3869 : unparsable : unparsable : 0.084708015 (s) : (?<!\\d)(?<!%))
3870 failed : unparsable : 0 (s) : Please check your regex.
3871 : failed : failed : 3.359325586 (s) : [A-Z]\\s[A-Z][A-Z][A-Z]\\s[A-Z]
3872 : failed : failed : 0.122133788 (s) : ^[a-z]{2}$
3873 : unparsable : unparsable : 0.085535754 (s) : (htt
3874 : failed : failed : 0.154608 (s) : ^[A-Z][a-z]{2}[0-9]{3}$
3875 : unparsable : unparsable : 0.065379099 (s) : r\"^[A-Z]{2}([a-z]+){,2}$\"
3876 : unparsable : unparsable : 0.070812013 (s) : /^(A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[a-z]{1,2})( [a-z]{3})*$/i.(That is an exact regex in javascript.  As I mentioned above, I don't know how to
3877 : failed : failed : 9.809749144 (s) : [A-Z][-A-Z][A-Z] Explanati
3878 : failed : error init : 0.100885749 (s) : (?i)
3879 : failed : failed : 0.602917988 (s) : [A-Z]{2}[a-z]?
3880 : unparsable : unparsable : 0.082055728 (s) : (?<=^[A-Z]{2,4}\\s+(\\w+))\\s+[A-Z]+
3881 : failed : failed : 1.050288587 (s) : \\b(2[7-9]|[1-9]\\d|[1-9]\\d\\d|[1-9]\\d\\d\\b)
3882 : failed : failed : 0.83969025 (s) : (?i)\\b\\w{2}\\d{1,2}\\d{1,2}\\s?\\d{4}\\b
3883 : failed : failed : 0.277780955 (s) : ^(0[1-9]|1[012])\\/(1[3-9]|[12][0-9]|3[01])\\/(19[2-9]|2[02])$
3884 : failed : failed : 0.149203099 (s) : ^[0-9]{2}[0-9]{2}/[0-9]{4}
3885 : unparsable : unparsable : 0.072565176 (s) : public static String getRegExp(String description, String pattern)    {        Pattern pattern = Pattern.compile(\"^\"+pattern+\"$\");        return pattern;    }
3886 : failed : failed : 0.419809118 (s) : (\\d{1,2}\\d{2})/(\\d{2})/(\\d{4})
3887 : unparsable : unparsable : 0.071601412 (s) : ^(01
3888 : unparsable : unparsable : 0.091284871 (s) : \\b(0\\d{1,2}|1\\d{2}|1\\d\\d)(0?[1-9]\\d|1
3889 : failed : failed : 0.920469297 (s) : \\b
3890 : failed : failed : 0.59329026 (s) : ^(0?[1-9]|1[012])(/0?[1-9]|[12][0-9]|3[01])(/0?[1-9]|[12][0-9]|3[01])([/0?1-9]|0)$
3891 : failed : failed : 0.773769496 (s) : \\d{4}-\\d{2}-\\d{2}-\\d{2}
3892 : failed : failed : 1.081792242 (s) : 00[123][0-9]{3}-X
3893 : unparsable : unparsable : 0.076195755 (s) : [00-(9)[0-9]][0-9]{3}-X
3894 : failed : failed : 0.601428289 (s) : ^[\\dX]{4}$
3895 : failed : failed : 15.924459241 (s) : (?i)(\\d[\\d.]+-)([\\d]+)
3896 : failed : failed : 5.848016305 (s) : .0 [0-9]{0,9}
3897 : failed : failed : 70.926031631 (s) : var rut=new RegExp(\".*-X.*\", \"g\");
3898 : failed : failed : 0.615063913 (s) : ^[0]{0,3}\\.[0-9]{8}$
3899 : failed : failed : 0.561422594 (s) : (00-\\d{4})(\\-)(\\d+)000
3900 : failed : failed : 0.660531997 (s) : \\d{3}-\\d{2}-\\d{4}
3901 : failed : failed : 0.626161314 (s) : [A]t[e] (Istat Ateco [CODE] [CODE])Pattern =?
3902 : failed : failed : 11.508447026 (s) : \\b[A-Z][a-z]+\\b
3903 : failed : failed : 55.620529594 (s) : [0-9]{6,12}/[0-9]{2}
3904 : unparsable : unparsable : 0.061140502 (s) : (?=\\d{2}\\s*[Ee][Ee][Ii][Ii][Aa][Aa][Aa][Aa][Aa]\\s*[Ee][Ee][I][I][A][A][A][A][A][a]{2} (?=\\d{2}\\s*[Aa][Aa][Aa][
3905 : failed : failed : 1.938657743 (s) : [R]\\d+[A-Z]\\d*[B-Z]\\d*
3906 : failed : failed : 5.864809462 (s) : [0-9a-zA-Z][0-9a-zA-Z0-9\\-_]*
3907 : failed : failed : 6.803714923 (s) : (?<=stat)\\d{2}(?=Ateco|Stat)\\d{2}(?=\\d|Stat)
3908 : failed : pumping failed : 37.171295521 (s) : (?<!\\d)(?i)(?<=^.*\\d)(?=\\d\\s)
3909 : unparsable : unparsable : 0.094567127 (s) : (?P<code>^
3910 : failed : pumping failed : 30.098287589 (s) : ^.*?(?!.*\\.)(.*)(\\.)(.*$)
3911 : failed : failed : 0.640589633 (s) : [RegEx]
3912 failed : unparsable : 0 (s) : Please check your regex.
3913 : failed : failed : 0.669593966 (s) : [INSERT REGEX PATTERN FOR GENERATING REGEX FOR THIS EXAMPLE]
3914 : failed : failed : 0.357725198 (s) : \\d{12}-\\d{6}-\\d{4}-\\d{4}-\\d{4}
3915 : failed : failed : 0.684316937 (s) : \\b([0-9]{14})\\b
3916 : failed : failed : 0.138131826 (s) : [Provide a RegEx]
3917 : failed : failed : 0.538396916 (s) : \\d{3}-\\d{3}-\\d{4}
3918 : failed : failed : 0.287177751 (s) : The banks in Italy use the pattern [A-Z]{2}-?[A-Z]{2}-?[A-Z]{4}-?[0-9]{9}
3919 : failed : failed : 0.229440372 (s) : .?_?(([0-9]{3})\\.[0-9]{3})\\.[0-9]{4}_?\\?[0-9]{3}([0-9]{1,3})Note that this is not the fastest solution, but it's simple and easy to understand.
3920 : failed : failed : 0.857431332 (s) : [Sample Answer]  ``` Reg
3921 : unparsable : unparsable : 0.081813875 (s) : ^(?!.*[0-9]{4})(?!.*[0-9]{4}.*[0-9]{4}.*[0-9]{4})(?!.*[0-9]{4}.*[0-9]{4}.*[0-9]{4}|
3922 : unparsable : unparsable : 0.078533413 (s) : ^\\d{4}(?=\\d{3}
3923 : failed : failed : 0.178389283 (s) : ^([0-9]{4}|[0-9]{5}|[0-9]{6}|[0-9]{6}[0-9]{3})$
3924 : unparsable : unparsable : 0.081714419 (s) : ^(?=^.{8,20}$)(?=^\\d{4}$)(?=^[\\d]{3}$)^(?=.*[\\d])^(?=.*[\
3925 : failed : failed : 0.14734563 (s) : ^\\s*
3926 : failed : failed : 1.574458773 (s) : (?<code>[0-9]{13}|[0-9]{16})(?<ref>[A-Za-z0-9-]{3})*
3927 : failed : failed : 0.131777928 (s) : RegEx = \"^\\d{3}
3928 : unparsable : unparsable : 0.067565083 (s) : (\\d{4}[\\s\\S]*)(\\s\\d{4}[\\s\\S]*)(\\s\\d{4}[\\s\\S]*)(\\s\\d{4}[\\s\\S]*)(\\s\\d{4}[\\s\\S]
3929 : failed : failed : 0.664479709 (s) : ^4[0-9]{12}$|^4[0-9]{13}$|^49$
3930 : failed : failed : 1.690661825 (s) : ([\\d]{4}[A-Z]\\d{3}|\\d{5}[A-Z]\\d{4})$
3931 : unparsable : unparsable : 0.074070575 (s) : (?i)(?<![A-Za-z0-9])[A-Za-z0-9]*(?<![A-Za-z0-9][A-Za-z0-9
3932 : failed : pumping failed : 7.253202517 (s) : ^[a-z]{3,}[a-z]{3,}[a-z]{3,}$
3933 : failed : error init : 0.138414756 (s) : ^
3934 : failed : failed : 0.128392509 (s) : \\w\\d\\d\\d\\d
3935 : unparsable : unparsable : 0.070600056 (s) : ([M+[S+][T+][*][D+][V+][*][M+][S+][T+][*][D+][V+][*][M+][S+][T+][*][D+][V+
3936 : unparsable : unparsable : 0.073623107 (s) : /^(?=.{16})(?=.{10})(?=.{8})[-a-z0-9A-Z]{4}[-a-z0-9A-Z]{4}[-
3937 : unparsable : unparsable : 0.062152908 (s) : ^(?=.*[(])(?=.*[)])(?=.*[{])(?=.*[}]))(?=.*[()?!])$
3938 : unparsable : unparsable : 0.083737638 (s) : ([1-9][0-9]?|1[012])[(/]([1-9][0-9]?|[1-9][0-9]?|0)?)[-/]([1-9][0
3939 : unparsable : unparsable : 0.059494871 (s) : var regEx = /^(Solo|Switch|Maestro)\\/([4-9]|10)([0-9]|[1-2])([0-9]|[1-3])([0-9]|
3940 : unparsable : unparsable : 0.089788759 (s) : (?=^[A-z0-9]{3,}$)(?=^[0-9]{5,}$)(?=^[A-z0-9]{3,}$)(?=^\\d
3941 failed : unparsable : 0 (s) : Please check your regex.
3942 : failed : failed : 0.537747059 (s) : ^[2-9]\\d\\d-\\d\\d-\\d\\d-\\d\\d\\d\\d[0-9]\\d$|^\\d{9,}\\d[0-9]$|^978[0-9]\\d{4}$
3943 : failed : failed : 51.49095809 (s) : ([0-9]{4})-
3944 : failed : failed : 0.163119007 (s) : ^(978\\\\d{3}|979\\\\d{3}|978\\\\d{3}-(\\\\d{4})\\\\d{4})$
3945 : unparsable : unparsable : 0.051629983 (s) : [0-9]{3,20}[- ]?[0-9]{3,20}[- ][0-9]{3,20}[- ][0-9]{3,20}[- ][0-9]{3,20}[- ]?[0-9]{3,20}[- ][0-9]{3,20}[- ][0-9
3946 : failed : failed : 1.699161301 (s) : \\b
3947 failed : unparsable : 0 (s) : Please check your regex.
3948 failed : unparsable : 0 (s) : Please check your regex.
3949 : failed : failed : 5.057713238 (s) : (\\d\\d\\d\\d|3[78])[89]\\d{9}
3950 : failed : failed : 0.405348338 (s) : ISBN \\d{3}
3951 : failed : failed : 0.146356017 (s) : ^[^a-zA-Z0-9 ]*$
3952 : failed : failed : 0.140875024 (s) : ^[A-Za-z0-9]$
3953 : failed : failed : 1.01670041 (s) : [A-Za-z0-9]{7,20}
3954 : failed : failed : 0.390367424 (s) : ^[a-zA-Z0-9[-._a-zA-Z0-9]]*$
3955 : failed : failed : 1.558794268 (s) : [a-z_0-9]{5,}
3956 : failed : failed : 4.650289203 (s) : [a-zA-z0-9]+
3957 : failed : failed : 8.216073435 (s) : ^[a-zA-Z0-9][a-zA-Z0-9-]*$Examp
3958 : failed : failed : 0.617465841 (s) : [a-zA-Z0-9](?=[a-zA-Z0-9])
3959 : failed : failed : 5.743809968 (s) : ^[A-Za-z0-9]*\\s[A-Za-z0-9]*$
3960 : failed : failed : 0.743815023 (s) : (\\W+)
3961 : failed : failed : 0.840548136 (s) : To generate this regex pattern, you first need to know the format of an IPv4 address. An IPv4 address has 4 bytes separated by periods. It can be one of these forma
3962 : failed : failed : 1.545544056 (s) : (?i)(^[0-9]{1,3}\\.){3}[0-9]{1,3}$
3963 : failed : failed : 1.86534649 (s) : (privateIP)^(?=(.{1,4}\\\\.){3}\\\\.){1,3}$
3964 : failed : failed : 0.207145702 (s) : (?i)^(([1-9])?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])
3965 : unparsable : unparsable : 0.073502281 (s) : [0-9]*\\.[0-9]{1,3}\\.[0-9]{1,3}.[0-9]{1,3}.[0-9
3966 : unparsable : unparsable : 0.082169882 (s) : import redef reg_ex(strin
3967 : unparsable : unparsable : 0.066268775 (s) : ^(?!^
3968 : failed : failed : 0.141228976 (s) : import re
3969 : unparsable : unparsable : 0.060647379 (s) : ^((169[0-9]|1[0-9]2|2[0-4][0-9]|25[0-5])[.](169[
3970 : unparsable : unparsable : 0.060027739 (s) : \"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(
3971 : unparsable : unparsable : 0.07300528 (s) : [
3972 failed : unparsable : 0 (s) : Please check your regex.
3973 : failed : error init : 0.140403611 (s) : ^
3974 : failed : failed : 3.871032452 (s) : A
3975 : failed : error init : 0.13170371 (s) : ^
3976 failed : unparsable : 0 (s) : Please check your regex.
3977 : unparsable : unparsable : 0.081724117 (s) : [
3978 : failed : error init : 0.095236501 (s) : ^
3979 : failed : failed : 2.94142902 (s) : /
3980 : failed : failed : 1.990518799 (s) : \\
3981 : failed : failed : 1.168596862 (s) : A1[A-Z]1[A-Z]
3982 : failed : failed : 6.122857434 (s) : a1|a11|a1a|aa1|a11a|a1a1|a1a11|a1a1a
3983 : failed : failed : 1.442622746 (s) : \\b\\d{1,5} [A-Z]{1}\\d{1,5}[A-Z]{1} \\
3984 : failed : failed : 0.998648055 (s) : A1[1-9][1-9] A[1-9][1-9] A1[1-9][1-9]
3985 : failed : failed : 1.426610651 (s) : /^
3986 : unparsable : unparsable : 0.090316958 (s) : (?<=^|\\s)([^ ]*)(?=
3987 : unparsable : unparsable : 0.080643203 (s) : (^[0-9]{1,2}\\s?[A-Z]{1,2}\\s?[A-Z
3988 : unparsable : unparsable : 0.066958267 (s) : A1(0|1)A1(0|1)A1(0|1)A1(0|1)A1(0
3989 : unparsable : unparsable : 0.059959881 (s) : (htt
3990 failed : unparsable : 0 (s) : Please check your regex.
3991 : unparsable : unparsable : 0.079636408 (s) : (?P<world>\\w\\w\\w\\w)\\s
3992 : failed : failed : 15.790919644 (s) : [0-9]{1,3}[a-zA-Z]{1,3}[a-zA-Z]{1}[a-zA-Z]{3,6}
3993 : failed : failed : 0.387655456 (s) : \\b\\d{3}\\-\\d{2}\\-\\d{2}\\b
3994 : failed : failed : 0.131746269 (s) : RegEx = ^[A-Z][A-Z][A-Z]\\s*\\d{2}[\\-\\s]?\\d{3}[\\-\\s]?$
3995 : unparsable : unparsable : 0.077968173 (s) : (r'^
3996 : failed : pumping failed : 14.729414051 (s) : ^\\s*(.*)\\s*-\\s*/\\s*(.*)\\s*$
3997 : failed : failed : 18.15455289 (s) : ([0-9]{1,3}\\-[0-9]{1,3}\\-[0-9]{1,3}[A-Za-z]{3})
3998 : failed : failed : 60.233516104 (s) : (^[0-9]{5}, [0-9]{3}$)|([0-9]{5}, [0-9]{7})
3999 : failed : failed : 0.299473136 (s) : ^[^A-Za-z0-9_]*$
4000 : failed : failed : 0.598777205 (s) : (\\d{3})\\D(\\d{2})\\D(\\d{4})
4001 : unparsable : unparsable : 0.098043517 (s) : [0-1]?[0-9][0-
4002 : failed : failed : 6.66477866 (s) : (?<!\\d)(?<![a-zA-Z])\\d{1,3}(?![a-zA-Z])
4003 : unparsable : unparsable : 0.064510273 (s) : ^(([\\d]{1,2}|[1-3][0-9]
4004 : failed : failed : 0.409187447 (s) : import re regex = re.compile(r'(?<=^|\\s)\\\\*\\d{1,3}\\\\(\\s|$)')
4005 failed : unparsable : 0 (s) : Please check your regex.
4006 : unparsable : unparsable : 0.100380003 (s) : (^
4007 : failed : failed : 0.512784013 (s) : re.compile('^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])$', re.I)
4008 : failed : failed : 0.137903419 (s) : import re
4009 : failed : failed : 2.261295657 (s) : \\d{1,2}\\s+[^\\d\\s]\\s+\\d{1,2}
4010 : failed : failed : 0.557592792 (s) : (1\\d{2}[-/](1\\d{2})[-/](1\\d{4}))
4011 failed : unparsable : 0 (s) : Please check your regex.
4012 : failed : failed : 0.140518697 (s) : ^        [0-9]{1,2}        $
4013 : unparsable : unparsable : 0.075278988 (s) : ^[0-9]{4}((-?[1-9]
4014 : failed : failed : 0.251195841 (s) : // This regular expression will validate most (current & future) date // options.
4015 : unparsable : unparsable : 0.068620349 (s) : \\d{1,2}\\d{3}/\\d{1,2
4016 : unparsable : unparsable : 0.069057728 (s) : /^(?=.*[0123456789])[1-
4017 : unparsable : unparsable : 0.072146051 (s) : (0?[1-9]|[12][0-9]
4018 : failed : failed : 30.891664542 (s) : (?<year>[0-9]{1,3})\\s*
4019 : failed : failed : 0.808421395 (s) : /^(20\\d{4}|19)\\d{1,2}
4020 : unparsable : unparsable : 0.071642078 (s) : ^((0[1-9]|[12][0-9]|
4021 : failed : failed : 0.953701488 (s) : 0-9+0-9+0-9*
4022 : failed : failed : 0.211732783 (s) : [0-9, *, 0-9, *, 0-9, *, 0-9]
4023 : failed : failed : 1.236326213 (s) : [a-zA-Z0-9]+
4024 failed : unparsable : 0 (s) : Please check your regex.
4025 : failed : failed : 0.486831153 (s) : [0-9]{2,}
4026 : failed : failed : 0.436018661 (s) : [0-9]{1,}
4027 : failed : failed : 0.184702064 (s) : (^[\\*\\d]*)([\\*\\d]*)+
4028 : failed : error init : 0.089788529 (s) : ^
4029 : unparsable : unparsable : 0.057564806 (s) : (10|100|1000|10^3|10^4|*1)+
4030 : failed : failed : 1.13210061 (s) : [a-zA-Z0-9\\*\\*\\*\\*]
4031 : failed : failed : 0.162573968 (s) : ^\\d+
4032 : failed : failed : 0.213258229 (s) : ^\\d+(\\.\\d{2})?$
4033 : failed : failed : 0.952797916 (s) : ([0-9]+(\\.[0-9]+)?)
4034 : failed : failed : 11.481778787 (s) : \\\\d+ \\\\d{0,2}|\\\\d{1,2}%'
4035 : failed : failed : 0.617348561 (s) : 0.00xExplanati
4036 : failed : failed : 1.06804541 (s) : (\\d+)%
4037 : failed : failed : 0.702846865 (s) : \\b[0-9]\\d{1,2}\\.[0-9]{2}\\b
4038 : failed : failed : 3.138355075 (s) : ^\\d+\\.\\d{2}$
4039 : failed : failed : 11.163200075 (s) : \\d+(\\.\\d{2})?$
4040 : failed : failed : 0.212879209 (s) : ^\\d+\\.\\d{2,}$
4041 : failed : failed : 0.207528088 (s) : (^[0-9]{2}/[0-9]{2}/[0-9]{4}$)
4042 : failed : pumping failed : 13.609629765 (s) : (^|[^/]*)(0?[1-9]|1[012])(/|$)
4043 : failed : failed : 1.293412042 (s) : \\d{1,2}/\\d{2}/\\d{4}
4044 : unparsable : unparsable : 0.079044759 (s) : (?(?=\\s)
4045 : failed : failed : 28.612974061 (s) : [0-9]{4}/[1-9]/[1-9][0-9]
4046 : failed : failed : 0.201561455 (s) : ^(0|[1-9])/(0|[1-9])/([0-9]{4}$)
4047 : failed : failed : 0.674427949 (s) : (MM/DD/YYYY)
4048 : failed : failed : 0.81584147 (s) : ^(10|1[6-9])
4049 : failed : failed : 0.20062409 (s) : ^([0-1][0-9]|2[0-9])(/([0-1][0-9]|2[0-9]))?$
4050 : failed : failed : 0.62487194 (s) : (\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})
4051 : failed : failed : 0.62293911 (s) : \\d{4}-\\d{2}-\\d{2}
4052 : unparsable : unparsable : 0.098009634 (s) : (?P<yyyy>\\d{4}-\\d{2}-\\d{2})
4053 : failed : failed : 0.20991053 (s) : ^(19|20)[0-9]{2}\\-(0[1-9])?[0-9]{2}\\-(0[1-9])?[0-9]{2}$
4054 : unparsable : unparsable : 0.086296129 (s) : ^(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})$
4055 : failed : failed : 0.168230109 (s) : ^\\d{4}-\\d{2}-\\d{2}$
4056 : failed : failed : 0.189793578 (s) : ^\\d{4}-\\d{2}-\\d{2}$
4057 : failed : failed : 9.106563113 (s) : [0-9][0-9]-[0-9][0-9]-[0-9][0-9]
4058 : unparsable : unparsable : 0.070879369 (s) : r'^(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})$'
4059 : failed : failed : 0.327677461 (s) : r'^\\d\\d\\d\\d-\\d\\d-\\d\\d$'
4060 : failed : failed : 0.642109869 (s) : ^\\d{4}-\\d{2}-\\d{2}$
4061 : unparsable : unparsable : 0.097388339 (s) : (?i)(^[1-9][0-9]|2[0-9][0-9]|3[01][0-9]|4[0-
4062 : failed : failed : 0.756466344 (s) : (?i)(\\d{1,2}\\.?\\d{4}[-]\\d{2}[-]\\d{2})
4063 failed : unparsable : 0 (s) : Please check your regex.
4064 : failed : failed : 0.946796938 (s) : /
4065 : failed : failed : 0.236220979 (s) : ^[1-9]\\d{0,3}-(\\d{4})-(\\d{2})$
4066 : failed : error init : 0.112287902 (s) : ^
4067 : failed : failed : 0.665123385 (s) : ^\\d{4}(-(\\d{2})-)?(-(\\d{2})-)?(-(\\d{4}))?$
4068 : failed : failed : 2.992465471 (s) : \\A
4069 : failed : failed : 0.208031321 (s) : (?i)^(19|20[9])[0-9]{2}\\.\\d{4}$
4070 : unparsable : unparsable : 0.086882897 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2}|[0-9]{4}-[0-9]{
4071 : failed : failed : 19.337617605 (s) : (?<![\\d])-?(?<![,\\d])[0-9.]+(?![,\\d])
4072 : failed : failed : 5.863869642 (s) : (?<![0-9])(?<![^0-9])(?<![.][0-9])(?<![-][0-9])(?![-][0-9])
4073 : failed : failed : 5.801526969 (s) : [0-9][0-9]\\.[0-9][0-9]|[0-9][0-9]\\.[0-9]|[0-9]
4074 : failed : failed : 4.382687801 (s) : r\"[1-9][0-9]*
4075 : failed : failed : 3.96962097 (s) : \\d+
4076 : failed : error init : 0.089870773 (s) : ^
4077 : failed : failed : 0.116483959 (s) : ^\\d*
4078 : failed : failed : 0.456894774 (s) : /^[-+]?
4079 failed : unparsable : 0 (s) : Please check your regex.
4080 : failed : failed : 1.147964426 (s) : \\b[0-9]+
4081 : failed : failed : 1.29874564 (s) : 1[1-9][0-9]|2[0-3][0-9]
4082 : failed : failed : 0.943654914 (s) : (1|2)\\d{3}(?!12)
4083 : failed : failed : 3.191571949 (s) : [0-9]{1,2}[1-12]
4084 : unparsable : unparsable : 0.0771652 (s) : 1(?=(\\d)\\d{1,2}
4085 failed : unparsable : 0 (s) : Please check your regex.
4086 : failed : failed : 1.327242463 (s) : [0-9]{1,2}[1-9]|[1-2]\\d|12[0-2]
4087 : failed : failed : 0.68817433 (s) : [1-12]\\d
4088 : failed : failed : 1.213139313 (s) : [0-9]{1,2}[1-9][0-9]{1,2}
4089 : failed : failed : 0.56691047 (s) : /\\b\\d{1,2}\\b
4090 : failed : failed : 0.480734266 (s) : This will match any number between 1 and 12 inclusive, with 0's in between (including the last number), but no numbers greater than 12.  (It is NOT a range of numbers.)^[1-9][0-9]*$ED
4091 : failed : failed : 0.855249376 (s) : (\\\\d{3}-\\\\d{2}-\\\\d{4})
4092 : unparsable : unparsable : 0.066200477 (s) : [^0-9]{2}([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0
4093 failed : unparsable : 0 (s) : Please check your regex.
4094 failed : unparsable : 0 (s) : Please check your regex.
4095 : failed : failed : 3.096600485 (s) : [A-Z]{2}\\d{3}[-A-Z]{2}\\d{3}[-A-Z]{2}\\d{3}[-A-Z]{2}\\d{3}
4096 : failed : failed : 0.156056212 (s) : ^([1234-5789]|[1-9]?[0-9]{1,2}|3[01])$
4097 : unparsable : unparsable : 0.075098641 (s) : ^(?P<N>\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d)?\\s(?P<FAA>[A-Za-z0-9]{3})\\s(?P<NN>\\d\\d\\d\\d\\d
4098 : failed : failed : 0.59238845 (s) : \\d{4}\\-\\d{5}
4099 : unparsable : unparsable : 0.080138227 (s) : [A-F]{4}[0-9][0-9][A-F]{2}[0-9][0-9][0-9][A-F]{2}[0-9][0-9][0-9][A-F]{2}[0-9][0-9][0
4100 : failed : failed : 0.236550907 (s) : \\baircraft_specific_nnumbers[0-9]+{1,20}_[a-zA-Z0-9]_[a-zA-Z0-9]\\b
4101 : failed : failed : 2.568770267 (s) : (?<!\\.)\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3} (?!\\.)
4102 : failed : failed : 10.409359958 (s) : [0-9]{1,3}\\.?[0-9]{1,3}\\.?[0-9]{1,3}\\.?[0-9]{1,3}
4103 : failed : failed : 0.133005778 (s) : IPv4Address/IPv4AddressPattern
4104 : failed : failed : 0.45122615 (s) : ^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$
4105 : failed : error init : 0.195796931 (s) : ^
4106 : unparsable : unparsable : 0.056806867 (s) : ipv6 = /^(([0-9A-Fa-f]{1,
4107 : failed : failed : 1.720938982 (s) : /^
4108 : failed : error init : 0.101473961 (s) : ^
4109 : failed : failed : 0.198464896 (s) : \\b(10|172)\\.(0|1|2|3)\\.(0|1|2|3)\\.(0|1|2|3)\\.(0|1|2|3)\\b
4110 : failed : failed : 2.089507967 (s) : /^
4111 : failed : failed : 1.109686416 (s) : `[0-1][0-9]{2}`
4112 : failed : failed : 0.145413412 (s) : A decimal range from 1 to 2
4113 : failed : failed : 8.720740498 (s) : \\b[a-zA-Z0-9\\s\\/\\,\\.]*(\\.\\d+)?\\b
4114 : failed : failed : 19.605822467 (s) : \"^0\\.0[0-9a-zA-Z]{1,30}(?=\\,)|0\\.0[0-9a-zA-Z]{1,30}$\"
4115 : failed : failed : 0.894374672 (s) : (\\\\d{0,2})(\\\\.\\\\d{0,2})
4116 : failed : failed : 0.460577461 (s) : ^[a-zA-Z0-9\\.,-]+(\\.[a-zA-Z0-9\\.,-]+)*$
4117 : failed : failed : 0.404819959 (s) : ^[0-9]+$
4118 : failed : failed : 0.161018184 (s) : [^\\\\d]*
4119 : failed : error init : 0.12232691 (s) : |
4120 : failed : failed : 0.167530259 (s) : .{1,5}
4121 : failed : failed : 2.691786738 (s) : 0
4122 : failed : pumping failed : 3.312687401 (s) : .{0,25}([\\s\\S]*?)([0-9]{1,2})([\\s\\S]*?)
4123 failed : unparsable : 0 (s) : Please check your regex.
4124 : failed : failed : 14.202453421 (s) : (\\d{1,2}|\\.\\d{1,2}){1,5}(%){0,6}
4125 : unparsable : unparsable : 0.07679685 (s) : ([0-9]{0,1}(?=\\.[0-9]{1,2}))|([0-9]{0,2}(?=\\.[0-9]{2}|[0-9]{4}))|([0-9]{1,3}(?=\\.[0-9]{3}))|[0-9]{0,3}(?=
4126 : failed : failed : 5.486269396 (s) : (0-9]?)([0-9]?)([0-9]?)[0-9]?%$
4127 : failed : failed : 0.982374641 (s) : (00)00 to (99)99
4128 : failed : failed : 143.445187328 (s) : [^\\d\\.]*%
4129 : unparsable : unparsable : 0.058689823 (s) : ^(?P<name>\\w+)\\((?P<time>\\d{1,2}|\\d{1,3})\\)(,\\s*$|\\s+[\\w\\s]+)$
4130 : unparsable : unparsable : 0.089209825 (s) : \"^(?P<value>\\d{1,2})(\\.\\d{1,2})(?P<scale>[0-9a-z ]+)$\"
4131 : unparsable : unparsable : 0.086805703 (s) : \\d{4}-\\d{2}-\\d{2} \\d{
4132 failed : unparsable : 0 (s) : Please check your regex.
4133 : failed : failed : 1.307630147 (s) : \\S(0)?[1-3]\\d{2}[0-9]\\s(0)?[1-9]\\d{2}[0-9]\\s(0)?[1-9]\\d{2}[0-9]
4134 : unparsable : unparsable : 0.084667158 (s) : ^\\d{4}-\\d{2}-\\d{2}\\s\\d{
4135 : unparsable : unparsable : 0.066752842 (s) : tester\\s\\d{4}\\s\\-\\d{2}\\s\\-\\d{
4136 : failed : failed : 0.588979016 (s) : \"^
4137 : unparsable : unparsable : 0.108058651 (s) : \\d{4}-\\d{2}-\\d{2} \\d{
4138 : unparsable : unparsable : 0.08047652 (s) : ^(\\d{4})-(\\d{2})-(\\d{2}) \\d{
4139 : unparsable : unparsable : 0.076628175 (s) : \\d{4}-\\d{2}-\\d{2} \\d{
4140 : unparsable : unparsable : 0.081091272 (s) : \\d\\d\\d\\d \\d\
4141 : failed : failed : 0.123756367 (s) : ^0?$
4142 : failed : error init : 0.093796554 (s) : .*?
4143 : failed : failed : 0.166962224 (s) : ^\\d+$ The above RegEx will match any positive number.
4144 : failed : failed : 70.462777151 (s) : ^[0-9]|[1-9][0-9]|0[1-9]|1[012][0-9]|100[01]|100[03]|100[05]|100[07]|100[09]|10[0-9]\\d|11[0-9]\\d|12[0-3]\\d|1
4145 : failed : failed : 1.443957806 (s) : (?<number>\\d+\\.\\d+)
4146 : failed : failed : 9.368909965 (s) : (\\d+(\\.\\d+)?)
4147 : failed : failed : 27.841392602 (s) : (?<![0-9])(0|[1-9][0-9]*)
4148 : unparsable : unparsable : 0.108122301 (s) : \\d+(\\.\\d+)?(\\/(\\d+)(\\.\\d+)?(\\/(\\d+)(\\.\\d+)?(\\/(\\d+)(\\.\\d+)?(\\/(\\d+)(\\.\\d+)?(\\/(\\d+)(\\.\\d+)?(\\/(\\d+)(\\.\\d+)?(\\/(\\d+)(\\.\\d+)?
4149 : failed : failed : 2.576566776 (s) : /^
4150 : failed : failed : 1.105451065 (s) : 0(?=\\d*)
4151 : failed : failed : 9.658328692 (s) : ^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$
4152 : failed : failed : 0.613035053 (s) : ^[a-zA-Z0-9_-]{1,30}\\.[a-zA-Z0-9_.-]+$
4153 : failed : failed : 0.157752308 (s) : # email_valid_regex = r'^[a-z0-9._-]+@[a-z]+\\.[a-z]{2,}$'
4154 : failed : failed : 0.700983336 (s) : ^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$
4155 : failed : failed : 0.516028649 (s) : ^[a-zA-Z0-9\\._]{5,25}@[a-zA-Z0-9\\._]{5,25}$
4156 : unparsable : unparsable : 0.087673999 (s) : (^[a-zA-Z0-9._-]+(\\.)[a-zA-Z0-9_-]+[a-zA-Z0-9_.-]+@[a-zA-Z0-9._-]+\\.[a
4157 : failed : failed : 26.719589476 (s) : ^[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$|^[a-zA-Z0-9]+$
4158 failed : unparsable : 0 (s) : Please check your regex.
4159 : failed : failed : 16.238649526 (s) : \\b[A-Za-z0-9._-]+@[A-Za-z0-9._-]+\\.[A-Za-z]{2,}\\b
4160 : failed : failed : 10.885821103 (s) : ^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$
4161 : failed : failed : 11.243365143 (s) : \"(.*?)\"
4162 : failed : failed : 168.035702211 (s) : ([\\'\\\"])(.*?)\\1[\\'\\\"]
4163 : failed : failed : 13.89929786 (s) : (?<=\").*?(?=\")
4164 : failed : failed : 1.283032977 (s) : [^\"]*
4165 : failed : failed : 22.591127199 (s) : (?<= \" )(.*?)(?= \" )
4166 : failed : failed : 26.171511491 (s) : r'\"([^\"]*)\"'
4167 : failed : failed : 33.094374932 (s) : `\"([^\"]*)\"`
4168 : failed : failed : 0.2746652 (s) : The answer will vary according to the chosen location.
4169 : failed : pumping failed : 14.071213831 (s) : \"([^\"]|\\\\n)+\"
4170 : failed : failed : 42.135003054 (s) : \"\\\".*?\\\"\"
4171 : failed : failed : 1.799157916 (s) : (0[1-9]|1[012])-(0[1-9]|1[012])-(0[1-9]|1[012])-(0[1-9]|1[012])
4172 : failed : failed : 2.33918286 (s) : (leap|not leap) 0?[5-9][0-9]?[0-9]?[0-9]?[0-9] (or [4-9][0-9]?) Answ
4173 failed : unparsable : 0 (s) : Please check your regex.
4174 : failed : failed : 1.385556613 (s) : \\b(0|[13579][12][048]|60|65|70|75|80|84|90|99)[1-9]\\d{0,3}\\b
4175 : failed : failed : 0.897777605 (s) : [1-9]\\d{3}(20\\d{3})    
4176 : unparsable : unparsable : 0.071215278 (s) : /^(19|20)[012]\\d{9}$/Here's the code to get all valid years.  var years = [];var regex = /^(19|20)[012]\\d{9}$/;var d = new Date();while (d.getFullYear() < 9999)
4177 : failed : failed : 0.926851769 (s) : \\d{4}\\-\\d{1,2}\\-\\d{1,2}\\-\\d{2,4}
4178 failed : unparsable : 0 (s) : Please check your regex.
4179 : failed : failed : 1.306392159 (s) : \\b(0?[1-9]|[12][0-9]|3[01])\\b
4180 : failed : failed : 0.673968708 (s) : (^[0-9]{1,2}([3-9])[0-9])|(\\1(\\2\\1))|(\\1\\2\\1)
4181 : failed : pumping failed : 53.424919214 (s) : [a-zA-Z0-9-\\.]+.\\d+?
4182 : failed : failed : 1.278289163 (s) : \\d+\\.\\d+
4183 : failed : failed : 0.204935915 (s) : ^[+-]?[1-9]\\d{1,2}(\\.\\d{1,2})?$
4184 : failed : failed : 1.093008766 (s) : 0.5(x+2)
4185 : failed : failed : 3.698691896 (s) : (?<!@)\\d+(\\.\\d+)?(?!@)
4186 : failed : failed : 4.586297191 (s) : \\d+\\.\\d+
4187 : failed : failed : 1.023111976 (s) : \\d.{1,2}
4188 : failed : failed : 0.202283948 (s) : ^\\d{1,2}(,\\d{3})*(\\.\\d+)?$
4189 : failed : failed : 0.19592998 (s) : ^[-]?\\d+\\.\\d+$
4190 : failed : failed : 8.353501995 (s) : [\\+-]?[0-9]{1,2}\\.?[0-9]{1,2}
4191 : failed : failed : 0.422674423 (s) : (?i)\\bhttp
4192 : unparsable : unparsable : 0.100392947 (s) : (^
4193 : unparsable : unparsable : 0.079115522 (s) : ^(http
4194 : failed : failed : 0.506787945 (s) : `^http
4195 : failed : failed : 0.703849784 (s) : ^[^\\d\\s][\\d\\w\\-]+\\.(jpg|png)$
4196 : unparsable : unparsable : 0.087688276 (s) : ^http[s
4197 : failed : failed : 0.250370666 (s) : ^.*\\.([a-zA-Z0-9])?\\.([a-zA-Z0-9]?)$
4198 : failed : failed : 0.125915971 (s) : ^http
4199 : failed : failed : 0.447223504 (s) : /^http
4200 : unparsable : unparsable : 0.066998251 (s) : ^(?!(https?|ft
4201 : unparsable : unparsable : 0.084203621 (s) : ^(((1[0-9]|2[0-3])-1[0-9]|([12][0-9]|3[01])|3[01])[0-9]|(19|20)\\d[0-9]|(202|203
4202 : unparsable : unparsable : 0.074614403 (s) : (?<year>
4203 : unparsable : unparsable : 0.10980442 (s) : \"([0-9\\-]{4})-([0-9\\-]{2})-([0-9\\-]{2}) ( [0-9]{2}\
4204 failed : unparsable : 0 (s) : Please check your regex.
4205 : unparsable : unparsable : 0.110304487 (s) : ^(?=.*
4206 failed : unparsable : 0 (s) : Please check your regex.
4207 : unparsable : unparsable : 0.088114775 (s) : /^[1-9][0-9]?[0-9]? [2][0-9]? [0-9]?[0-
4208 : unparsable : unparsable : 0.05420749 (s) : (?<day-of-month>\\d{1,2})\\s(?<hour>\\d{2})\\s(?<minute>\\d{
4209 : unparsable : unparsable : 0.060270182 (s) : ^\\s*([0-9]{4})-([0-9]{2}-)?([0-9]{2})?\\s*[0-9]{2}-?([0-9]{2}
4210 : unparsable : unparsable : 0.084615973 (s) : var regEx = new RegExp(\"^
4211 : failed : error init : 0.111916767 (s) : ^
4212 : failed : failed : 1.061453244 (s) : \\
4213 : failed : failed : 0.345392775 (s) : \\
4214 : failed : failed : 1.681668774 (s) : \\
4215 failed : unparsable : 0 (s) : Please check your regex.
4216 : failed : error init : 0.12451599 (s) : ^
4217 : failed : error init : 0.107083666 (s) : ^
4218 : failed : failed : 0.790186529 (s) : /
4219 : failed : failed : 3.12643835 (s) : /
4220 failed : unparsable : 0 (s) : Please check your regex.
4221 : unparsable : unparsable : 0.051194196 (s) : (?=.*[a-z].*[a-z])(?=.*[A-Z].*[A-Z])(?=.*[0-9].*[0-9])\\S{6,}\\S{
4222 : unparsable : unparsable : 0.057406991 (s) : (?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#
4223 : unparsable : unparsable : 0.092062026 (s) : (?=.*\\d.*\\d.*\\d.*\\d.*\\d)(?=\\S.*\\S.*\\S.*\\S.*\\S)(?=.*[a-z].*[a-z].*[
4224 : failed : failed : 0.845709651 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,20}$
4225 : failed : failed : 4.109364534 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.{6,})(?!.*\\d)(?=\\w\\w\\w\\w).*$
4226 : failed : failed : 33.722313194 (s) : \\b(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}
4227 : failed : pumping failed : 21.415514519 (s) : (?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\w\\s]).{6,}$
4228 : unparsable : unparsable : 0.075454016 (s) : [a-zA-Z0-9]{6,}[a-zA-Z0-9]{6,}[a-zA-Z0-9]{6,}[a-zA-Z0
4229 : failed : failed : 1.501933741 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*.{6,})[a-zA-Z0-9]{6,}$
4230 : unparsable : unparsable : 0.069573013 (s) : ^(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*()-_=+])(?=.{6,})[A-Za-z
4231 failed : unparsable : 0 (s) : Please check your regex.
4232 : unparsable : unparsable : 0.083803471 (s) : [
4233 failed : unparsable : 0 (s) : Please check your regex.
4234 failed : unparsable : 0 (s) : Please check your regex.
4235 failed : unparsable : 0 (s) : Please check your regex.
4236 failed : unparsable : 0 (s) : Please check your regex.
4237 failed : unparsable : 0 (s) : Please check your regex.
4238 failed : unparsable : 0 (s) : Please check your regex.
4239 failed : unparsable : 0 (s) : Please check your regex.
4240 failed : unparsable : 0 (s) : Please check your regex.
4241 : failed : failed : 19.025996852 (s) : \\?.*
4242 : failed : failed : 0.693305548 (s) : ^\\d+([^.])?$
4243 : failed : pumping failed : 228.340669093 (s) : [a-zA-Z0-9]+[?.]
4244 : failed : pumping failed : 359.630262233 (s) : [^?]+$
4245 : unparsable : unparsable : 0.09273736 (s) : r'''(?P<query>.*?)\\?'''
4246 : failed : failed : 2.068584145 (s) : ^\\/([a-zA-Z][a-zA-Z0-9]+)$
4247 : failed : failed : 4.314440721 (s) : ^([^\\?]+)\\?
4248 : failed : failed : 0.143380275 (s) : [^?]+
4249 : failed : failed : 3.236334321 (s) : \\?.*
4250 : unparsable : unparsable : 0.077317736 (s) : ?|\\?(?=\\(|$)
4251 : failed : failed : 0.283492791 (s) : \\b(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*?(\\w+)\\-*
4252 failed : unparsable : 0 (s) : Please check your regex.
4253 failed : unparsable : 0 (s) : Please check your regex.
4254 : failed : failed : 43.478403314 (s) : ([a-zA-Z0-9_-]+)
4255 : failed : failed : 20.510282104 (s) : \\b[A-Za-z]+\\b
4256 : failed : failed : 1.341571877 (s) : ^[^-_a-zA-Z0-9~\\.]+$
4257 : unparsable : unparsable : 0.086535828 (s) : ((?<![A-Za-z])A(?![A-Za-z])|(?<=[A-Za-z])(?=[A-Za-z0-9])|(?<=[A-Za-z0-9])(?=[A-Za-z])(?![A-Za-z])
4258 : failed : failed : 0.692816002 (s) : ^[a-zA-Z0-9_-]+( ( [a-zA-Z0-9_-]+ )* )?$
4259 failed : unparsable : 0 (s) : Please check your regex.
4260 : failed : failed : 0.179558252 (s) : ^[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*$
4261 : failed : failed : 2.205223025 (s) : /
4262 : failed : failed : 0.226837938 (s) : ^192\\.168\\.\\d\\d-(\\d\\d)\\.(\\d\\d)\\.(\\d\\d)$
4263 : failed : failed : 0.392365476 (s) : (?i)ip_address\\d{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}
4264 : failed : failed : 8.23344209 (s) : '([0-9]{1,3}\\.){3}[0-9]{1,3}'.
4265 : failed : failed : 5.06683488 (s) : ^(?=[^\\d]*[\\d])
4266 : unparsable : unparsable : 0.127480221 (s) : (?<=^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$)(?=\\d{1,3}-\\d{1,3}-\\d{
4267 : unparsable : unparsable : 0.069998219 (s) : [123]\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}/[123]\\s?\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}\\.\\d{
4268 : failed : failed : 6.84414908 (s) : ^[0-9]|^[1-9][0-9]|^192[0-9]\\d|^192[0-9]\\d\\d$
4269 : failed : failed : 76.144533996 (s) : (?<![a-zA-Z0-9._-])[A-Za-z0-9.-]+@
4270 : failed : failed : 1.854889238 (s) : \\b
4271 : failed : failed : 0.347191954 (s) : This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answ
4272 : failed : failed : 0.239977794 (s) : This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answ
4273 : failed : failed : 0.305274148 (s) : This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answ
4274 : failed : failed : 0.386122556 (s) : This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answ
4275 : failed : failed : 0.37945506 (s) : This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answ
4276 : failed : failed : 0.265275537 (s) : This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answ
4277 : failed : failed : 0.230083466 (s) : This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answ
4278 : failed : failed : 0.283415596 (s) : This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answ
4279 : failed : failed : 0.2933447 (s) : This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answ
4280 : failed : failed : 0.301175063 (s) : This regular expression is used for validating five digit numeric value which can be an amount $ separated with, sign.Generate a RegEx for this description. Answ
4281 : unparsable : unparsable : 0.090454946 (s) : ^(?P<month>[a-zA-Z]{3})/(?P<year>\\d{4})/(?P<day>[0-2]\\d{2})$
4282 : failed : failed : 0.712253981 (s) : \\d{1,2}/\\w{3}\\d{4}
4283 : failed : failed : 1.170820176 (s) : /^
4284 : failed : failed : 1.434502719 (s) : [\\d]{1,2}\\s[a-zA-Z]{3}\\d{4}
4285 : failed : failed : 0.286930959 (s) : (0[1-9]|1[012])/[A-Z][a-z]{3,}(20[2-9]|0[1-9])/[0-9]{4}This regular expression matches dates of the form dd/MMM/yyyy where dd can be 1 or 2
4286 : failed : failed : 0.543073674 (s) : ((\\d{2})\\s*)(\\w{3})\\/(\\d{4})
4287 : failed : failed : 2.872347688 (s) : (?<!\\d/)\\d{1,2}\\/\\w{3,4}\\d{4}
4288 : failed : failed : 0.199631041 (s) : /
4289 : failed : failed : 0.620816846 (s) : \\d{1,2}/\\w{3}/\\d{4}
4290 failed : unparsable : 0 (s) : Please check your regex.
4291 : unparsable : unparsable : 0.098155506 (s) : (^|[^a-zA-Z])(IKEA|STOPPED|CASH|COUPON|DISCARD|MARKET|MARKETPLACE|MARKETPLACE|MARKETPLACE|MARKETPLACE|MARKETPLACE|MARKETPLACE|MARKETPLACE|MARKETPLACE|MARKETPLACE|MARKETPLACE|MARK
4292 : failed : failed : 2.523693306 (s) : /^
4293 failed : unparsable : 0 (s) : Please check your regex.
4294 : failed : failed : 0.439156006 (s) : htt
4295 : failed : failed : 0.144736093 (s) : ^\\d{4}-\\d{2}-\\d{2}$
4296 : failed : failed : 1.40836832 (s) : \\b[A-Z][a-z][A-Z0-9]{4}\\b
4297 : failed : failed : 21.946327572 (s) : \\s(?=.*\\d{4}$)[-\\s]?\\d{3}[\\s-]?\\d{4}
4298 : failed : failed : 0.164644755 (s) : ^[ACDEFGHJKMPQS]{8,16}$
4299 : failed : failed : 14.846899244 (s) : (?<![\\w])(?<![\\d])(?<![\\s])[a-zA-Z]+[a-zA-Z0-9]+(?![\\w])(?![\\d])(?![\\s])
4300 : failed : failed : 1.485308689 (s) : (Sample) r\"^\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"
4301 : failed : error init : 0.11105388 (s) : ^
4302 : failed : failed : 0.279262448 (s) : ^[a-f0-9]{32}$
4303 : failed : failed : 0.369053943 (s) : md5(\\\\S{3}\\\\S{3})
4304 : failed : failed : 0.333171099 (s) : ^(.{32})(.*)$
4305 : failed : failed : 0.9866674 (s) : [0-9a-fA-F]{32}
4306 : unparsable : unparsable : 0.071744719 (s) : (?<![0-9])(
4307 : failed : failed : 0.212206249 (s) : (?={0,8}$)([\\da-fA-F]{32})$
4308 : failed : failed : 0.388591449 (s) : md5_pattern_digits = re.compile(r'^(?=.{32})[0-9a-fA-F]{32}$', re.IGNORECASE)
4309 : unparsable : unparsable : 0.106748728 (s) : ((?![0-9a-fA-F]{4})(?![0-9a-fA-F]{2})(?![0-9a-fA-F]{1})(?![0-9a-fA-F]{3})(?![0-9a-fA-F]{3})(?![0-9a-fA-
4310 : failed : pumping failed : 27.129643485 (s) : (?=.*[0-9a-f])(?=.*[A-Z])(?=.*[a-z])[0-9a-fA-F]{32}
4311 : failed : failed : 0.493656926 (s) : (\\d\\d\\d-\\d\\d-\\d\\d)
4312 : unparsable : unparsable : 0.092131366 (s) : ^[-A-Za-z0-9].[A-Za-z0-9\\-]{5,}([0-9]{4})([0-9]{2})([0-9]{3})([0
4313 failed : unparsable : 0 (s) : Please check your regex.
4314 : failed : failed : 0.520271765 (s) : \\b[0-9]{2}\\s[0-9]{4}-?[0-9]{6}\\b
4315 : failed : failed : 1.725999869 (s) : (?= \\d{9} \\d{8} (-){2} \\d{4})
4316 : failed : failed : 0.934073121 (s) : ^(?!-)\\d{9}$
4317 : failed : failed : 0.888462811 (s) : \\d{1,3}-\\d{3}-\\d{4};
4318 : failed : failed : 0.194512235 (s) : [0-9]{9}[- ]{0,1}[0-9]{9}    The above regex will accept any 9 digits with spaces and dash(s) at any position.
4319 : failed : failed : 0.923700047 (s) : \\b[9|8|7|6|5|4|3|2|1]\\b
4320 : failed : failed : 0.172523619 (s) : ^\\d{9}[ -]\\d{8}[ -]\\d{4}$
4321 : unparsable : unparsable : 0.083903619 (s) : (?<!
4322 : failed : failed : 0.840471132 (s) : \\d{2}[-/]\\d{2}[-/]\\d{4}
4323 : failed : failed : 0.63607576 (s) : \\d{2}/\\D?\\d{2}/\\d{4}
4324 : failed : failed : 0.135578996 (s) : \\\\d+([MD]\\\\w+(\\\\d+)?)|
4325 : failed : failed : 0.1076574 (s) : [0-9]|[1-9]\\d|1[012]|2[0-3]|
4326 : failed : failed : 0.729246201 (s) : \\b([0-9]{2}|1[0-9]|2[0-9]|3[01])/(\\w{3})/\\b
4327 : failed : failed : 0.715741683 (s) : /^(\\d\\d?[^/]\\d{3})
4328 : failed : failed : 0.591904885 (s) : \\b         # Start of Word(0[1-9])   # Day/(0[1-9])   # Month\\.         #.(0[1-9])   # Year\\b         # End of Word
4329 : failed : failed : 0.690288849 (s) : \\d{2}/\\w{3}/\\d{4}
4330 : failed : failed : 0.211561842 (s) : ^([1-9]|[1-2][0-9]|3[01])\\/(0[1-9]|1[012])\\/([0-9]{4})$
4331 : failed : failed : 2.753118669 (s) : ^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?(\\.)
4332 : failed : failed : 10.623500219 (s) : ^[a-zA-Z0-9][a-zA-Z0-9._-]+@[a-zA-Z0-9-]+(\\.[a-zA-Z]+)+$
4333 : failed : failed : 0.798145773 (s) : @\"^[a-zA-Z0-9_.\\+-]+@[a-zA-Z0-9_.-]+\\.[a-zA-Z]{2,3}$\"
4334 : failed : failed : 1.401236545 (s) : (^\\w+[\\.,]?)+$
4335 : unparsable : unparsable : 0.098976293 (s) : ^[a-zA-z0-9.!#$%&'*+/=?^_`{|}~-]+(, [a-zA-z0-9.!#$%&'*+/=?^_
4336 : unparsable : unparsable : 0.073363311 (s) : \\b[A-Za-z0-9._%+-]+@([A-Za-z0-9.-]+\\.[A-Z|a-z]{2,4})[.](com|comma|comma|com
4337 : failed : pumping failed : 54.296598363 (s) : (?=.*\\.)(?=.*[a-z])[a-z0-9._%+-]+@gmail.com(?=\\.)
4338 : failed : failed : 13.80409896 (s) : \\b[^ ]+,\\b
4339 : failed : pumping failed : 27.704779129 (s) : [^\\s]+,?[^\\s,]+
4340 : failed : pumping failed : 166.620492514 (s) : [a-zA-Z0-9.]+@[a-zA-Z0-9.]+
4341 : failed : failed : 1.774367603 (s) : [a-zA-Z0-9@#$%^&+=!]{8,}
4342 : failed : failed : 0.211783898 (s) : This regular expression can be used for all valid passwords.
4343 : failed : failed : 12.683931657 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$
4344 : failed : pumping failed : 37.146292081 (s) : (?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}
4345 : failed : failed : 0.656361698 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$
4346 : failed : failed : 2.885297087 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)\\w{8,}$
4347 : failed : failed : 6.2899004 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$
4348 : failed : failed : 0.534284454 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$
4349 : failed : failed : 4.443343806 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$%^&*#!]{8,}$
4350 : failed : failed : 1.605437193 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$
4351 : failed : error init : 0.11559832 (s) : ^
4352 : unparsable : unparsable : 0.078401786 (s) : \"bodyTag|([\\w\\-_\\.
4353 : failed : failed : 1.354392024 (s) : (\\d+)
4354 : failed : failed : 9.927590994 (s) : ^[^\\W_]+\\s+Name
4355 : failed : failed : 0.213710045 (s) : This regex stri
4356 : failed : failed : 88.123052444 (s) : \\<\\s*(.*?)\\s*\\>
4357 : unparsable : unparsable : 0.073561312 (s) : (?s)^//.*?(?=\\()(.*?)(?=\\)$
4358 : failed : failed : 0.134426197 (s) : var myPattern = new Regex(\"^.{6,10}-.*-.*-.*$\");
4359 : failed : failed : 0.90157186 (s) : ^([^@]+@)?([^@]+)(\\.com){2,}\\z
4360 : failed : pumping failed : 184.799245955 (s) : .*<body />.*
4361 : failed : failed : 0.285374474 (s) : Allows letters,numbers,hyphens,periods and underscores. Such 
4362 : failed : failed : 0.242770303 (s) : Allows letters,numbers,hyphens,periods and underscores. Such 
4363 : failed : failed : 0.330705782 (s) : Allows letters,numbers,hyphens,periods and underscores. Such 
4364 : failed : failed : 0.256897208 (s) : Allows letters,numbers,hyphens,periods and underscores. Such 
4365 : failed : failed : 0.323007887 (s) : Allows letters,numbers,hyphens,periods and underscores. Such 
4366 : failed : failed : 0.403237135 (s) : Allows letters,numbers,hyphens,periods and underscores. Such 
4367 : failed : failed : 0.240567298 (s) : Allows letters,numbers,hyphens,periods and underscores. Such 
4368 : failed : failed : 0.289743596 (s) : Allows letters,numbers,hyphens,periods and underscores. Such 
4369 : failed : failed : 0.297112976 (s) : Allows letters,numbers,hyphens,periods and underscores. Such 
4370 : failed : failed : 0.257784909 (s) : Allows letters,numbers,hyphens,periods and underscores. Such 
4371 : failed : failed : 2.706844576 (s) : [ ]+
4372 : failed : failed : 0.586954214 (s) : ([ ]+?)
4373 : failed : failed : 3.161485239 (s) : \\s
4374 : failed : failed : 0.359333199 (s) : [ \\t\\s]*
4375 : failed : failed : 0.136645213 (s) : [^a-zA-Z0-9_-]
4376 : failed : failed : 1.230031926 (s) : \\s
4377 : failed : failed : 1.869974918 (s) : ^(?=.*\\s)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8}$
4378 : failed : failed : 1.479685048 (s) : \\s{2,}
4379 : failed : failed : 2.055624026 (s) : [ ]+
4380 : failed : failed : 0.135310273 (s) : [a-zA-Z ]*
4381 : failed : failed : 2.356455084 (s) : \\d{1,18}(,\\d{1,18})+
4382 : failed : failed : 1.397067088 (s) : \"(?!^)
4383 : unparsable : unparsable : 0.122448128 (s) : (?P<decimal>\\d+\\.{0,2}|(?P<decimal1>\\d+)\\.\\d+)
4384 : failed : failed : 17.780824244 (s) : (?<=\\s|^)\\d+(?=\\s|$)
4385 : unparsable : unparsable : 0.086182425 (s) : ^((?=\\d*\\.\\d+$)(?=\\d*\\.\\d*$)(?=\\d*\\.\\d*$)(?=\\d*\\.\\d+$)(?=\\d+\\.\\d+$)
4386 : unparsable : unparsable : 0.110080327 (s) : ^(?=.*[0-9])(?=.*[1-9][01])(?=.*[0-9]                                          [0-9]                                          [a-z])(?=.*[A-Z])(?=.*[0-9a
4387 : unparsable : unparsable : 0.093368813 (s) : (?<=\\D*)(?=\\d)(?<!\\d)(?=[\\d.,*\\+\\-\\/\\%\\^\\*\\(\\)])
4388 : failed : failed : 142.941800265 (s) : ^[1-9][0-9]*(.[0-9]+)$
4389 : failed : pumping failed : 275.361723123 (s) : (?<![\\d.])([+-]?[0-9]*\\.?[0-9]+)(?![\\d.])
4390 : failed : failed : 9.973548263 (s) : (?<![0-9.])[0-9.]+
4391 : failed : failed : 256.139761871 (s) : (?<=Gewehr|gesetzt|Gewegen|Historiae/historiae).*
4392 : unparsable : unparsable : 0.055828856 (s) : (?i)([\\d\\w\\--]*)([A-Z]{2})([\\d{3}])
4393 : failed : failed : 5.83020947 (s) : (\\d+)[\\(H\\)]?([a-zA-Z]\\w)+$
4394 : failed : failed : 0.2895429 (s) : (r'^[0-9]+[a-zA-Z]{1,2}[0-9][a-zA-Z]{1,2}[0-9][a-zA-Z]{1,2}$')
4395 : failed : failed : 1.345009725 (s) : [A-Z][a-z]{2}-[A-Z][a-z]{2}-[A-Z][a-z]{2}-[A-Z][a-z]{2}[a-z]{3}[A-Z][a-z]{2}[a-z]{3}[A-Z][a-z]{3}[/\\-].
4396 : unparsable : unparsable : 0.08319974 (s) : r'^(?P<number>\\d{3}-\\d{3}-\\d{4})(-(?P<letter>[a-z]+)-)?$'
4397 : failed : failed : 360.032173534 (s) : [a-z]{2,21}[A-Z]{2}[0-9]{1}[0-9]{8}[0-9]{3}[0-9]
4398 : failed : failed : 109.482206973 (s) : [H]?[a-zA-Z]{1,3}[a-zA-Z]{1,2}[0-9]{2}[a-zA-Z]{1,3}
4399 : failed : failed : 0.825547897 (s) : (\\d{2}[-\\.\\d]{3}[-\\.\\d]{3}[-\\.\\d]{4})
4400 : unparsable : unparsable : 0.081400571 (s) : ((([A-Za-z0-9]+)[- ]+([A-Za-z0-9]+)[- ]+([A-Za-z0-9]+)[- ]+([A-Za-z0-9]+)[- ]+([A-Za-z0-9]+)[- ]+)
4401 : failed : failed : 11.616649934 (s) : a|b|c
4402 failed : unparsable : 0 (s) : Please check your regex.
4403 : failed : failed : 3.59094579 (s) : [a-z0-9]{3,}[a-z0-9]{3,}[a-z0-9]
4404 : failed : failed : 146.283122953 (s) : (a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z)
4405 : failed : failed : 0.118481359 (s) : A-Za-z0
4406 : failed : failed : 0.104839804 (s) : small
4407 : failed : failed : 1.672415897 (s) : (a|b).
4408 : failed : failed : 0.119204773 (s) : A large letter
4409 : failed : failed : 10.470225131 (s) : a_[0-9]|[A-Z][a-z]
4410 : failed : failed : 0.940082906 (s) : [a-zA-Z0-9]{4,20}
4411 : failed : failed : 0.608235496 (s) : ^[A-Z][a-zA-Z0-9-]*[A-Z][a-zA-Z0-9-]*$
4412 : failed : failed : 16.027026965 (s) : [A-Z]{1,2}\\w\\w*[A-Z][a-zA-Z]\\w*
4413 : failed : failed : 0.139952526 (s) : (?<!^.{0,2}[A-Z]{2}[A-Z]{2}[A-Z]).
4414 : failed : failed : 5.093159081 (s) : /[^A-Za-z]+
4415 : failed : failed : 15.556241709 (s) : [A-Z][a-z][A-Za-z0-9]+
4416 : failed : failed : 0.195933506 (s) : ^(.{3})([A-Z][A-Z][A-Z]){2}$
4417 : failed : failed : 0.200433063 (s) : ^[A-Z][a-zA-Z][0-9][a-zA-Z][a-zA-Z]$I have to find a RegEx for this description.
4418 : failed : failed : 0.137072232 (s) : ^([A-Z]{3}\\w*)([A-Z]{3})([A-Z]{3}$)
4419 : failed : failed : 0.45971717 (s) : ^[A-Z][a-z]{3}.+$
4420 : unparsable : unparsable : 0.095490918 (s) : | (?[A-Z]{1,2}[a-z]*
4421 : failed : failed : 0.167733842 (s) : The format for the time format is 
4422 : failed : failed : 0.12779439 (s) : <pattern>    
4423 : unparsable : unparsable : 0.080100177 (s) : (?P<time_format>\\d{1,2}
4424 : unparsable : unparsable : 0.058197732 (s) : /(^|(?<=\\s))((?<![0-9])[0-9]{1,2
4425 : unparsable : unparsable : 0.098390668 (s) : [^\\\\d]{
4426 : failed : failed : 0.147705055 (s) : ^[a-zA-Z0-9-]
4427 : failed : failed : 0.134098214 (s) : time = '%Y-%m-%dT
4428 : failed : failed : 0.15730403 (s) : <td class=\"time\"><a href=\"htt
4429 : failed : failed : 1.551811469 (s) : (?<=\\.)|\\.(?=\\.)
4430 : failed : failed : 0.141896808 (s) : (?!\\d{4}-\\d{2}-\\d{2}).{1,2}
4431 : unparsable : unparsable : 0.059312439 (s) : (?=[^\\\\s]*[0-9]{4}-[0-9]{2}-[0-9]{2}[T][0-9]{2}[0-
4432 : failed : error init : 0.104287981 (s) : ^
4433 : unparsable : unparsable : 0.071257368 (s) : ^((0[1-9]|1[0-2])\\d{3}-\\d{1,2}\\d{4}\\s?\\d{1,
4434 : unparsable : unparsable : 0.070632928 (s) : -?\\d{4}-?\\d{2}-?\\d{2}\\s\\d{
4435 : failed : failed : 0.124409161 (s) : [^\\d{4}][-]?
4436 : unparsable : unparsable : 0.074473952 (s) : [-]\\d{4}-\\d{2}-\\d{2}T[-+]\\d{
4437 : unparsable : unparsable : 0.07854768 (s) : ^[0-9]{4}\\-[0-9]{2}-[0-9]{2}\\T[0-9]{
4438 failed : unparsable : 0 (s) : Please check your regex.
4439 : unparsable : unparsable : 0.057216745 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2}\\s[0-9]{
4440 : unparsable : unparsable : 0.059212492 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{
4441 : failed : failed : 0.382396733 (s) : \\d{1,2}(\\.\\d{3})?([eE][+-]?\\d)Generate the Regex for this description. Answ
4442 : failed : failed : 0.240762767 (s) : ^\\d+\\.\\d{1,2}$
4443 : failed : failed : 6.148693058 (s) : \\d{2,}[.]\\d{2,}|[.]\\d{2,}
4444 : failed : failed : 3.043236968 (s) : (0.00[0-9]+), (25.00[0-9])
4445 : failed : failed : 0.545120522 (s) : /^([0-9]{1,2}[.])?([0-9]{1,2})([0-9]{1,2})?\\$/?
4446 : failed : error init : 0.136255344 (s) : ^
4447 : unparsable : unparsable : 0.114996174 (s) : 0.00 - 0.25Codevar regex = new RegExp(/^
4448 : failed : pumping failed : 287.596419269 (s) : ([0-9\\.]+)$
4449 : failed : failed : 3.055401818 (s) : \\d{1,2}.\\d{3}
4450 : unparsable : unparsable : 0.095799375 (s) : 0-9, 0-9[0-9]|9[0-9]|10[0-9]|11[0-9]|12[0-9]|13[0-9][0-9]|14[0-9][0-9][0-9][0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-
4451 : failed : failed : 0.263156381 (s) : /^[a-zA-Z0-9]+$/The regular expression will match any string that contains only letters, digits, or underscores, and will not accept the underscore character.To validate the response text, you can use the following regular expressi
4452 : failed : failed : 8.676963941 (s) : ^[^ ]{3,}$
4453 : failed : failed : 0.512556261 (s) : /^[a-zA-Z0-9]+
4454 : unparsable : unparsable : 0.110748229 (s) : ^[a-zA-Z0-9!@#$%^&*()_=+\\-\\[\\]{}
4455 : failed : failed : 0.287973985 (s) : ^[a-zA-Z0-9_-]+$
4456 : failed : failed : 0.678318411 (s) : ^[^ \\t]+$
4457 : unparsable : unparsable : 0.068602266 (s) : ^(?=.*?[a-zA-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[$-_@.&+])(?!^)(?!$).{
4458 : failed : failed : 0.493172935 (s) : ^\\s*((\\w|_)*\\s?)+$
4459 : failed : failed : 0.912905713 (s) : ^[a-zA-Z0-9_]*$
4460 : failed : failed : 1.570797101 (s) : \\b
4461 : unparsable : unparsable : 0.076650226 (s) : \\b(([1-9][0-9]|[1-9][0-9][0-9])[-.](0[1-9]|[1-9][0-9])[-.]([0-9]{3}|[0-9]{3}[0-
4462 : failed : failed : 0.308553804 (s) : \\b[1-9][0-9]{2}[\\s.-]?[0-9]{3}\\s[\\s.-]?[0-9]{4}\\b
4463 : unparsable : unparsable : 0.102372354 (s) : /^(0[1-9]|[1-9]?[0-9])[\\s-]*?[\\(]?[0-9]{3}[\\s-]*?[\\)]?[\\s-]*[\\(]?[0-9]{3
4464 : failed : failed : 1.281835387 (s) : \\b[0-9]{3}\\s[A-Z]{2}\\s[0-9]{3}[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4}\\b
4465 : failed : failed : 0.353204577 (s) : \\b\\d{3}\\s*[a-z][a-z \\d]*[a-z]\\s*\\d{3}\\s*[a-z]\\d{3}[a-z]\\s*(\\d{4})\\b
4466 : unparsable : unparsable : 0.077999473 (s) : (?m)^\\[+\\d{1,5}
4467 : failed : failed : 0.529090744 (s) : ^\\+?\\d{1}[-\\.\\s]?\\d{1}[-\\.\\s]?\\d{2}[-\\.\\s]?\\d{3}[-\\.\\s]?\\d{4}$
4468 : failed : failed : 0.818101831 (s) : /^(?=.{6,10}$)(?=.{1,3}[-.]{1,3}$)[0-9-]{3,6}
4469 : unparsable : unparsable : 0.08891331 (s) : \\(?[0-9]{3}\\)?[ -]?[0-9]{3}\\[1-9][ -]?[0-9]{4}$
4470 : failed : failed : 0.363477795 (s) : ^((0|1)[-\\s]?[0-9]{3})?[-\\s]?(\\(\\d{3}\\))?[-\\s]?(\\d{3})?[-\\s]?(\\d{2})?[-\\s]?(\\d{2})?
4471 : failed : error init : 0.126233867 (s) : ^
4472 : failed : failed : 1.248761082 (s) : \\d{3,}\\,\\d{3}
4473 : failed : failed : 1.270059776 (s) : -?\\d{3}
4474 : failed : pumping failed : 184.502695787 (s) : [^\\D]+[.\\,]|[\\.]
4475 : unparsable : unparsable : 0.076172131 (s) : {x.gsub('(?<=\\\\d)(,)(?=\\\\d)', '_')}
4476 failed : unparsable : 0 (s) : Please check your regex.
4477 : failed : error init : 0.100634039 (s) : ^
4478 : failed : failed : 0.798109082 (s) : \\d{3,3},\\d{3,3}
4479 : failed : failed : 0.690734472 (s) : \\d{3}
4480 : failed : error init : 0.12905505 (s) : ^
4481 : unparsable : unparsable : 0.098189712 (s) : [A-Z]{2,8}-?[A-Z0-9]*-?[A-Z0-9]*-?[A-Z0-9
4482 : failed : failed : 0.113097769 (s) : ^[A-Z]{1}[A-Z]{1}[0-9]{1}[0-9]{1}$
4483 : failed : failed : 7.05303279 (s) : [^A-Z]\\d{0,8}[A-Z]
4484 : failed : failed : 36.0441325 (s) : [A-Z]{5}[0-9]{5} \"\"\"
4485 : failed : failed : 0.577914152 (s) : ^[A-Z][A-Z] [A-Z] [1-9]$
4486 : unparsable : unparsable : 0.071839628 (s) : ^([A-Z]{1}[0-9]{2}[A-Z]{3})[\\s]*([0-9]{1,3}[\\
4487 : failed : failed : 0.706534258 (s) : \"^([a-zA-Z0-9]+) ([a-zA-Z0-9])$\"
4488 : failed : failed : 2.734640985 (s) : ^(?=.*[\\d])(?=.*[A-Z])[A-Z]\\d{4}$
4489 : failed : failed : 5.609488414 (s) : (?<VehicleID>[A-Z]{2}[0-9]{7})/(?<Plate>[A-Z]{3})\"\"\"
4490 : failed : failed : 0.131050257 (s) : ^[A-Z0-9]{3}[A-Z]{2}$
4491 : unparsable : unparsable : 0.109416425 (s) : [\
4492 : failed : failed : 8.035849619 (s) : [0-9]{2}-[0-9]{2}-[0-9]{4}
4493 : failed : failed : 0.840744342 (s) : \\d{4}-\\d{2}-\\d{2}
4494 : failed : failed : 15.971427278 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2}
4495 : failed : failed : 5.294722458 (s) : [\\d\\d-]{1,2}\\s\\d{1,2}\\s\\d{4}
4496 : failed : failed : 0.660418371 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
4497 : failed : failed : 0.738299713 (s) : `^\\d{1,2}[-/.]\\d{1,2}[-/.]\\d{4,4}$`
4498 : failed : failed : 0.183189333 (s) : [DATE_FORMAT_MATCH_PATTERN]
4499 : failed : failed : 0.175932023 (s) : ^\\d{4}-\\d{2}-\\d{2}$
4500 : failed : failed : 1.180003495 (s) : \\d{4}-\\d{2}-\\d{2}
4501 failed : unparsable : 0 (s) : Please check your regex.
4502 failed : unparsable : 0 (s) : Please check your regex.
4503 : unparsable : unparsable : 0.076574274 (s) : [
4504 failed : unparsable : 0 (s) : Please check your regex.
4505 failed : unparsable : 0 (s) : Please check your regex.
4506 : failed : failed : 2.755896238 (s) : /
4507 : unparsable : unparsable : 0.108809609 (s) : (
4508 failed : unparsable : 0 (s) : Please check your regex.
4509 failed : unparsable : 0 (s) : Please check your regex.
4510 : unparsable : unparsable : 0.058996528 (s) : (
4511 : failed : failed : 0.166992143 (s) : ^[a-zA-Z0-9\\.\\ w.]{1,3}$
4512 : failed : failed : 0.151800434 (s) : [A-Za-z0-9./]*
4513 : failed : failed : 4.441563447 (s) : [a-zA-Z0-9-_\\.]{1,3}|[a-zA-Z0-9-_\\.]{4,}
4514 : failed : failed : 62.383501774 (s) : (.{3,3})(?=www.)
4515 : failed : failed : 0.988788753 (s) : ^[a-z]\\.?[a-z]{1,3}\\.?[a-z]{1,3}\\.?[a-z]{1,3}
4516 : failed : failed : 1.501137226 (s) : (?<=\\.)[a-zA-Z0-9-_\\.]+[a-zA-Z0-9-_\\.]+
4517 : failed : failed : 0.368100741 (s) : ^(?=.{2,3}$)(?![^\\.]+\\.\\.[^\\.]+$)[.\\w]*$
4518 : unparsable : unparsable : 0.083630918 (s) : /\\b[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+@[\\w.-]+\\.[\\w.-]+\\.[\\w.-]+\\.[\\w.-]+\\.[\\w.-]+\\.[\\w.-]+\\.[\\w.-]+\\.[\\w.-]+\\.[\\w.-]+\\.[\\w.-]+\\.[\\
4519 : failed : failed : 0.117327689 (s) : ^[a-z0-9\\.\\/\\][a-z0-9\\.\\/\\][a-z0-9\\.\\/\\]{1,3}$
4520 : failed : failed : 1.0027143 (s) : .{2}|.{3}
4521 : failed : failed : 4.635140894 (s) : [a-zA-Z0-9._-]+
4522 : failed : failed : 87.801009915 (s) : \\b[A-Z][-a-zA-Z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b
4523 : failed : failed : 0.283676428 (s) : /^(?=.+[-a-zA-Z0-9_.]+[-a-zA-Z0-9_.]+$)[a-zA-Z0-9_-]+([\\.\\s][a-zA-Z0-9_-]+)+$
4524 : failed : failed : 1.871187147 (s) : [^a-zA-Z0-9_]+
4525 : failed : failed : 0.150562846 (s) : \\[(\\w+)\\]
4526 : unparsable : unparsable : 0.09989774 (s) : ^(?P<name>\\w+)\\((?P<salary>\\d+)\\)(,?)(?P<tenure_years>\\d+)$
4527 : failed : pumping failed : 270.36859506 (s) : [\\w-]+$
4528 : failed : failed : 0.888866506 (s) : \"(?<name>\\w+) (?<age>\\d+)\"
4529 : failed : failed : 0.135921008 (s) : ^\\w+$
4530 failed : unparsable : 0 (s) : Please check your regex.
4531 : failed : failed : 0.1371237 (s) : /
4532 : failed : failed : 3.620146208 (s) : [a-z-0-9_]*
4533 : failed : failed : 0.574081134 (s) : [\\w\\d\\s]*
4534 : unparsable : unparsable : 0.082391378 (s) : *(.*?)*
4535 : unparsable : unparsable : 0.06091472 (s) : ^(?P<color>(?P<red>\\d*)(?P<green>(\\d*)(?P<blue>(\\d*)))?)$
4536 : unparsable : unparsable : 0.083655224 (s) : ^(?P<first>\\w+), (?P<second>\\w+), (?P<third>\\w+)$
4537 : failed : failed : 2.211147192 (s) : \\b
4538 : failed : failed : 0.510569551 (s) : (\\w+)
4539 : failed : failed : 0.771243293 (s) : (\\w+)
4540 : failed : error init : 0.114306553 (s) : (?i)
4541 : failed : failed : 0.320356785 (s) : matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answ
4542 : failed : failed : 0.417329749 (s) : matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answ
4543 : failed : failed : 0.47000485 (s) : matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answ
4544 : failed : failed : 0.347732389 (s) : matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answ
4545 : failed : failed : 0.307357864 (s) : matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answ
4546 : failed : failed : 0.241222267 (s) : matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answ
4547 : failed : failed : 0.293705748 (s) : matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answ
4548 : failed : failed : 0.300391979 (s) : matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answ
4549 : failed : failed : 0.293040643 (s) : matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answ
4550 : failed : failed : 0.269455617 (s) : matches numeric value with optional +/-, optional decimal point, and optional commasGenerate a RegEx for this description. Answ
4551 failed : unparsable : 0 (s) : Please check your regex.
4552 : failed : failed : 1.49153827 (s) : /
4553 : failed : failed : 7.721010978 (s) : \\s*#.*$
4554 : failed : failed : 0.128764367 (s) : ```pythonimport re
4555 : failed : failed : 0.147436993 (s) : ```pythonimport re
4556 : failed : failed : 68.205899485 (s) : \b(#.*?)\b
4557 : failed : failed : 0.171825213 (s) : import re
4558 : failed : failed : 0.725268931 (s) : ^#.*$
4559 : failed : failed : 0.683013433 (s) : r'^#.*$'
4560 failed : unparsable : 0 (s) : Please check your regex.
4561 : failed : failed : 11.96427177 (s) : ^(?<!\\.)[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}$
4562 : failed : error init : 0.114685192 (s) : (^| | )
4563 : unparsable : unparsable : 0.096923641 (s) : (
4564 : failed : failed : 2.49622854 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_+=]).*$
4565 : unparsable : unparsable : 0.089508185 (s) : ^(([\\s\\d]+)|\\([\\s\\d]+\\)|[\\s\\d]+\\))$
4566 : failed : failed : 18.593737732 (s) : M|M{3,}
4567 : failed : failed : 0.15055915 (s) : [^\\s]+
4568 : failed : failed : 19.689244226 (s) : (?<!.)[a-z]
4569 : failed : failed : 29.873812393 (s) : r\".*\\b[0-9a-zA-Z_]+\\b\"
4570 : failed : failed : 0.126346108 (s) : ^[ ]*$
4571 : failed : failed : 19.50744785 (s) : [A-Z][a-z]|[a-z][A-Z]
4572 : failed : failed : 0.919011828 (s) : ^(?i)(?=.*[A-Z])(?=.*[a-z])(?=.*[\\d])[A-Za-z\\d]{6,20}$
4573 : failed : failed : 0.243392822 (s) : [A-Za-z]
4574 : failed : failed : 6.147712131 (s) : [a-zA-Z][a-zA-Z0-9]*
4575 : failed : failed : 0.2102083 (s) : .([A-Z]*).{0,2}
4576 : failed : failed : 5.041390615 (s) : [A-Z][a-z]
4577 : failed : failed : 0.759248682 (s) : [A-Z]Generate a RegEx for this description. Answ
4578 : unparsable : unparsable : 0.093157529 (s) : (\\p{Lu}\\p{L})*
4579 : failed : failed : 0.13875748 (s) : ^[A-Z]
4580 : failed : failed : 0.172332323 (s) : ^[A-Z]\\w{0,30}$
4581 failed : unparsable : 0 (s) : Please check your regex.
4582 : failed : pumping failed : 25.552949681 (s) : [\\d]+(\\.\\d+)?Explanati
4583 : unparsable : unparsable : 0.081145935 (s) : (?<=^\\d+)
4584 : unparsable : unparsable : 0.081469171 (s) : (?P<major>(\\d+)\\.(?P<minor>(\\d+)))
4585 : failed : pumping failed : 42.036034298 (s) : (.+)%
4586 : failed : failed : 0.23331513 (s) : [0-9]{30}/[0-9]{3}/[0-9]{2}
4587 : failed : failed : 0.213888551 (s) : ^v([2-9]?\\d|1\\d?\\d|10)?$
4588 : unparsable : unparsable : 0.067623924 (s) : \\b\\d+\\.[0-9a-z]{2}\\.[0-9a-z]{2}\\.[0-9a-z]{2}\\.[0-9a-z]{2}\\.[0-9a-z]{2}[0-9a-z]{2}\\.[0-9a-z]{3}\\.[0-9a-z]{3}\\.[0-9a-z]{3}\\.[0-9a
4589 : failed : failed : 18.051750757 (s) : v1\\.[a-z][a-z0-9\\-\\_\\.\\(\\)]*\\.([a-z][a-z0-9\\-\\_\\.\\(\\)]*)*
4590 : failed : failed : 9.876759639 (s) : \\d*[.,]\\d*
4591 failed : unparsable : 0 (s) : Please check your regex.
4592 : unparsable : unparsable : 0.087784196 (s) : var dt = new Date(2017,7,30,0,0,0); var regex = new RegExp('^(\\d{1,2})(-)(\\d{1,2})(-)(\\d{4})$'); if (regex.test(
4593 : failed : failed : 0.774533044 (s) : /^(0*)?(\\d{1,2})(\\/)?(\\d{1,2})(\\/)?(\\d{4})(\\d{1,2})(\\/)?(\\d{2,2})(\\/)?(\\d{1,2})(\\/)?
4594 : failed : failed : 0.776679704 (s) : ([1-2]\\d{2}-(\\d{1,2}-){1}(\\d{1,4}))
4595 : failed : failed : 0.688733965 (s) : r'^
4596 : unparsable : unparsable : 0.084572271 (s) : ^(1
4597 : unparsable : unparsable : 0.089935595 (s) : (^|(?<=[0-9]{1,2})
4598 : unparsable : unparsable : 0.049220872 (s) : ^(0?[1-9]|[12][0-9]|3)[0-9]{4}-(0?[1-9]|[12][0-9]|3)[0-9]{2}-(0?[1-9]|1
4599 : failed : failed : 0.704907141 (s) : \\d{1,2}
4600 : failed : failed : 3.93784739 (s) : (?=\\d{2}(\\d{2})\\d{2})
4601 : unparsable : unparsable : 0.085449935 (s) : r'^[a-z0-9\\-._\\(\\)]+@[a-z0-9\\-._\\(\\)]+\\.[a-z]{2,6}$'
4602 : unparsable : unparsable : 0.129222965 (s) : ^(?P<server>\\d+\\.\\d+\\.\\d+\\.\\d+|\\d+)\\s?(?P<port>\\d+\\.\\d+\\.\\d+\\.\\d+)$
4603 : failed : failed : 11.361853351 (s) : ^[a-z0-9-_%=&\\^a-zA-Z0-9.\\[\\]]+$
4604 : failed : failed : 0.178265473 (s) : \\b\\w+\\.\\w+\\.\\w+\\b\\s+\\d+\\.\\d+\\.\\d+\\.\\s+\\w+\\.\\w+\\.\\w+\\b
4605 : failed : failed : 0.225160159 (s) : regex = re.compile(r'^[a-zA-Z0-9-]+_[a-zA-Z0-9-]+$')
4606 : failed : failed : 0.408223656 (s) : You will need to generate a RegEx for the server and port combination. You might use the syntax server_(\\d+)
4607 : failed : failed : 0.841993401 (s) : ^[\\d\\.]+$
4608 : failed : failed : 0.833543818 (s) : ^(?=.*[a-z])(?=.*\\d)(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*+=?\\\\/\\\\-])[a-zA-Z0-9!@#$%^&*+=?\\\\/\\\\-]{8,}$
4609 : failed : failed : 0.118387765 (s) : import re
4610 : failed : failed : 0.291456245 (s) : ^[0-9a-fA-F]{32}$
4611 : failed : pumping failed : 2.370365467 (s) : [0-9]*[0-9]*$|[0-9]+(.[0-9]+)?$|[0-9]+$
4612 : failed : failed : 58.737978684 (s) : (?=(-?\\d*\\.?\\d+|\\.?\\d+(-?\\d*)))(?=\\d+)
4613 : failed : failed : 40.237388292 (s) : (\\d*\\.?\\d*)\\Z
4614 : failed : failed : 26.881210806 (s) : \\b(?=.*\\d)(?=.*\\.\\d)\\d+\\b
4615 : failed : failed : 5.833442214 (s) : .*\\s?
4616 : failed : pumping failed : 143.867641919 (s) : [0-9]*\\.[0-9]+
4617 : failed : failed : 4.896592053 (s) : [0-9]|[1-9][0-9]*
4618 : success : cross : 4.224793701 (s) : \\d?\\.(\\d+|\\d\\.)+$
4619 : failed : failed : 16.71185725 (s) : \\d+\\.?\\d*|\\d+|[1-9]\\d*[0-9]*
4620 : failed : failed : 0.204108848 (s) : ^(\\\\d+(\\\\.\\\\d+)?)(\\\\s?(?=\\\\d+$))?$
4621 failed : unparsable : 0 (s) : Please check your regex.
4622 : failed : failed : 0.328279862 (s) : ^[0-9]*$
4623 failed : unparsable : 0 (s) : Please check your regex.
4624 : failed : failed : 5.706137721 (s) : (([0-9]{1}) + | ([0-9]{2}))$
4625 failed : unparsable : 0 (s) : Please check your regex.
4626 : failed : failed : 0.81783899 (s) : \\d+
4627 : failed : failed : 0.137332241 (s) : ^(1|2|3|4|5|6|7|8|9)$ Exercise 3Generate a RegEx for the description.
4628 : failed : pumping failed : 113.349206705 (s) : [0-9]{3,}\\.[0-9]{2,3}
4629 : failed : failed : 1.652663917 (s) : r'^(?=(\\d))
4630 : failed : failed : 7.804641826 (s) : \\\\d+
4631 : failed : failed : 1.072901394 (s) : (0[0-9]|1[0-2])[-/]{0,1}((0[1-9]|1[012])[-/]{0,1})[0-9]{4}
4632 : failed : failed : 0.185135158 (s) : ^(\\d{1,2}\\s-\\s\\d{1,2},\\s\\d{4})$
4633 : failed : failed : 21.009200659 (s) : [0-9]{4}[-/ ][0-9]{2}[0-9]{2}[-/ ][0-9]{4}
4634 : failed : failed : 0.198037007 (s) : ^(19[2-9]|20[0-9]|21[0-2])-(0[1-9]|1[012])00-(0[1-9]|[12][0-9]|3[01])$
4635 : failed : failed : 0.15582993 (s) : ^[0-9]{2}-?[0-9]{2}-?[0-9]{4}$
4636 : failed : failed : 0.521440509 (s) : \"(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19|20)[0-9]{2}\"
4637 : failed : failed : 11.74034991 (s) : [0-9]{4}-[0-9]{2}-(0[1-9]|1[012])
4638 : failed : failed : 0.56550818 (s) : \\b  [0-9]{2}  -  [0-9]{2}  -  [0-9]{4}\\b
4639 failed : unparsable : 0 (s) : Please check your regex.
4640 : failed : failed : 0.16679854 (s) : ^[-./]([0-9]{2})-([0-9]{2})-([0-9]{4})$
4641 : failed : failed : 3.518690119 (s) : [0-9]{1,2}-?[0-9]{4}
4642 : failed : failed : 7.257172295 (s) : [0-9][0-9]-[0-9][0-9]-[19][0-9]
4643 failed : unparsable : 0 (s) : Please check your regex.
4644 : failed : failed : 0.433248879 (s) : #/\\d{1,2}[-/]\\d{1,2}[-/]\\d{4}
4645 : failed : failed : 0.664356576 (s) : [0-9]{2}-[0-9]{2}-[0-9]{4}```## Exercise 2
4646 : failed : failed : 1.454253329 (s) : \\b(1[0-4]|0[9]|[12]\\d|3[01])-(0[1-9]|1[012])-19\\d\\b
4647 : failed : failed : 6.044149708 (s) : [0-9]{2}-[0-9]{2}-[0-9]{4}
4648 failed : unparsable : 0 (s) : Please check your regex.
4649 : failed : failed : 0.138935914 (s) : import re
4650 : failed : failed : 0.133976607 (s) : ```pythonimport re
4651 : failed : failed : 0.734466775 (s) : [^\\(800|888|877|866|900]
4652 : failed : failed : 5.267744659 (s) : ([0-9]{3}|[0-9]{3})[0-9]{4}
4653 : unparsable : unparsable : 0.105531781 (s) : (^
4654 : failed : failed : 0.182691011 (s) : ^(?=.\\d{3}-\\d{3}-\\d{4})(?=\\d{2}$)^
4655 : failed : failed : 0.815122512 (s) : \\d{3}-\\d{3}-\\d{4}|\\(800|883|877|866|900\\)\\d{3}-\\d{3}-\\d{4}
4656 : failed : failed : 0.464431963 (s) : \\b(?!(800|900)\\d{3})\\d{3}[-.]\\d{3}[-.]\\d{4}
4657 : failed : failed : 0.517689855 (s) : ^(?!\\s800\\s|\\s900\\s)\\d{3}-[\\d]{4}$
4658 : failed : failed : 0.11940503 (s) : ^[0-9]{3}[1-9]{3}-\\d{4}$
4659 : unparsable : unparsable : 0.051076627 (s) : (^[1-9]\\d?
4660 : failed : failed : 4.325643795 (s) : (?<!800|900)\\\\d{3}\\\\-\\\\d{3}\\\\-\\\\d{4}
4661 : failed : failed : 5.160144435 (s) : ^(?!\\.[^-]*-\\.[^-]*-\\.[^-]*\\.)? [a-zA-Z0-9-_] 
4662 : failed : failed : 0.686636988 (s) : r'^/[A-Za-z0-9-_\\.]+$'
4663 : failed : failed : 1.112095589 (s) : [^_\\-\\.]\\\\/[^_\\-\\.]
4664 : unparsable : unparsable : 0.054838641 (s) : ^\\/[^_\\-]+=|[_\\-]+=|[^_\\-]\\/[^_\\-]+=|[^_\\-]\\/[^_\\-]+=|[^_\\-]\\/[^_
4665 : failed : failed : 1.011243903 (s) : ^[^-_]+$
4666 : failed : failed : 1.031199743 (s) : [^/][^_]{3,64}[^_]
4667 : failed : failed : 24.784798017 (s) : [A-Za-z0-9_-]+
4668 : failed : failed : 0.723517431 (s) : /^[0-9A-Za-z-_]+=([^_]+)$
4669 : failed : failed : 0.122172683 (s) : \\A\\/
4670 : unparsable : unparsable : 0.088754242 (s) : .*\\/[^
4671 : failed : failed : 4.065897439 (s) : (?<=\\w)\\s?[a-z]+(?=$|\\s)
4672 : failed : failed : 4.174819458 (s) : (^[a-zA-Z][a-zA-Z0-9 ]+$)
4673 : failed : failed : 0.233113121 (s) : \\b\\w+\\b
4674 : failed : failed : 1.293337406 (s) : ^[a-zA-Z ]+$
4675 : failed : failed : 1.186789593 (s) : [\\w\\s]+
4676 : failed : pumping failed : 324.652454455 (s) : .*\\b\\w+\\b.*
4677 : failed : failed : 0.131445928 (s) : ^[a-zA-Z ]*
4678 : failed : failed : 0.145106278 (s) : [^\\s]
4679 : failed : failed : 11.831687681 (s) : \\b[A-Za-z ]+\\b
4680 : failed : failed : 3.342860898 (s) : ^[a-zA-Z ]*$
4681 : unparsable : unparsable : 0.057008676 (s) : Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]
4682 : unparsable : unparsable : 0.057654785 (s) : Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]
4683 : unparsable : unparsable : 0.092554459 (s) : Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]
4684 : unparsable : unparsable : 0.087202837 (s) : Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]
4685 : unparsable : unparsable : 0.080087293 (s) : Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]
4686 : unparsable : unparsable : 0.064553174 (s) : Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]
4687 : unparsable : unparsable : 0.085808857 (s) : Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]
4688 : unparsable : unparsable : 0.072564696 (s) : Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]
4689 : unparsable : unparsable : 0.082332528 (s) : Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]
4690 : unparsable : unparsable : 0.119363262 (s) : Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the.Net framework, to ensure that the string can be parsed without throwing an exception. The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.This expression fully checks or enforces the [ws][-]{d|[d.]
4691 : unparsable : unparsable : 0.094441422 (s) : \\(?(\\d{3})(\\d{3}-\\d{4})?\\)?
4692 : failed : failed : 0.651300807 (s) : [0-9][-. ]?[0-9a-z]
4693 : unparsable : unparsable : 0.115134683 (s) : (\\+)?(\\d{1,3}\\)?[-\\. ]?(\\d{3})[-\\. ]?(\\d{3})[
4694 : failed : failed : 11.018577987 (s) : ^[^-]+(-[^-]+)[^-]*/?$
4695 : unparsable : unparsable : 0.099592278 (s) : [0-9]{1-3}-[0-9]{3}-[0-9]{4} or (555) 555-12
4696 : unparsable : unparsable : 0.097379173 (s) : (1\\s?[-\\.]?\\s?\\d{3}\\s?[-\\.]?\\d{3}[-\\
4697 : unparsable : unparsable : 0.09372465 (s) : (\\+?\\(?1?1?\\)?[-.]?1?1?)
4698 : failed : failed : 2.948632029 (s) : \\A
4699 failed : unparsable : 0 (s) : Please check your regex.
4700 : failed : failed : 0.787805408 (s) : ^([0-9]{3})([0-9]{3})([0-9]{4})$
4701 : failed : failed : 0.160479427 (s) : (?x)^(\\d{1,2},\\d{4})?$
4702 failed : unparsable : 0 (s) : Please check your regex.
4703 : failed : failed : 0.114924078 (s) : ^\\d{5}\\-\\d{5}$
4704 : failed : failed : 3.329129956 (s) : \\d{2}
4705 : unparsable : unparsable : 0.096083829 (s) : (\\d{3}
4706 : failed : failed : 0.156557772 (s) : ^\\d{5}(\\-\\d{4})?$
4707 : failed : failed : 0.994726993 (s) : ^\\d{1,3}[-\\s]?\\d{2}[-\\s]?\\d{4}$
4708 : failed : failed : 0.867911776 (s) : (?!^\\d{7}$)(?!^\\d{6}$)\\d{3}(?!\\d{4}$|\\d{4}$)\\d\\d\\d
4709 : failed : failed : 0.183465431 (s) : ^[A-Z]{2}\\d{5}$
4710 : failed : failed : 42.021258318 (s) : [a-zA-Z]{1,3}\\d{5}
4711 : failed : failed : 0.426269099 (s) : (\\d{2})([+-])(\\d{2})([+-])(\\d{2})([+-])(\\d{2})([+-])(\\d{2})(\\d{2})([+-])(\\d{2})(\\d{2})
4712 : unparsable : unparsable : 0.081065735 (s) : (^[0-9]{1,
4713 : unparsable : unparsable : 0.072226352 (s) : /\\A(-?
4714 : unparsable : unparsable : 0.109628703 (s) : ^([0-9]{2
4715 : failed : error init : 0.10543006 (s) : (?<![\\d\\-])
4716 : unparsable : unparsable : 0.079554175 (s) : (?<!\\d)\\(.*
4717 : failed : error init : 0.113212514 (s) : ^
4718 : failed : failed : 0.159101256 (s) : ^(0?[1-9]|[12][0-9]|3[01])/(1[012])$
4719 : unparsable : unparsable : 0.103899073 (s) : '([0-9]{4}\\)-([0-9]{2})-([0-9]{2})T([0-9]{2
4720 : failed : failed : 0.13034176 (s) : import re
4721 : failed : failed : 0.572511585 (s) : /^\\d{0,2}
4722 : failed : failed : 0.173228591 (s) : ^[0-9]{1,2}\\.[0-9]{1,2}\\.[0-9]{1,2}$
4723 : failed : failed : 0.152400538 (s) : [0-9]||[1-9][0-9]||[0-9][0-9]||[0-9]{4}||[0-9]{3}||[0-9][0-9]||[0-9]{2}||[0-9]{1}
4724 : failed : error init : 0.107757148 (s) : ^
4725 : failed : error init : 0.105149795 (s) : ^
4726 : failed : failed : 0.156917576 (s) : [0-9]+
4727 : failed : failed : 1.198908647 (s) : [0-9]{1,3}
4728 : failed : failed : 0.413213962 (s) : re.compile(r'^[0-9]{1,2}\\s?[0-9]{1,2}\\s?[0-9]{1,2}\\s?[0-9]{1,2}\\s?[0-9]{1,2}$')
4729 : failed : failed : 0.637681233 (s) : (\\d+)
4730 : failed : failed : 1.070151855 (s) : ^[1-9][0-9]{0,2}$
4731 : failed : failed : 2.818661684 (s) : /^
4732 : failed : failed : 0.473079927 (s) : ^\\d+(\\.\\d\\d?)?$
4733 : failed : failed : 57.212658073 (s) : [0-9][0-9]?[0-9]?\\.?[0-9]*$
4734 : failed : failed : 0.147396297 (s) : ^[1-9][0-9]?
4735 : failed : pumping failed : 44.751684 (s) : (^-)?([0-9]{0,2}(\\.0+)?(,[0-9]{0,2})*$)
4736 : unparsable : unparsable : 0.074741633 (s) : \"^(?P<currency>[+-]?[0-9]{2,}
4737 : failed : failed : 1.168488111 (s) : /^^
4738 : failed : failed : 0.720430731 (s) : /^[0-9]+
4739 : failed : failed : 1.627700199 (s) : /(?<!^)[\\d.-]\\d{0,2}
4740 : failed : failed : 0.448622569 (s) : ^[0-9.]{1,2}(,[0-9.]{1,2})*$
4741 : failed : failed : 0.237375383 (s) : -\\d{3}-\\d{3}-\\d{4}
4742 : failed : failed : 0.127996639 (s) : import re
4743 : failed : error init : 0.115837679 (s) : (?<!\\d)
4744 : failed : failed : 1.296115378 (s) : (?<!^)\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}$
4745 : unparsable : unparsable : 0.067188558 (s) : ([a-z\\s]*)?[a-z\\s]+(\\(\\d{3}\\)\\s\\d{3}\\)\\s\\d{4}).*
4746 : failed : failed : 0.575729191 (s) : \"^[A-Za-z0-9-_\\(\\)]*$\"
4747 : failed : failed : 5.542844856 (s) : ^[^\\s]*$
4748 : failed : failed : 0.32124556 (s) : [^0-9]
4749 failed : unparsable : 0 (s) : Please check your regex.
4750 : failed : failed : 0.932147485 (s) : (\\d{3}\\d{3}\\d{4})
4751 : failed : failed : 1.359252439 (s) : ^(\\w+) +([^,]*,[^,]*)*
4752 failed : unparsable : 0 (s) : Please check your regex.
4753 : unparsable : unparsable : 0.093664768 (s) : ([a-zA-Z0-9\\.-_+\\(\\)@\\[\\]\\/\\.
4754 : failed : failed : 0.581269245 (s) : ^[\\w\\.?!\\[\\]]+$
4755 : failed : failed : 112.900758364 (s) : (?<=^|\\s)([a-z]{1,})(?=[^a-z]|\\s$)(?!.*[^a-z]).
4756 : failed : failed : 10.013027888 (s) : (^|[^pP]){4}([^pP]|$)
4757 : failed : failed : 4.629412798 (s) : (?i)(?=[^-\\,\\s]+)
4758 : unparsable : unparsable : 0.066972494 (s) : \\[.*?\\] or [.*?[^]]*
4759 : failed : failed : 4.618525079 (s) : [a-zA-Z0-9. -]+
4760 failed : unparsable : 0 (s) : Please check your regex.
4761 : failed : error init : 0.096754173 (s) : ^
4762 failed : unparsable : 0 (s) : Please check your regex.
4763 : failed : failed : 0.187604652 (s) : ^(\\d{4})(,\\d{4})(,\\d{4})(,\\d{4})$ 4. Validates a string that matches the following specificatio
4764 : failed : failed : 0.153994312 (s) : ^[0-9]{4}$
4765 : failed : failed : 14.917558506 (s) : [0-9]{4}\\-[0-9]{2}\\-[0-9]{2}\\-[0-9]{4}
4766 : failed : failed : 0.734256592 (s) : \\d{4}
4767 : failed : failed : 0.214783588 (s) : ^\\d{4}(\\,\\d{4})?$
4768 : failed : failed : 0.699340667 (s) : \\d{4}
4769 : failed : failed : 0.121280772 (s) : ^[0-9]{1,4}, [0-9]{1,4}$
4770 : failed : failed : 0.67476141 (s) : (\\d{4}),
4771 : failed : failed : 0.116345661 (s) : [02/29/2001, 02/28/2002, 02/30/2003, 02/29/2004, 02/30/2005, 02/31/2006, 03/01/2007, 03/02/2008]
4772 : failed : failed : 0.678212072 (s) : \\d{2}/\\d{2}/\\d{4}
4773 : failed : failed : 0.810140874 (s) : (?<month>0[1-9]|1[012])\\/(?<day>0[1-9]|1[012])\\/(?<year>.+)\\b
4774 : failed : failed : 1.284366607 (s) : (MM/DD/CCYY)\\/[0-9]+\\/[0-9]+\\/(2000|2005|2008)
4775 : failed : failed : 0.170243341 (s) : ^[0-9]{2}/[0-9]{2}/[0-9]{4}([0-9]{2})-([0-9]{2})$
4776 : failed : failed : 2.602078326 (s) : \\b(0[1-9]|1[012])/(0[1-9]|1[012])\\b\\b
4777 : failed : failed : 0.700936516 (s) : ^[0-1]?[0-9]{3}/[0-1]?[0-9]{2}/[0-9]{4}(?!00)$
4778 : failed : failed : 6.048345355 (s) : (^[1-9]|1[012]|[1-9][0-9])/([0-9]{2})/([0-9]{4})$
4779 : failed : failed : 0.690123227 (s) : \\d{2}/\\d{2}/\\d{4}
4780 : failed : pumping failed : 546.221148647 (s) : (.*\\d{2}\\/\\d{2}\\/\\d{4}\\s\\d{2}\\/\\d{2}\\/\\d{4}\\s\\d{2}\\/\\d{2})
4781 : failed : failed : 0.173905108 (s) : \\b(19[2-9]|1[012])-\\d{4}-\\d{2}-\\d{2}\\b
4782 : failed : error init : 0.112577254 (s) : ^
4783 : failed : pumping failed : 38.837622026 (s) : (.*)([1-2][0-9]|3[01])-(3[0-1]|0[1-9])([1-9]|0[0-9])\\+[1-2][0-9]
4784 : failed : failed : 5.443048696 (s) : [0-9]{2}-[0-9]{2}-[0-9]{4}[0-9]-[0-9]{1,2}[0-9]{1,2}
4785 : failed : failed : 4.396923044 (s) : (0|[1-9][0-9]|1[012])-(0|[1-9][0-9]|[12][0-9])\\\\-\\\\d{4}
4786 : failed : failed : 0.166977956 (s) : ^(?=.{4}$)^\\d{2}-\\d{2}-\\d{4}$
4787 : failed : failed : 0.677426691 (s) : \\d{2}?-\\d?-\\d{4}
4788 : failed : failed : 0.21476888 (s) : [0-9]{4}-[0-9]{2}-[0-9] {3}  [04][0-9] (1995|2008)
4789 : failed : failed : 0.450167842 (s) : (MM-DD-CCYY)
4790 : unparsable : unparsable : 0.056222783 (s) : [^0-9]+?-(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})
4791 : failed : failed : 14.479094561 (s) : [-a-z0-9]{1,32}(?=\\.|$)
4792 : failed : failed : 1.213122835 (s) : /[-a-zA-Z0-9]+
4793 : failed : failed : 1.305212723 (s) : /[a]p[a]p[a]+ [t\\w\\d\\s\\d\\s]*[p\\p]
4794 : unparsable : unparsable : 0.098113098 (s) : ^[a-zA-Z0-9!@#$%^&*()_+\\-=\\\\/][a-zA-Z0-9!@#$%^&*()_+\\-=\\\\/]$
4795 : failed : failed : 1.006486934 (s) : /([a-zA-Z0-9_]+)([a-zA-Z0-9_-]+(?=(\\?|\\=))?)
4796 : success : mutate : 2.638963318 (s) : ^[a-zA-Z0-9]((\\?|\\#)([a-zA-Z0-9]+)*)([^a-zA-Z0-9]?)$
4797 : unparsable : unparsable : 0.059282995 (s) : ^(http
4798 : failed : failed : 25.581740726 (s) : ^(?!.*?_[0-9]+$)[0-9a-zA-Z-_.][0-9]{2,}$
4799 : failed : failed : 0.187078777 (s) : /regex/ ```pythonimport reurl = \"htt
4800 : failed : failed : 1.896203603 (s) : /foo_[a-z]+
4801 : unparsable : unparsable : 0.07737831 (s) : (http
4802 : unparsable : unparsable : 0.107932346 (s) : ^\\/?[a-zA-Z0-9-.
4803 : failed : failed : 12.080364197 (s) : ^[a-zA-Z0-9\\-\\_\\.]+\\.\\w+$
4804 : failed : failed : 1.406069791 (s) : /^
4805 : unparsable : unparsable : 0.096480441 (s) : This one is quite simple, just search for \"^http[s
4806 : failed : error init : 0.126628867 (s) : ^
4807 : failed : failed : 0.249392647 (s) : r'^[a-zA-Z0-9-]+[.]([a-zA-Z0-9-]+[.])*([a-zA-Z0-9-]+[.])*[a-zA-Z0-9-]+$'
4808 : unparsable : unparsable : 0.076334946 (s) : ^@[^\\s
4809 failed : unparsable : 0 (s) : Please check your regex.
4810 : failed : pumping failed : 339.305496622 (s) : (.*)   # Anything /
4811 : unparsable : unparsable : 0.078362482 (s) : ^(?=.|0)*(?=.|0|1|2|3|4|5|6|7|8|9|0).*\\d{{1,2}}$
4812 : failed : failed : 0.151326336 (s) : r'\\b
4813 : failed : failed : 0.194609809 (s) : ^(39|40|41|42|43|44|45|46|47|48|49)(\\d|\\D){2,4}$
4814 : failed : failed : 1.417142805 (s) : RegEx. ^(40[0-9]|[1]?[0-9]?)$|^(50[0-9]|[1]?[0-9])$
4815 : failed : failed : 2.459826363 (s) : [1, 19]
4816 : failed : error init : 0.164387735 (s) : ^
4817 : failed : failed : 4.9585148 (s) : 39(?=<=\\.)50
4818 : failed : failed : 0.898546634 (s) : \"\\d{1,4}
4819 : failed : failed : 1.765778958 (s) : (\\d)(\\d+)(\\d+)(\\d+) (40)(49)(50)
4820 : failed : failed : 0.41866499 (s) : r'^\\d{1,3}\\s?(40?|49?)$'
4821 : unparsable : unparsable : 0.063612041 (s) : // this is the validator expression    Regex ValidatorString = new Regex(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[\\._]).*[a-zA-Z0-9
4822 : failed : failed : 2.687428826 (s) : (?<![^a-zA-Z0-9\\s])[a-zA-Z0-9\\s]{8,}
4823 : failed : failed : 0.133479476 (s) : ^[a-zA-Z0-9\\-_]+$ Exercise
4824 : failed : failed : 0.664001541 (s) : ^[\\x00-\\x0F\\x7F-\\xFF]+$
4825 : failed : failed : 0.119145444 (s) : [^\\[\\]]
4826 : failed : failed : 2.173531593 (s) : ^#{0,36}(.|$)*
4827 : unparsable : unparsable : 0.070609124 (s) : ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[+-*/])[0-9a-zA-Z+-*/]$
4828 : failed : error init : 0.136138735 (s) : (?<!\\S)
4829 : failed : failed : 1.771752064 (s) : [^<\\/><#?&{}]
4830 : failed : failed : 20.099941124 (s) : [0-9a-fA-F]+$
4831 : failed : failed : 0.641309617 (s) : \\d+,\\d+\\.\\d+
4832 : failed : failed : 0.176936655 (s) : .{1,2}
4833 : failed : failed : 21.864724077 (s) : ([0-9]{2}, )+
4834 : unparsable : unparsable : 0.107105617 (s) : ^(?P<a>\\d)
4835 : unparsable : unparsable : 0.089224263 (s) : \"^\\d{1,3}(.\\d{1,3}){,2}\"
4836 : unparsable : unparsable : 0.087957702 (s) : The RegEx is r'(?P<num1>\\d+),(?P<num2>\\d+)%'```
4837 : failed : failed : 23.763409337 (s) : .{3}(?=\\d)
4838 : failed : pumping failed : 31.892415874 (s) : [^|]*\\d+(\\.\\d+)?%
4839 : failed : pumping failed : 77.208181242 (s) : .*\\.(\\d{2}).*
4840 : failed : pumping failed : 155.876347086 (s) : .*percentage ([0-9]+)%$
4841 : failed : failed : 0.516073368 (s) : r'^ftp\\(s?\\)?\\..+$'
4842 : failed : failed : 1.940411367 (s) : f
4843 : failed : failed : 0.892967577 (s) : ftp\\/|http\\/|https\\/
4844 : failed : failed : 2.37980317 (s) : f
4845 : failed : failed : 0.607739474 (s) : ftp|http|https
4846 : failed : failed : 2.963961906 (s) : f
4847 : failed : failed : 157.692599953 (s) : (ftp|http|https).{4,200}\\b [ftp-]\\.[a-zA-Z0-9_-]*
4848 : failed : failed : 0.129636038 (s) : ftp       http?
4849 : unparsable : unparsable : 0.080157945 (s) : (ftp|http|http
4850 : failed : failed : 0.534335827 (s) : ^ftp|http|https
4851 : failed : failed : 1.379913549 (s) : ATU[0-9]{5}[A-Z]{2}[0-9]{6}
4852 : failed : pumping failed : 321.908010612 (s) : (.*)atu12345678$
4853 : failed : failed : 1.931757713 (s) : (ATU)(\\d{5})(\\d{6})
4854 : failed : failed : 1.693661258 (s) : (ATU[ ]?[0-9]{5}[ ]?[0-9]{5}[ ]?[0-9]{5}[ ]?)
4855 : failed : failed : 0.507944836 (s) : ^ATU[^0-9]*(\\d+)$
4856 : failed : failed : 24.939628345 (s) : ([0-9]{3})[0-9]{3}-[0-9]{3}-[0-9]{3}
4857 : failed : failed : 3.759174624 (s) : (ATU[A-Z]{3})-[0-9]{6}
4858 : failed : failed : 0.20284423 (s) : ATU[0-9]{6}The number of digits is 6, a 6, a 1, a 2, a 3, a 4, a 5, a 0, and finally a 0.It is just like finding the same number of 0s, 4s, 3s, 2s, 1s and 6s, and the last is 0.If you find 6 1s, for example, you know that there will be a 6 followed by
4859 : failed : error init : 0.085476866 (s) : (?<=^|\\\\s)(?=(.*\\\\s)ATU)(\\\\s)(.*)$ Explanation^ - match only at the start of the string(?<=^|\\s) - a positive lookbehind to ensure that what is matched before is either a space or a start of the string(?=(.*\\\\s)ATU) - a positive lookahead that requires a space and one ATU(\\\\s)
4860 : failed : failed : 2.532819682 (s) : (ATU\\d{5}(\\d{4}))
4861 : failed : failed : 0.316920681 (s) : (\\d+)[(]\\d{3}-\\d{4}[)]What is the correct regex to extract values of the input file?
4862 : failed : failed : 0.81602341 (s) : \\d{9}
4863 : failed : failed : 11.039269284 (s) : ^[^-]*-?[^-]*$
4864 : failed : failed : 1.200894736 (s) : BG\\d{3,9}
4865 : failed : failed : 1.438277192 (s) : (\\d{1,3})([A-Za-z])
4866 : unparsable : unparsable : 0.133050453 (s) : ([Bg]{8})([0-9]{7})([0-9]{4})([0-9]{1})([0-9]{3})([0-9]{2})([0-9]{9})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]
4867 : failed : failed : 2.940161827 (s) : (VG|v|G)([0-9]{1,9}[0-9]{1,9}[0-9]{1,9}[0-9]{1,9}[0-9]|[0-9]{16})
4868 : failed : failed : 0.887020239 (s) : (?i)(?<name>\\w+)(?<number>\\d+)(?<vat>\\d+)
4869 : failed : failed : 1.532115115 (s) : (BG\\d)\\d{9}
4870 : failed : failed : 0.974460131 (s) : ^\\d{8}$
4871 : failed : failed : 0.424682758 (s) : ^(\\d{1,2})/m|^(\\d{1,2})/d|^(\\d{4})
4872 : failed : failed : 0.525409421 (s) : (\\d{1,2}/\\d{1,2}/\\d{4,6}|\\d{1,2}/\\d{1,2}/\\d{4}|\\d{4,6}/\\d{1,2})
4873 failed : unparsable : 0 (s) : Please check your regex.
4874 : unparsable : unparsable : 0.079809012 (s) : \\d{2}/\\d{2}/\\d{4} (or \\d{4}/\\d{2}/\\d{2} | \\d{2}/\\d{2}/\\d{4}| \\d{4}/\\d{2}/\\d{2}| \\
4875 : failed : failed : 14.868150002 (s) : (\\d{1,2}|3[0-9])(\\/|-|\\/|\\.)?(\\d{1,2}|3[0-9])(\\/|-|\\/|\\.)?(\\d{1,2}|3[0-9])(\\/|-|\\/|\\.)*
4876 : unparsable : unparsable : 0.125697874 (s) : [\"(1[1-9]|[2-9]\\d|3[0-2])\\/(0[1-9]|[1-2]\\d|3[0-8])\\/(0[1-9]|1[012])\" | \"([1-9]|[1-2]\\
4877 : unparsable : unparsable : 0.076210483 (s) : (    ^[a-zA-Z0-9]{2,30}    [.]    [0-9]{1,2}    [0-9]{1,2}    [0-9]{1,2}    [0-9]{1,2}
4878 : failed : failed : 0.123102614 (s) : ```pythonimport re
4879 : unparsable : unparsable : 0.097912332 (s) : ^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|[12][0-9]|3[01])[ 
4880 : failed : failed : 0.274494683 (s) : ^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(\\d{4})/(0[1-9]|[12][0-9]|31)/(\\d{1,2})?[AP]M$
4881 : failed : failed : 1.456419726 (s) : \\w
4882 : failed : failed : 2.759324318 (s) : [a-zA-Z0-9_]+
4883 : failed : failed : 7.778151129 (s) : (?i)\\b[A-z0-9\\s]{1,30}\\b
4884 : failed : failed : 0.752407592 (s) : [a-zA-Z0-9]{3,}
4885 : failed : failed : 20.219011807 (s) : (\\[\\w+\\] | [\\w\\s]+ | [\\w-]+ )
4886 : failed : failed : 2.207739922 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$
4887 : failed : failed : 0.465495155 (s) : \\w+            
4888 : failed : failed : 0.644343869 (s) : ^[a-zA-Z0-9]*$
4889 : failed : failed : 4.713810632 (s) : ^[a-zA-Z0-9_]*$
4890 : failed : failed : 0.766965523 (s) : \\d{1,2}[a-zA-Z0-9]{0,3}
4891 : unparsable : unparsable : 0.08653137 (s) : (([a-zA-Z0-9][a-zA-Z0-9_]*){1,}|[a-zA-Z0-9][a-zA-Z0-9_][a-zA-Z
4892 : failed : failed : 21.355675994 (s) : [A-Za-z][A-Za-z_]*\\([^)]+\\)$
4893 : failed : failed : 30.367607522 (s) : [a-zA-Z][a-zA-Z0-9_\\-]*[a-zA-Z]\\B
4894 : failed : failed : 9.420820931 (s) : _[a-zA-Z0-9_.-]*
4895 : failed : failed : 0.150043003 (s) : ^[a-z][\\w-]*
4896 : failed : failed : 0.371537066 (s) : (?<!^)  // negative lookbehind, assert that what is to the left is not the start of the line    (?<=^|_)[a-zA-Z0-9_-]*  // negative lookahead, match alphan
4897 : unparsable : unparsable : 0.086606421 (s) : /^[a-z][a-z0-
4898 : unparsable : unparsable : 0.080802883 (s) : (?<!_)[a-zA-Z][a-zA-Z0-9_]*(?<!-)[a-zA-Z][a-zA-Z0-9_]*(?<!\\.|
4899 : failed : failed : 0.15577651 (s) : <docume
4900 failed : unparsable : 0 (s) : Please check your regex.
4901 : failed : failed : 0.12840841 (s) : ^[1-9][0-9]{0,3}$
4902 : failed : error init : 0.120630755 (s) : ^
4903 : failed : failed : 0.719643907 (s) : (\\d{4})(-\\d{3})?
4904 : failed : failed : 0.791631793 (s) : \\d{3}
4905 : failed : failed : 0.79046585 (s) : r\"^[1000-9999]\\d{4}$\"
4906 : failed : failed : 0.334065918 (s) : \\b1000\\d{4}\\b
4907 : failed : failed : 0.76823491 (s) : [0-9]{4}
4908 : failed : failed : 0.664026909 (s) : \\b(\\d{4})?\\D*
4909 : failed : failed : 0.263660715 (s) : ^1000.*$
4910 : failed : failed : 0.136757735 (s) : ^[010]\\d{3}$
4911 : failed : failed : 0.28564293 (s) : Get the style attribute inner text contained inside \" or'caracters with the \"style=\" prefix.Generate a RegEx for this description. Answ
4912 : failed : failed : 0.299690425 (s) : Get the style attribute inner text contained inside \" or'caracters with the \"style=\" prefix.Generate a RegEx for this description. Answ
4913 : failed : failed : 0.403816935 (s) : Get the style attribute inner text contained inside \" or'caracters with the \"style=\" prefix.Generate a RegEx for this description. Answ
4914 : failed : failed : 0.244993078 (s) : Get the style attribute inner text contained inside \" or'caracters with the \"style=\" prefix.Generate a RegEx for this description. Answ
4915 : failed : failed : 0.253948708 (s) : Get the style attribute inner text contained inside \" or'caracters with the \"style=\" prefix.Generate a RegEx for this description. Answ
4916 : failed : failed : 0.372412506 (s) : Get the style attribute inner text contained inside \" or'caracters with the \"style=\" prefix.Generate a RegEx for this description. Answ
4917 : failed : failed : 0.370850701 (s) : Get the style attribute inner text contained inside \" or'caracters with the \"style=\" prefix.Generate a RegEx for this description. Answ
4918 : failed : failed : 0.241808324 (s) : Get the style attribute inner text contained inside \" or'caracters with the \"style=\" prefix.Generate a RegEx for this description. Answ
4919 : failed : failed : 0.190252671 (s) : Get the style attribute inner text contained inside \" or'caracters with the \"style=\" prefix.Generate a RegEx for this description. Answ
4920 : failed : failed : 0.320277487 (s) : Get the style attribute inner text contained inside \" or'caracters with the \"style=\" prefix.Generate a RegEx for this description. Answ
4921 : failed : failed : 0.861456818 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
4922 : failed : failed : 0.64690762 (s) : (\\d{2}\\/\\d{2}\\/\\d{4})\\s
4923 : failed : failed : 0.892022667 (s) : (?=\\d{2}\\/\\d{2}\\/\\d{4})(\\d{1,2})/(\\d{1,2})/(\\d{4})
4924 : failed : failed : 0.168478536 (s) : ^\\d{2}/\\d{2}/\\d{4}$
4925 : failed : failed : 3.13950468 (s) : \\b(?=\\d{2}/\\d{2}/\\d{4})\\b
4926 : failed : failed : 0.467321464 (s) : @[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}\"\"\"
4927 : failed : failed : 1.040637175 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
4928 : failed : failed : 0.659217041 (s) : (\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})
4929 : failed : failed : 0.303774544 (s) : ^(0|1[1-9]|2[0-2])\\/(0|1[3-9]|2[0-9])\\/(19[0-2],19[0-9])$
4930 : failed : failed : 0.872142159 (s) : (\\d{2}\\/\\d{2}\\/\\d{4}).{2}
4931 : unparsable : unparsable : 0.076085308 (s) : (?i)(?
4932 : failed : failed : 3.789305979 (s) : (?<=//.).*
4933 : unparsable : unparsable : 0.099979232 (s) : (?
4934 : failed : pumping failed : 116.447268008 (s) : ([^/]+)($2/$3)
4935 : failed : failed : 0.739336103 (s) : (\\S+\\/\\S+)
4936 : failed : failed : 14.900158903 (s) : ~([^/]+)\\.com/
4937 : failed : failed : 10.605087849 (s) : (\\w+\\/){1}[^\\s]*$
4938 : failed : failed : 0.205705378 (s) : $2(.*)\\/$3
4939 : failed : failed : 0.965426084 (s) : $1
4940 : failed : failed : 5.723113971 (s) : (\\w+\\.\\w+)\\/(\\w+)
4941 : failed : failed : 2.014430748 (s) : my
4942 : failed : error init : 0.122376895 (s) : ^
4943 failed : unparsable : 0 (s) : Please check your regex.
4944 : unparsable : unparsable : 0.110755743 (s) : [
4945 failed : unparsable : 0 (s) : Please check your regex.
4946 failed : unparsable : 0 (s) : Please check your regex.
4947 failed : unparsable : 0 (s) : Please check your regex.
4948 : failed : failed : 0.573174416 (s) : /
4949 failed : unparsable : 0 (s) : Please check your regex.
4950 failed : unparsable : 0 (s) : Please check your regex.
4951 failed : unparsable : 0 (s) : Please check your regex.
4952 : failed : failed : 0.094544335 (s) : ^[+-]?
4953 : unparsable : unparsable : 0.058409378 (s) : (\\d{1,2}\\.\\d{1,2}
4954 : failed : error init : 0.108894277 (s) : ^
4955 : failed : failed : 4.970353079 (s) : \\d+\\.\\d{1,2}[\\, ]\\d{1,2}
4956 : failed : failed : 1.296088488 (s) : \\d{1,3}(\\.\\d{1,2})?
4957 : failed : failed : 1.137311518 (s) : \\d{1,2}\\.\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}
4958 : failed : failed : 0.179145551 (s) : 0,000.00
4959 : failed : failed : 0.223070064 (s) : ^[0-9]*\\.[0-9]{0,2}$
4960 : failed : failed : 0.150032964 (s) : ^\\d{3}\\.\\d{1,2}[\\.]?\\d{0,2}$
4961 : failed : failed : 38.946563723 (s) : .{0,3}/\\d{1,2}/\\d{4}
4962 : failed : failed : 0.996967709 (s) : \\b(0?[1-9]|1[012])/(0?[1-9]|[12])/\\d{4} [0-9]{2}/\\d{2}\\b
4963 : failed : failed : 0.822622607 (s) : \\d{2}\\d{2}\\d{4}
4964 : unparsable : unparsable : 0.076277588 (s) : [0-9]{2}/[0-9]{2}/[0-9][0-9][0-9]|[0-9]{2}/[0-9]{2}/[0-9][0-9]|[0-9]{4}/[0-9]{2}/[
4965 : failed : failed : 0.22014116 (s) : ^(0[1-9]|1[012])/(0[1-9]|[12][0-9])/2000\\.(0[1-9]|1[012])$
4966 : failed : failed : 0.452588505 (s) : ^(\\d{2})\\s*-\\s*(\\d{2})\\s*-\\s*(\\d{4})$
4967 : failed : failed : 0.590853533 (s) : \\d{2}\\/\\d{2}\\/\\d{4}\\s\\d{2}\\/\\d{2}\\s\\d{4}
4968 : unparsable : unparsable : 0.085234782 (s) : ^(0[1-9])|(1[0-2])|(2[0-3])|(3[0-1])|(4[0-9])|(5[0-9])|(6[0-9])|(7[0-9])|(8[0-9])|(9[0-
4969 : unparsable : unparsable : 0.074033567 (s) : \\b(January|February|March|April|May|June|July|August|September|October|November|December)\\s[1-9][0-9]?|\\d{
4970 : failed : failed : 0.271832238 (s) : (0[1-9]|1[012])\\/(0[1-9]|[12][0-9]|3[01])\\/(20[0-9]|20[0-9]-[0-3][0-9])([0-9])It's not quite working though.Questi
4971 : unparsable : unparsable : 0.053185125 (s) : ([01]\\d\
4972 : unparsable : unparsable : 0.069559108 (s) : (0\\.[0-9]\\d\
4973 : unparsable : unparsable : 0.078124557 (s) : \\d{
4974 : unparsable : unparsable : 0.060213697 (s) : /^(?=(\\d{2}
4975 : unparsable : unparsable : 0.073669034 (s) : 0[1-9][0-
4976 : unparsable : unparsable : 0.060425755 (s) : \\d{
4977 : unparsable : unparsable : 0.096882805 (s) : [\\d][\\
4978 : unparsable : unparsable : 0.054929442 (s) : '\\d{
4979 : unparsable : unparsable : 0.081677531 (s) : (2[0-2]\\d|[1-9]\\d|[012]
4980 failed : unparsable : 0 (s) : Please check your regex.
4981 failed : unparsable : 0 (s) : Please check your regex.
4982 failed : unparsable : 0 (s) : Please check your regex.
4983 : unparsable : unparsable : 0.065602959 (s) : /^\\d{1,
4984 : unparsable : unparsable : 0.104285066 (s) : (.
4985 : unparsable : unparsable : 0.055636005 (s) : [0-9]{
4986 : unparsable : unparsable : 0.067842452 (s) : (\\d\\
4987 : unparsable : unparsable : 0.066458862 (s) : [0-9]{1,
4988 failed : unparsable : 0 (s) : Please check your regex.
4989 : unparsable : unparsable : 0.07867599 (s) : {
4990 : unparsable : unparsable : 0.068411539 (s) : [0-9
4991 : failed : failed : 1.463362287 (s) : (?<![^a-zA-Z0-9])[a-zA-Z0-90-9-]{4,13}([a-zA-Z0-9])
4992 : failed : failed : 0.125586555 (s) : /^
4993 failed : unparsable : 0 (s) : Please check your regex.
4994 failed : unparsable : 0 (s) : Please check your regex.
4995 : unparsable : unparsable : 0.053432789 (s) : [0-9]{
4996 : unparsable : unparsable : 0.070413407 (s) : [0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2}\\s*[0-9
4997 : unparsable : unparsable : 0.076157093 (s) : ((1[2-9][0-9]|1[012])[0-9]|[1-9]?[0-9]|[1-2][0-9]|3[01
4998 : unparsable : unparsable : 0.085595067 (s) : \\d{
4999 : unparsable : unparsable : 0.073716844 (s) : /\\d{1,
5000 : failed : error init : 0.10753376 (s) : |    |---|---\\---- \\----|----|----|\\----|----\\---|---\\---- ||   |   |       |   |   |   |   |   |   |   |   ||   |   |       |   |   |   |   |   |   |   |   ||----|----\\------ |----|----|----|----|
5001 : failed : failed : 0.15245484 (s) : ^\\d{4}-\\d{2}-\\d{2}$
5002 : failed : failed : 0.193437735 (s) : ^(0|1)\\\\D*\\\\d{2}\\\\s(0[1-9]|1[012])\\\\D*\\\\d{4}$
5003 : failed : failed : 0.526575505 (s) : \\d+\\/\\d+\\/\\d+
5004 : unparsable : unparsable : 0.086556858 (s) : (0?(1[3-9])|[12][0-9]|3[01]|[68])\\/(0?[1-9]|[12][0-9]|3[01]|[68])\\/(0?[1-9]|[12][0-9]|3[01])[ \\t\\r\\n]*\\/[ \\t\\r\\n
5005 : unparsable : unparsable : 0.116551006 (s) : (\\d{4}[\\-/]\\d{2}[\\-/]\\d{2})
5006 : failed : failed : 0.198490858 (s) : ^([0-9]{2})([A-Z]{2})([0-9]{2})([a-z]+)$
5007 : failed : failed : 0.146526659 (s) : ^[A-Za-z]{1,2}[0-9]{8}[-/.][0-9]{3}$
5008 : failed : failed : 7.247549255 (s) : [0-9]{2}\\-\\d{4}
5009 : unparsable : unparsable : 0.070747122 (s) : (^\\s*\\d{1,2}\\/\\d{1,2}\\/\\d{4} \\d{1,
5010 : failed : failed : 0.83778507 (s) : \\d{2}[A-Za-z]\\d{2}[A-Za-z]\\d{4}\\/\\d{2}\\/\\d{2}
5011 : failed : failed : 1.567770844 (s) : \\b
5012 : failed : failed : 0.112851137 (s) : dd-mm-yyyy
5013 : failed : failed : 0.56715809 (s) : ^\\d{1,2}\\s\\w{3}\\s\\w{2}$
5014 : failed : failed : 1.334521848 (s) : DATE is a full month date, i.e. '01', '02',...., '12'MONTH is the first digit i.e. '1', '2',...., '12'DAY is the 2nd digit i.e. 'T', 'F',...., 'T'YEAR is the last 4 digits i.e. '06', '01',...., '06
5015 : unparsable : unparsable : 0.101740952 (s) : (?<day>\\b\\d\\d\\b)(,(?<month>\\b[A-Z][a-z]{3}\\b)
5016 : failed : pumping failed : 133.659325942 (s) : [0-9]+ days [0-9]+, yr [0-9]+, and [0-9]
5017 failed : unparsable : 0 (s) : Please check your regex.
5018 : failed : failed : 19.10518715 (s) : (0[1-9]|1[012])[-/]0[1-9]|[12]0[0-9]|3[01]\"\"\"import re
5019 : failed : failed : 1.328919939 (s) : (\\d{1,2}|\\d{3}) [a-z]{1,2} [A-Z]{1} [a-z]{1,2}
5020 : unparsable : unparsable : 0.114713745 (s) : (([A-Z]{3} |[a-z]{3} (0[1-9]|1[012][0-9]|[1-9]0) ) (0[1-9]|[12][0-9]|3[01]) [0-9]{4})?? (0[1-9]|1[012][0-9]|
5021 : failed : failed : 0.615980686 (s) : \\d\\s[A-Z]{3}\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s
5022 : unparsable : unparsable : 0.094015896 (s) : (\\w+
5023 : failed : failed : 0.628894579 (s) : (1)\\b
5024 : failed : failed : 0.175380661 (s) : (\\\\d{2})[A-Z]{2}     # month\\\\s(\\\\d{4})[A-Z]{2}     # day\\\\s(\\\\d{4})\\\\s(\\\\d{2})     # year
5025 : failed : failed : 0.157232416 (s) : ^[0-9]{1,2}[a-z]{1,2}[0-9]{4}$
5026 : failed : failed : 1.553887947 (s) : \\b([0-9]{1,2})\\s*[M|d|h|m|d|H|M]\\s*\\d{4}\\b
5027 : failed : failed : 0.119283473 (s) : ^[0-9]{2}
5028 : failed : pumping failed : 47.922690711 (s) : (\\s*).*?(\\s*\\d\\d\\d\\d\\d)\\s*(\\-|\\s*-|\\s*\\+\\s*\\d\\d\\d\\d\\d).*?(\\s*\\d\\d\\d\\d\\d\\d)\\s*
5029 : failed : failed : 20.779725891 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2}[1-3] [A-Z][1-9][0-9]
5030 : failed : failed : 0.741858867 (s) : dd[mmM]yy
5031 : failed : failed : 0.300709554 (s) : d[0-9]{2}[a-z]{3}[0-9]{4}$The answer is d[0-9]{2}[a-z]{3}[0-9]{4}\\Z.
5032 : failed : failed : 0.443201717 (s) : \\d{1,2}/\\d{1,2},\\d{4}/\\d{2},\\d{4} (2006)
5033 failed : unparsable : 0 (s) : Please check your regex.
5034 : failed : error init : 0.107448229 (s) : ^
5035 : failed : failed : 0.174006258 (s) : [^A-Za-z0-9 ]
5036 : failed : failed : 1.307175329 (s) : \\b(?i)^
5037 : failed : failed : 0.685358013 (s) : \\D+\\d{1}\\d{3} i.e.*\\D+\\d{3}\\d{2} (2012)
5038 : unparsable : unparsable : 0.05692575 (s) : [0-9]{1,2}\\s{0,2}\\s{1,2}\\s{1,2}\\s{1,2}\\s{1,2}\\s{1,2}\\s{1,2}\\s{1,2}\\s{1,2}\\s{1,2}\\s{1,2}\\s\\d{1,2}\\s{1,2
5039 : failed : failed : 3.472134188 (s) : \\d{1,2}
5040 : unparsable : unparsable : 0.061470541 (s) : [[0-9]{2}[0-9]|1[0-2])([0-9]{3})([0-9]{4})([0-9]{2}|[0-9]{2})([0-9]|[0-9]|[0-9][0-9])$
5041 : failed : failed : 5.778321885 (s) : [^\"]*\"?
5042 : failed : failed : 16.111930197 (s) : (?<![\"'])(?<!')\\s+|\\s+(?![\"'])(?!')
5043 : unparsable : unparsable : 0.082473501 (s) : (?<=['])(
5044 failed : unparsable : 0 (s) : Please check your regex.
5045 : failed : failed : 2.195411776 (s) : /
5046 : failed : failed : 5.110407467 (s) : ^\\s*\"(.*?)\"\\s*$
5047 : failed : failed : 13.072016652 (s) : [ \t]*\s+(?>[^']*\s+)
5048 : failed : failed : 25.004101478 (s) : \\s*\"([\\S\\s]+)\"(?!\\s*\"[\\S\\s]*\")|\\s+        Props to killahbeez        
5049 : failed : error init : 0.153260088 (s) : (?<!\\\\)
5050 : failed : failed : 14.129384317 (s) : (?<=').*(?='(?!'))
5051 : failed : failed : 0.855437908 (s) : [Regular expression]
5052 : failed : failed : 74.840545416 (s) : ``` re.compile(r'<iframe.*?src=\"(.+?)\".*?>')```
5053 : failed : failed : 0.141314057 (s) : ```pythonimport reimport os
5054 : failed : failed : 0.143013409 (s) : \"import re
5055 : failed : failed : 85.087744928 (s) : r\"/[^\\\\]*?favicon.ico\"
5056 : unparsable : unparsable : 0.069700923 (s) : (ht
5057 : failed : failed : 1.082184167 (s) : RegEx for RegEX for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for RegEx for
5058 : failed : failed : 0.155406917 (s) : import rebase64_code = 'da
5059 : failed : failed : 0.213860379 (s) : ^[a-zA-Z0-9_.-]{5,20}$
5060 failed : unparsable : 0 (s) : Please check your regex.
5061 : failed : failed : 0.735003059 (s) : latitude|longitude
5062 : failed : failed : 1.812729618 (s) : (\\d{1,2}|-?\\d{1,2}|-?\\d{1,3})
5063 : unparsable : unparsable : 0.05623144 (s) : \\((-?
5064 : failed : failed : 0.349349318 (s) : r'^-?\\d{1,2}\\.?\\d{1,2}[\\.]\\d{1,2}$'
5065 : unparsable : unparsable : 0.072502199 (s) : ^(([0-9]|[1-9][0-9])|([1-9][0-9])
5066 : unparsable : unparsable : 0.090562418 (s) : (?<!-\\s)geometry\\(.*?
5067 : unparsable : unparsable : 0.064991945 (s) : \\(-?[0-9]{0,1}\\.[0-9]{0,1}\\.[0-9]{0,1}\\.[0-9]{0,1}\\(-?[0-9]{0,1}\\.[0-9]{0,1}\\.[0-9]{0,1}\\[0-9]{0,1}\\)
5068 : failed : failed : 0.934518555 (s) : lat[^0-9]
5069 : failed : failed : 0.161326793 (s) : (.{1})([^.?!]*)(\\.([^.]*))?
5070 : unparsable : unparsable : 0.076853127 (s) : [[latitude=-90, latitude=90], [latitude=-90, latitude=0], [latitude=0, latitude=90],... ]
5071 : failed : failed : 7.194892819 (s) : ^[1-9]?[0-9]|2[0-3]|[1-9]
5072 failed : unparsable : 0 (s) : Please check your regex.
5073 : failed : failed : 0.604028273 (s) : (6 hours)^[0-9]
5074 : unparsable : unparsable : 0.103975687 (s) : hh\\d{1,
5075 : unparsable : unparsable : 0.062482836 (s) : /\\/\\d{1}\\/\\d{1,2}\\s(?=\\d{
5076 : unparsable : unparsable : 0.098398432 (s) : (?<!\\d)((?<!p)ap)((?<!a)(?<!m)(?<!s)(?<!o)(?<!e)(?<!n)(?<!t)(?<!i)(?<!r)(?<!d)(?<!c)(?<!f)(?<!l)(
5077 : failed : pumping failed : 71.630791076 (s) : ([0-9]+)I tested my answer. It's correct!
5078 : unparsable : unparsable : 0.069096782 (s) : ^(?P<hh>\\d{1,2})(?P<mm>\\d{2,2})$
5079 : failed : failed : 28.549412399 (s) : (^(?=.*[0-9])|^(?=.*[1-9])|^(?=.*[2-9])([1-2]|3[0-9]|[4-9]))
5080 : unparsable : unparsable : 0.055690748 (s) : /^[0-2][0-9][0-
5081 : unparsable : unparsable : 0.086215028 (s) : <td ***>(*SKIP)(*F)</td>
5082 : failed : pumping failed : 3.857569681 (s) : </td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.*<td>.
5083 : failed : failed : 127.262852456 (s) : <td>(.*)</td>
5084 : failed : failed : 0.270823329 (s) : <td class=\"p_title\"><a href=\"#\" class=\"p_title_link\">#</a></td>
5085 : failed : failed : 89.597630496 (s) : <td>\\(.*?\\)</td
5086 : unparsable : unparsable : 0.073235812 (s) : \\b<td\\s*>(1|[^1]|[^2]|[^3]|[^4]|[^5]|[^6]|[^7]|[^8]|[^9]|[^10]|[^11]|[^12]|[^13]|[^14]|[^15]
5087 : failed : failed : 0.132144046 (s) : <td \\b 
5088 : unparsable : unparsable : 0.115720881 (s) : <td **(.*)**>***</td>\\s*
5089 : failed : failed : 8.224485573 (s) : [^<tr*]]
5090 : failed : failed : 0.267975586 (s) : <td class=\"td-text-text\"><strong>\\s*</strong></td>
5091 : failed : failed : 0.19182271 (s) : ip[0,][1,][2,][3,][4,][5,][6,][7,][8,][9,][0,][1,][2,][3,][4,][5,][6,][7,][8,][9,][0,][1,][2,][3,][4,][5,][6,][7,][8,][9,]\"
5092 : failed : failed : 0.903044607 (s) : (\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})
5093 : failed : failed : 0.368838153 (s) : ^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$
5094 : failed : failed : 0.749877143 (s) : [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}, the answer is (0-9)\\.\\.(0-9)\\.\\.(0-9)\\.\\.(0-9).
5095 : failed : failed : 0.64559399 (s) : \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}-\\d{1,3}-\\d{1,3}-\\d{1,3}-\\d{1,3}
5096 : failed : failed : 0.286515334 (s) : /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/Use the above RegEx to filter out the network traffic.
5097 : failed : failed : 15.50144959 (s) : ^(.*)([0-9]{1,3}\\.){3}[0-9]{1,3}(.*)$
5098 : failed : failed : 0.475414058 (s) : ^([0-9]{0,})\\.([0-9]{0,})\\.([0-9]{0,})\\.([0-9]{0,})$
5099 : failed : failed : 11.235941417 (s) : \\.0\\.(\\d{1,3}\\.){3}\\d{1,3}\\.(\\d{1,3}\\.){3}\\d{1,3}
5100 : failed : failed : 0.486599023 (s) : ^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$
5101 : failed : failed : 0.155731676 (s) : MM/DD/YYYY
5102 : failed : failed : 0.598544835 (s) : \\d{2}/\\d{2}/\\d{4}
5103 : failed : failed : 0.33508165 (s) : \\b(0[1-9][0-9]|1[012]\\d|2[0-4])/(0[1-9]|[12][0-9])/([0-9]+)\\b Explanati
5104 : failed : failed : 1.622433507 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
5105 : failed : failed : 0.475721133 (s) : htt
5106 : failed : failed : 0.6587359 (s) : \\b[A-Z][a-z]{0,2}\\d{1,2}/\\d{1,2}/\\d{4}\\b
5107 : failed : failed : 8.496489351 (s) : ([0-9]{1,2})/([0-9]{1,2})/([0-9]{4})
5108 : failed : failed : 7.017912653 (s) : [0-9][0-9][0-9]/[0-9][0-9][0-9]/[0-9][0-9]
5109 : failed : failed : 0.80202735 (s) : - (?i)^(0*)
5110 : failed : failed : 0.213472702 (s) : \\d\\d/\\d\\d/\\d\\d\\d\\d
5111 : unparsable : unparsable : 0.120885512 (s) : (^[A-Za-z]{2}\\s[A-Za-z]{2}[A-Za-z][A-Za-z0-9\\.
5112 : unparsable : unparsable : 0.076829993 (s) : [a-z][a-z0-9]*[\\s][a-z0-9]*[\\s][a-z0-9]*[\\s][a
5113 : failed : failed : 85.582619859 (s) : [A-Z][a-z]+(?=\\s[A-Za-z]+[a-z]*$)[A-Za-z]*[A-Z]
5114 : unparsable : unparsable : 0.110338382 (s) : (^[a-zA-Z]*[A-Za-z]+[0-9A-Z]{2,3}$)|(^[A-Za-z
5115 : failed : failed : 11.747069644 (s) : @[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z]
5116 : failed : pumping failed : 129.180725458 (s) : [a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$
5117 : unparsable : unparsable : 0.078514507 (s) : (?=.|^)^(?=\\w|\\W|_|\\-|\\?|%|\\+|_|\\.)(?=.|^)^[
5118 : unparsable : unparsable : 0.104087636 (s) : ^[A-Z][a-z]{0,9}\\s[A-Z][a-z]{0,9}\\s[A-Z][a-z]{0,
5119 : failed : failed : 0.443100067 (s) : [a-z][a-zA-Z]
5120 : unparsable : unparsable : 0.069385462 (s) : ^(?=.{2}$)(?=.{2,}$)(?=.{2}[^.])(?=.{2}[^.])(?=.
5121 : unparsable : unparsable : 0.103081522 (s) : var todayDate = new Date(); var dayOfWeek; var tempMonth = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']; if(todayDate.getMonth() == 1) {     dayOfWeek = tempMonth[todayDate.getDate()-1]; } else if(todayDate.getMonth() == 2) {     dayOfWeek = tempMonth[todayDate.get
5122 : failed : failed : 0.58762644 (s) : \"^[0-9]{4}[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$\"
5123 : failed : failed : 48.534745655 (s) : (0|[1-9][0-9])[0-9]{2}(-(0[1-9])|1[012])[0-9]{2}
5124 : failed : failed : 0.806365533 (s) : \\d{4}-\\d{2}-\\d{2}
5125 : failed : failed : 2.00471881 (s) : (19|20|21) (0|1|2) (0|1|2) (3|4|5) (0|1|2) (0|1|2) (0|1|2) (4|5|6)
5126 : failed : failed : 0.147919286 (s) : ^\\d{4}-\\d{2}-\\d{2}$
5127 : failed : failed : 0.11914881 (s) : The date regex would 
5128 : unparsable : unparsable : 0.071547842 (s) : ((\\d{4})\\s?
5129 : failed : failed : 0.143432815 (s) : ```pythondef generate_date_regex
5130 : failed : failed : 0.122081973 (s) : ^\\\\d{4}[\\\\-\\\\/]\\\\d{3}[ \\\\-\\\\/]\\\\d{2}$
5131 : unparsable : unparsable : 0.083594049 (s) : \"a+*\"
5132 : failed : failed : 0.115369272 (s) : var regex = /^\\*(Asterisk)$/;
5133 : unparsable : unparsable : 0.06899938 (s) : ^[^]*(Asterisk)[^]*$
5134 : failed : failed : 1.541554822 (s) : \"^(Asterisk*|Asterisk\\*)*\"
5135 : failed : pumping failed : 351.940975146 (s) : \\*[A-Za-z0-9]*Exercise
5136 : unparsable : unparsable : 0.073152517 (s) : ^(A*)(*(A*[^*]*)*)*$
5137 : failed : failed : 32.84976364 (s) : \\*(\\w+(Asterisk))\\w*
5138 : failed : failed : 3.402333798 (s) : (.*)(\\*)(.*)
5139 : failed : failed : 0.586600618 (s) : \"^[A-z\\s]*(Asterisk)\\s*(Asterisk)$\"
5140 : unparsable : unparsable : 0.068756004 (s) : {0, 2}$ or ^[A-Za-z0-9_]*(?![A-Za-z0-9_]*$).{0, 2}$
5141 : failed : failed : 0.374985815 (s) : ^\\s*(([0-9]\\d*)\\.[0-9]\\d*)\\b(0.005|1\\.00|1.00\\d*|1\\.\\d+)\\b
5142 : failed : failed : 1.155614884 (s) : \\d{1,200}\\/(?=0.005)
5143 : failed : failed : 26.81850404 (s) : [0-9]{3}%(0|[1-9][0-9]*)(\\.[0-9]+)$
5144 : failed : error init : 0.098230829 (s) : ^
5145 : unparsable : unparsable : 0.06470615 (s) : (?P<time>\\d+\\.\\d+\\.\\d+)\\s*?(?P<time_division>0.005)
5146 : failed : failed : 1.433600215 (s) : ([01]\\d{9}|[13]\\d{4}|201\\d\\d|20\\d\\d\\/\\d{2}\\d{2}\\/\\d{2}\\/\\d{2}|20\\d\\d\\/\\d{2}\\d{3}\\d\\d\\d|20\\d\\d\\/\\d{2}\\d{1}\\d{1}\\d{18})
5147 : unparsable : unparsable : 0.073647774 (s) : RegExp(/^\\d+(\\.\\d+)?
5148 : failed : failed : 0.224205081 (s) : [0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[\\d]+   This RegEx should be the only part where the time should be fractional number and divisible by 0.005.
5149 : failed : failed : 1.005831678 (s) : \\d+\\.\\d{5}\\.0(?=\\d+\\.\\d{5}\\.0)
5150 : unparsable : unparsable : 0.10037823 (s) : 0?[0-9]*[0-9]*[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-
5151 : failed : failed : 0.396946278 (s) : r\"^[-?\\d\\.\\? ]*(1|3|5|7)$\"
5152 : failed : failed : 1.873536647 (s) : /^
5153 : failed : failed : 0.206749042 (s) : \\d*
5154 : failed : failed : 0.185633851 (s) : ^^([1-9][0-9]|1[0-9]|2[0-4]|25[0-5])/
5155 : failed : error init : 0.091512408 (s) : ^
5156 : failed : failed : 0.186565927 (s) : ^[0-9]*(.[0-9]*)?
5157 : failed : pumping failed : 83.365471038 (s) : [0-9]+\\.?[0-9]+\\/[0-9]+\\.?[0-9]+\\/[0-9]+
5158 : failed : failed : 16.671239217 (s) : [1-9]?[0-9]/+
5159 : failed : failed : 0.190336247 (s) : ^\\d+\\/\\d+$
5160 : failed : failed : 6.341265232 (s) : ^\\d+(\\.\\d+)?[eE][+-]?\\d*$
5161 : failed : failed : 2.966160142 (s) : \\d+\\.?\\d*
5162 : failed : failed : 1.523086939 (s) : \\B
5163 : failed : failed : 1.157141543 (s) : ^(?=.*[0-9])[0-9]+
5164 : failed : pumping failed : 41.272057601 (s) : \\+?\\d+\\.\\d\\d
5165 : failed : failed : 2.560301535 (s) : [\\d+\\.\\d+]
5166 : failed : failed : 56.40981185 (s) : [\\+\\-]?\\d*\\.?\\d+
5167 : failed : failed : 0.521101925 (s) : ^[0-9]+(.[0-9]+)?$
5168 : failed : failed : 1.373790223 (s) : (0|[1-9]\\d*)((\\.\\d+)?|$)
5169 : failed : failed : 0.240131043 (s) : \\d\\d\\.\\d
5170 : failed : failed : 4.251362825 (s) : ^[0-9]+\\.[0-9]*$
5171 : failed : failed : 0.765515267 (s) : ([0-9]{2,3})(.{0,3}?)([0-9]{2})?
5172 : failed : failed : 0.226385364 (s) : ^[0-9]{1,2}\\.\\d{3}([Ee][e][\\+\\-]\\d{3})?$
5173 : failed : failed : 0.152712652 (s) : [^,.01]{1,4}
5174 : failed : pumping failed : 90.693114829 (s) : ([0-9]*)([,-]([0-9]+(\\.[0-9]+)?)?)
5175 : failed : failed : 0.320966948 (s) : [0-9]{1,20}
5176 : failed : failed : 0.609961725 (s) : [0-9]+
5177 : failed : failed : 38.038845453 (s) : ^\\+?(\\d+\\.?|\\d{1,3}(,\\d{3})?)([eE][+-]?\\d+)?$
5178 : failed : failed : 1.302058467 (s) : ([0-9]*\\.[0-9]{1,3}[0-9]{1,2})?
5179 : failed : failed : 0.269133484 (s) : ^(?![0-9][0-9])[0-9]{0,2}[,]?[0-9]{3}(.{2,3})[,]?[0-9]{2,4}$
5180 : failed : failed : 0.869973888 (s) : [a-z][0-9]{1,2}[,.]?00?[0-9]{3}
5181 : failed : failed : 0.136958461 (s) : ^\\d+\\s*
5182 : failed : failed : 0.442585413 (s) : @\"^[A-Z][a-z]?\\s?\\d{3}[,\\.][a-z]{2}[ ]?\\d*$\"
5183 failed : unparsable : 0 (s) : Please check your regex.
5184 : failed : error init : 0.119601458 (s) : ^
5185 : failed : failed : 6.720393103 (s) : (?<!#)(?<=\\d)\\.\\s+
5186 : failed : pumping failed : 8.624897761 (s) : ^[ \\t]*?[a-zA-Z][ \\t]*?[0-9]*?[\\s#][0-9]*[#][\\s]*[\\s]*$De
5187 : failed : failed : 0.543723867 (s) : (\\w+)\\s\\(\\d+)\\s+\\s
5188 : failed : failed : 75.798717095 (s) : (?<=\\d)([a-zA-Z]+)(?!\\d)(/?\\s*[a-zA-Z0-9+#]) Examp
5189 : unparsable : unparsable : 0.116302269 (s) : ^\\s*(([0-9]\\s*)+\\s*#(\\d+)\\s*\\s*$
5190 : failed : pumping failed : 150.769463117 (s) : ([A-Z]+ #)?[0-9]{2,9}[A-Z]?\\bExamp
5191 : failed : failed : 0.15796093 (s) : Checks to make sure that entry starts with ht
5192 : failed : failed : 0.2033572 (s) : Checks to make sure that entry starts with ht
5193 : failed : failed : 0.213923256 (s) : Checks to make sure that entry starts with ht
5194 : failed : failed : 0.18190034 (s) : Checks to make sure that entry starts with ht
5195 : failed : failed : 0.154064263 (s) : Checks to make sure that entry starts with ht
5196 : failed : failed : 0.203628699 (s) : Checks to make sure that entry starts with ht
5197 : failed : failed : 0.196809118 (s) : Checks to make sure that entry starts with ht
5198 : failed : failed : 0.238002648 (s) : Checks to make sure that entry starts with ht
5199 : failed : failed : 0.21153832 (s) : Checks to make sure that entry starts with ht
5200 : failed : failed : 0.197524187 (s) : Checks to make sure that entry starts with ht
5201 : failed : pumping failed : 117.819438127 (s) : r'\\s?'(0-9]+?)\\s*(,\\s*)?|[0-9]+?\\s*'
5202 : failed : failed : 0.33355995 (s) : ^[0-9a-zA-Z]+$
5203 : failed : failed : 72.175019086 (s) : (?<!\\S)(?<!\\bint\\b)(?!\\b) 
5204 : failed : failed : 0.470317234 (s) : \"^([-+]?)(\\d+)
5205 : unparsable : unparsable : 0.084402003 (s) : (?<!\\( )\\d{1,3}\\.?\\d{1,4}\\.?\\d{1,5}
5206 : failed : pumping failed : 109.299996054 (s) : [0-9A-Fa-f]+$
5207 : failed : failed : 0.725868865 (s) : [0-9a-f]{3}
5208 : unparsable : unparsable : 0.071921702 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{
5209 : failed : failed : 0.303863541 (s) : ^\\+?[0-9]+[0-9,]*$
5210 : failed : failed : 1.320278787 (s) : (?i)\\b[0-9]{1,2}\\.
5211 : failed : failed : 0.586182726 (s) : Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answ
5212 : failed : failed : 0.71468405 (s) : Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answ
5213 : failed : failed : 0.24219564 (s) : Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answ
5214 : failed : failed : 0.598121663 (s) : Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answ
5215 : failed : failed : 0.458893823 (s) : Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answ
5216 : failed : failed : 0.317114955 (s) : Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answ
5217 : failed : failed : 0.529114689 (s) : Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answ
5218 : failed : failed : 0.434674238 (s) : Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answ
5219 : failed : failed : 0.578184789 (s) : Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answ
5220 : failed : failed : 0.437594287 (s) : Match any number, no characters, no empty sets, and accept zero.Generate a RegEx for this description. Answ
5221 : failed : failed : 0.194574894 (s) : ^1\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d$
5222 failed : unparsable : 0 (s) : Please check your regex.
5223 : failed : failed : 0.56411416 (s) : \"^((1|2)\\.0+(\\|\\.)?)\\.(\\d+)\\.(\\d+)\"
5224 : failed : failed : 2.03570704 (s) : \\d+\\.\\d+\\.\\d+
5225 : failed : failed : 37.746991542 (s) : \\b1(.+?)\\.(\\d+).+?\\.0(.+)\\.\\d+
5226 : failed : failed : 2.111543402 (s) : \\d+\\.\\d+\\.\\d+
5227 : failed : failed : 0.710800337 (s) : 1\\.0\\.0\\.0
5228 : failed : failed : 0.542303377 (s) : 1.0\\.0\\.0
5229 : failed : pumping failed : 14.250582525 (s) : 1.*0.*.*0.*0.*
5230 : failed : failed : 5.304777197 (s) : (1\\.[0-9]{1,2})\\.0\\.0
5231 : failed : failed : 9.430057858 (s) : [^$,\\-]*\\$([^$]*)$
5232 : failed : failed : 0.180108955 (s) : ([^$-\\d.]+)
5233 : failed : failed : 0.797894711 (s) : \\b\\d{1,3}[,-.]?\\d{0,4}\\b
5234 : failed : failed : 0.148889863 (s) : ^\\$\\s*-?\\d+(,\\d+)?$
5235 : unparsable : unparsable : 0.071780888 (s) : ( -?
5236 : unparsable : unparsable : 0.054467617 (s) : (?<decimal_precision>\\d+\\.\\d+)$
5237 : failed : failed : 0.130833391 (s) : ^\\$
5238 : failed : failed : 0.791820075 (s) : \\d{1,3}(euro|dollar)s?\\s?\\$?[0-9,]*\\.
5239 : failed : failed : 5.442017325 (s) : (?<!^)\\d*\\.\\d{1,3}
5240 : unparsable : unparsable : 0.057449431 (s) : \\$\\d{1,2,3,4,5}\\-.{3,4}
5241 : failed : failed : 0.146833323 (s) : ICD-10 code[-\\w\\s]\\w*$
5242 : failed : failed : 0.190807389 (s) : ICD-10-CM-\\d{3}-\\d{4}
5243 : failed : failed : 9.144916377 (s) : [0-9]{4}-[0-9]{4}-[0-9]{2}
5244 : failed : failed : 1.444475519 (s) : ICDD-10 code The first three characters of the string could only be A-Z, a-z, 0-9, or _. The character must not be a digit or underscore. The character must be the first character or last character of the string. The character must be at least one character long.
5245 : failed : pumping failed : 5.459689659 (s) : ^[-a-zA-Z0-9\\s]+[-a-zA-Z0-9\\s]*[-a-zA-Z0-9\\s]*$Examp
5246 : failed : pumping failed : 3.829408065 (s) : [a-zA-Z][a-zA-Z0-9\\-_]{0,32}[a-zA-Z0-9_]{0,31}[a-zA-Z]Descripti
5247 : failed : failed : 5.836807415 (s) : \\d+/[\\d-]+/[\\d+-]+
5248 : failed : failed : 0.206502531 (s) : \\d\\d\\d\\d-\\d\\d-\\d\\d (\\d\\d\\d-\\d\\d-\\d\\d)
5249 : failed : pumping failed : 80.828459186 (s) : [0-9]+[A-Za-z]+[0-9A-Za-z ]+
5250 : failed : failed : 23.463218524 (s) : ^(.+)(\\d{3})(.+)\\s+(\\d{3})(.+)\\s+(\\d{3})$
5251 : failed : pumping failed : 154.03201036 (s) : [A-Za-z]+\\/[A-Za-z0-9\\.]+\\/[A-Za-z0-9\\-\\.]+
5252 failed : unparsable : 0 (s) : Please check your regex.
5253 : failed : failed : 0.152867752 (s) : ^([0-9]{2}/){1,2}([0-9]{2})/[0-9]{4}$
5254 : failed : failed : 23.747764941 (s) : [0-9]{2}/[0-9]{2}/[0-9]{4}
5255 : failed : failed : 3.252644127 (s) : #[a-zA-Z0-9-_]{5,20}
5256 : failed : failed : 18.843747293 (s) : [0-9]{2}[-\\/\\s]{1}[0-9]{3}[-\\/\\s]{1}[0-9]{4}
5257 : failed : pumping failed : 21.096659645 (s) : .*\\d{1,2}.*\\d{4}.*
5258 : unparsable : unparsable : 0.090516553 (s) : [\"
5259 failed : unparsable : 0 (s) : Please check your regex.
5260 : unparsable : unparsable : 0.092604693 (s) : [06/26/2015 | 01/31/2015 | 1/1/2015 | 2017/03/10 | 2017/03/11 | 2017/03/12 | 2017/03/13 | 2017/03/14 | 2017/03/15 | 2017/03/16 | 2017/03/17 | 2017/03/18 | 2017/03/19 | 2017/03/20 | 2017/03/21 | 2017/03/22
5261 : failed : failed : 34.140236811 (s) : (NOT working) [a-zA-Z\\d].*[a-zA-Z]\\.([a-zA-Z]{2}).*[a-zA-Z] \\w*
5262 failed : unparsable : 0 (s) : Please check your regex.
5263 : failed : failed : 0.943794787 (s) : \\w+
5264 : failed : failed : 4.048832502 (s) : [a-zA-Z0-9\\s-]*(xx|yy|zz|[a-zA-Z0-9])[a-zA-Z0-9\\s-]*
5265 : failed : failed : 0.196167547 (s) : ^\\w+\\b
5266 : unparsable : unparsable : 0.084394699 (s) : ^(?![0-9a-zA-Z]*[_\\-\\s,][0-9a-zA-Z0-9\\-]*[0-9a-zA-Z0-9])(?![0-9a-zA-Z]*[-_\\s,][0-9a-zA-Z0-9\\-]*[0-9a-zA-
5267 : failed : failed : 5.414143698 (s) : ^[a-z0-9\\s]+(?<!\\W)[a-z0-9\\s]+$
5268 : success : init : 2.234317531 (s) : ^([^xx]|[^yy]|[^zz])*$This will match any words except these xx, yy, zz.  So
5269 : failed : failed : 0.153057207 (s) : ^(?!.*(xx|yy|zz)).*
5270 : failed : failed : 0.113336936 (s) : [^xyz]
5271 : failed : failed : 0.161524143 (s) : ^[0-9]{1,2}[0-9]{0,3}([%][0-9]{0,2})?$
5272 : unparsable : unparsable : 0.081284414 (s) : ^(?=.*[A-Za-z])(?=.*[0-9])(?=.*[@#$%^&+=\\-/=?.])(?=.{2,50}$)[A-Za-z0-9@#$%^&+=\\-/=?.][A-Za-z0-
5273 : failed : failed : 0.222611416 (s) : ^(?!\\d*[%d]\\d{1,2})(?!\\d*[%d]\\d{1,2}).{0,3}$
5274 : failed : failed : 1.016917407 (s) : %(1,2.50).
5275 : failed : failed : 0.228760461 (s) : ^[0-9]{0,2}(,[0-9]{0,2})?$
5276 : failed : failed : 0.431010338 (s) : \\b%0[1-9]\\d{0,2}\\b
5277 : failed : failed : 3.452794983 (s) : \\d{1,3}(\\.\\d{1,3})?
5278 : unparsable : unparsable : 0.086149765 (s) : ((
5279 : failed : failed : 14.75302654 (s) : ^[a-zA-Z0-9 -]*\\.[a-zA-Z0-9][a-zA-Z0-9-]*\\.[a-zA-Z0-9][a-zA-Z0-9-]*$
5280 : failed : failed : 1.517202239 (s) : \\d{1,2}\\s?\\d{1,3}\\s?[\\%.0-9\\d]{1,2}[\\%.0-9\\d]{1,2}
5281 : failed : failed : 0.49810512 (s) : (\\d+)
5282 : failed : failed : 1.75396797 (s) : (1-365)\\d\\d\\d\\d-\\d\\d-\\d\\d
5283 : failed : failed : 0.621234464 (s) : \\d+
5284 : failed : failed : 1.157734033 (s) : \\b
5285 : failed : failed : 1.077893522 (s) : [0-9]{4}
5286 failed : unparsable : 0 (s) : Please check your regex.
5287 : failed : failed : 1.255071138 (s) : \\d{1,365}
5288 : failed : failed : 1.213204908 (s) : \\d{1,365}
5289 : failed : failed : 10.523612166 (s) : 1|2|3|4|5|6|...|365
5290 : failed : failed : 0.513381748 (s) : \\([1-365]\\d\\d\\)
5291 : failed : failed : 0.72445107 (s) : (?=\\s)(?=\\d\\s)(?=\\d\\s|\\d\\d\\s|\\d\\d\\d)\\s+(?=\\d\\s|\\d\\d\\d)\\d{9}\\s+\\d{3}
5292 : failed : failed : 0.791793716 (s) : \\d{3}-\\d\\d-\\d{4}
5293 : failed : failed : 2.19536625 (s) : ^[0-9]{3}-[0-9]{2}-[0-9]{4}|[0-9]{3}[0-9]{2}[0-9]{4}|[0-9]{3}[0-9]{2}[1-5][0-9]{3}$
5294 : unparsable : unparsable : 0.055760538 (s) : (?=\\S*-\\S*-\\S*\\s)([\\d\\w]{3}\\-\\d{2}\\-\\d{2}[\\d\\w]{2}[\\d\\w]{2}[\\d\\w]{2}[\\d\\w]{2}[\\d\\w]{2}[\\d\\-\\-\\-\\-\\s]
5295 : failed : failed : 0.130082114 (s) : 0123456789
5296 : failed : failed : 78.820396865 (s) : [0-9]{3}-[0-9]{2}-[0-9]{4}|\\d{3}[0-9]{2}[0-9]{4}|\\d{3}[0-9]{2}[0-9]{6}|\\d{3}[0-9]{2}[0-9]{5}|\\d
5297 : failed : failed : 0.733258502 (s) : (ssn|ssn|ssn)\\\\d{3}(\\\\-\\\\d{2}\\\\-\\\\d{4})?
5298 : failed : failed : 1.261445094 (s) : \\d{3}-\\d{2}-\\d{4}|\\d{3}-\\d{3}-\\d{4}
5299 : failed : failed : 0.237724547 (s) : ^[0-9]{3}[- ][0-9]{3}[- ][0-9]{4}$
5300 : failed : failed : 0.962750814 (s) : ^([0-9]{3}[0-9]{2}[0-9]{4})$
5301 : failed : failed : 0.947461242 (s) : \\d+
5302 : failed : failed : 1.167189859 (s) : \\d+(\\.\\d{2})?
5303 : failed : failed : 0.168650468 (s) : ``` pythonfrom re import compile
5304 : failed : failed : 0.698154586 (s) : r'^[\\d.-]+$'
5305 : failed : failed : 2.642592674 (s) : \\d{1,3}(\\.\\d{0,3})?
5306 : failed : failed : 1.267863473 (s) : ^([\\d\\.]+[eE][+\\-]?[\\d\\.]+)$
5307 : failed : failed : 6.092699523 (s) : (\\d+(\\.\\d+)?)([$,\\,]\\d+(\\.\\d+)?)([$,\\,]\\d+(\\.\\d+)?)
5308 : failed : failed : 0.405508122 (s) : r'^\\d+(\\.\\d+)?$'
5309 : failed : failed : 6.647000917 (s) : ([0-9.]+)
5310 : failed : failed : 0.174696269 (s) : ^\\d{3}(,\\d{3})*$
5311 : failed : failed : 0.658861506 (s) : \\d{3}-\\d{2}-\\d{4}
5312 : failed : failed : 0.734870602 (s) : \\d{3}-\\d{2}-\\d{4}
5313 : failed : failed : 10.338661945 (s) : [0-9]{3}\\-[0-9]{3}\\-[0-9]{4}$
5314 : failed : failed : 0.783249897 (s) : [\\d]{9}-\\d{2}-\\d{2}
5315 : failed : failed : 1.270727205 (s) : C1[0-9]{4}[A-Z0-9]{7}
5316 : failed : failed : 0.201599008 (s) : ^(?i)[A-Z][A-Z] [0-9]{4}-[0-9]{4}-[0-9]{4}$
5317 : failed : failed : 0.68446437 (s) : (?<!\\d)\\d{9,}
5318 : failed : failed : 0.119760145 (s) : ^\\\\w{3}\\\\d{4}-\\\\d{4}$
5319 : unparsable : unparsable : 0.10667924 (s) : # (\\d{3})([. \\- ])(\\d{4}) # (\\d{3}) matches the first and last three digits of a group. # (\\.|-) matches the period or dash. # (\\d{4}) matches the last four digits.''')
5320 : failed : failed : 0.531180918 (s) : ^\\d-\\d{3}-\\d{4}$|^\\d{4}-\\d{3}-\\d{2}$
5321 : failed : failed : 0.208908956 (s) : ^[A-Za-z][a-zA-Z0-9-]{7,17}$
5322 : failed : failed : 0.157787596 (s) : \\w\\w\\w\\w-\\w\\w-\\w\\w\\w\\w
5323 : failed : failed : 136.491213934 (s) : \\b(?=.*\\d)(?=.*[a-zA-Z])(?=.*-)(?=.*[0-9]).{8,17}\\b
5324 : failed : failed : 4.776800469 (s) : [A-Z][a-z][A-Z0-9-]{7,17}
5325 : failed : failed : 0.703271989 (s) : ^[a-zA-Z]{5}[0-9-]{8}$
5326 : failed : failed : 0.128394253 (s) : ^[a-zA-Z0-9-]+$ and the regex should be ^[a-zA-Z0-9-]{8,17}$.
5327 : failed : failed : 0.91712852 (s) : r'^[A-Za-z][A-Za-z0-9-]{5,18}$'
5328 : failed : failed : 0.816519198 (s) : ([A-Za-z][a-zA-Z-0-9]{6,17}[A-Za-z]*)
5329 : failed : pumping failed : 2.657059485 (s) : ^[A-Za-z0-9]{4,17}-([A-Za-z0-9-]{1,6}){1,6}$
5330 : failed : failed : 0.992903007 (s) : [a-zA-Z0-9-]{5,17}
5331 : failed : failed : 4.401447275 (s) : SEP.|(?<!SEP)(.*)(?!SEP)
5332 : unparsable : unparsable : 0.070563228 (s) : ^SEP.*$|^(?<=SEP.*)$
5333 : failed : pumping failed : 26.599898666 (s) : (?<!SEP)[ \\t\\n]*(?<!SEP)(?!SEP)(^[^\\t\\n\\r]+|SEP\\b)
5334 : failed : failed : 15.022066389 (s) : ^(?=.*SEP)(?!.*SEP.*)
5335 : failed : failed : 51.756754826 (s) : ^\\s*(.*?)\\s*SEP\\s*(.*)$
5336 : failed : failed : 0.150719911 (s) : [^SEP]|[^\\s]
5337 : failed : error init : 0.108017355 (s) : ^(?!|SEP)(?!SEP).*$
5338 : failed : failed : 12.669027067 (s) : ^((?!SEP).)*$
5339 : failed : failed : 0.139423056 (s) : ^\\s*
5340 : failed : failed : 92.265837607 (s) : (?<![^SEP])(?!SEP)(.*)(?=SEP)
5341 : unparsable : unparsable : 0.100884958 (s) : ^(0[1-9]|1[0-2])([0-5][0-9
5342 failed : unparsable : 0 (s) : Please check your regex.
5343 : failed : failed : 1.28289977 (s) : (00).{0,2}.
5344 failed : unparsable : 0 (s) : Please check your regex.
5345 : unparsable : unparsable : 0.09792149 (s) : ^([0-9]{2
5346 : unparsable : unparsable : 0.076639947 (s) : ^([0-2][0-9]|3[0-1
5347 : unparsable : unparsable : 0.094608225 (s) : var regex = new RegExp(\"^([0-9]{1,
5348 : unparsable : unparsable : 0.060486788 (s) : /^([0-9][0-
5349 : unparsable : unparsable : 0.103507169 (s) : (?<hour>\\d{2
5350 : unparsable : unparsable : 0.075169794 (s) : \\b(0[1-9]|1[0-2
5351 : failed : failed : 0.140733961 (s) : ```pythonimport re
5352 : unparsable : unparsable : 0.171448226 (s) : (?!^http
5353 : failed : failed : 1.315408787 (s) : [the server]
5354 : failed : failed : 0.188996157 (s) : example.com
5355 : unparsable : unparsable : 0.056400657 (s) : def getTLD(ur
5356 : failed : failed : 1.893714773 (s) : [\\w.-]{1,15}
5357 : failed : failed : 36.577086819 (s) : tld = re.search(r'.*\\.([a-zA-Z]+$)', url).group(1) ---
5358 : failed : failed : 19.340962748 (s) : ([a-z0-9]{1,63})
5359 : failed : failed : 17.024528213 (s) : .(?=\\.)
5360 : failed : failed : 0.180655789 (s) : http
5361 : unparsable : unparsable : 0.090244854 (s) : ((?<=\\d{3,})[\\d,]+\\.(?=\\d{3})[\\d,]*
5362 : failed : failed : 3.854921552 (s) : [^\\$]?\\$?\\d\\d?\\.?\\d{3}[^\\d][^\\d]
5363 : failed : failed : 0.56536409 (s) : \\$\\d+\\.\\d{2}([,]\\d{12})?.\\d{6}
5364 : failed : failed : 3.07606936 (s) : ^\\s*$|^[\\d,\\.]{1,3}
5365 : failed : failed : 0.882747268 (s) : [$]\\d{1,2}\\.\\d{0,2}
5366 : failed : failed : 0.673152557 (s) : (\\$[0-9]*\\.{2}([1-9][0-9]*|1[0-9]*)?)((,[0-9]{1,3},[0-9]{3}))?
5367 : failed : failed : 0.194066072 (s) : $\\d{1,3}\\.,?\\d{3}(,\\d{3}){0,1}
5368 : failed : error init : 0.130211707 (s) : [\\d\\,]{0,2}?[\\d\\,]{0,3}?
5369 : failed : failed : 0.969417308 (s) : (\\d*)\\,?\\.?([0-9]{2}[0-9]{2}[0-9]{2}\\s?[0-9]{3})
5370 : unparsable : unparsable : 0.077358012 (s) : ^((1,99)|(20,999)|(29,999),?|?)(\\.0+)?$
5371 : failed : failed : 0.237370173 (s) : ^\\(1\\s?\\d{3}[-\\s]\\d{3}[-\\s]\\d{4}\\)\\s?
5372 : failed : failed : 0.244078064 (s) : ^\\d{1,4}-?\\d{3}-?\\d{4}$
5373 : failed : failed : 0.64718004 (s) : ^(\\d{1})\\s+(\\d{3}-)\\s+(\\d{4})$
5374 : failed : failed : 0.537536009 (s) : ^(\\d{1})(\\d{2}\\-)(\\d{3})\\d{4}$
5375 : failed : failed : 2.273918088 (s) : 1[0-9][0-9]|[0-9][0-9][0-9]|001[0-9]|[0-9][0-9][0-9]
5376 : failed : failed : 0.616096332 (s) : \\b(?<=^\\d{3})(?<![\\s-])[\\d-]{3}(?=[\\s-])[\\s-]{4}\\b
5377 : failed : failed : 19.892112801 (s) : ^\\+\\d{1}[-\\.\\s]?\\d{3}[-\\.\\s]?\\d{4}$
5378 : failed : failed : 3.012460866 (s) : [01]?\\d\\d?[-\\.\\s]?\\d\\d?[-\\.\\s]?\\d\\d?[-\\.\\s]?\\d\\d
5379 : failed : failed : 0.393680673 (s) : /0[1-9]\\d{3}([-\\s]?(1\\d{2}|2\\d{3}))(\\d{3})$
5380 : unparsable : unparsable : 0.076242293 (s) : ^\\+?1[0-9]{1,3}[0-9]{1,3
5381 : failed : failed : 0.121193489 (s) : [a-zA-Z0-9\\-\\_\\ ]
5382 : failed : pumping failed : 236.013802108 (s) : [A-Za-z0-9-]+ prefix
5383 : failed : failed : 2.517022089 (s) : (0-9)\\/*
5384 : unparsable : unparsable : 0.082261184 (s) : [48-49] - [0-9]
5385 : unparsable : unparsable : 0.071231509 (s) : (?(?=
5386 : unparsable : unparsable : 0.077271109 (s) : +^-?[0-9]*
5387 : failed : pumping failed : 6.338656436 (s) : ^[a-zA-Z\\s-]+[a-zA-Z\\s-]+[a-zA-Z\\s-]+$
5388 : failed : failed : 2.163233979 (s) : [^\\s-][A-Za-z0-9_]{6,11}
5389 : failed : failed : 0.713000837 (s) : ^[a-z0-9][a-z0-9-]+$
5390 : failed : failed : 0.212223985 (s) : .{3,15}
5391 : failed : failed : 0.135072449 (s) : ^[0-9][0-9] ZZ$
5392 : failed : failed : 1.595688854 (s) : ^(?=.*\\d)(?=.*[a-z])(?=.*[!@#$%^&*()_+-=\\[\\]]).{13}$
5393 : failed : failed : 0.594623853 (s) : \\d{3} \\d{3}-\\d{3}
5394 : failed : failed : 0.109610359 (s) : ^[A-Z]{3}[0-9]{4}[A-Z]{3}$
5395 : failed : failed : 0.240574454 (s) : \\d{5}, \\d{3}-\\d{3}-\\d{3}
5396 : failed : failed : 1.341228608 (s) : \\d{2}[AB]\\d{3}
5397 : failed : failed : 0.18263207 (s) : ^[1-9]\\d A-Z [1-9]\\d A-Z [1-9]\\d Z$
5398 : failed : failed : 0.431220631 (s) : /^(?=\\d{4})(?=\\d{2})(?=\\d{3})(?=\\d{3})\\d{2} \\d{2} \\d{3}$/ Explanati
5399 : failed : failed : 0.208629684 (s) : ^[0-9]{1,3}\\s[a-zA-Z]{1,7}\\s[0-9]{1,3}$
5400 : failed : failed : 0.631873778 (s) : ^[A-Z]{1,3}[0-9][A-Z]{1,3}[0-9][A-Z]{1,3}
5401 : failed : failed : 0.233205294 (s) : This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.N
5402 : failed : failed : 0.226138171 (s) : This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.N
5403 : failed : failed : 0.295191731 (s) : This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.N
5404 : failed : failed : 0.445155777 (s) : This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.N
5405 : failed : failed : 0.322634551 (s) : This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.N
5406 : failed : failed : 0.395915148 (s) : This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.N
5407 : failed : failed : 0.370779699 (s) : This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.N
5408 : failed : failed : 0.25226187 (s) : This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.N
5409 : failed : failed : 0.465024143 (s) : This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.N
5410 : failed : failed : 0.2365834 (s) : This Regex Will Remove All Html Tags And Return Simple Plain Text.For Example In C#.N
5411 : failed : failed : 0.166386408 (s) : string RegexPattern = @\"^[\\u0600-\\u06FF]+$\";
5412 : failed : failed : 0.279203903 (s) : Regex.IsMatch(Text, \"[\\u0600-\\u06FF]\");
5413 : failed : failed : 17.673761909 (s) : (?<=[^\\u0020-\\u0040])(?<!\\s)\\u[^\\u0020-\\u00400]\\w+[^\\u0020-\\u0040]
5414 failed : unparsable : 0 (s) : Please check your regex.
5415 : unparsable : unparsable : 0.091656197 (s) : IsMatch(Text, @\"([\\u0600-\\u06FF]|[\\u0950-\\u095FF]+|[\\u0C00-\\u0FFF]+|[\\u2070-\\u209F]+|[\\u30
5416 failed : unparsable : 0 (s) : Please check your regex.
5417 : failed : failed : 0.116123454 (s) : [\\u0600-\\u06FF].
5418 : failed : failed : 0.422087648 (s) : (I'm not sure if it is correct but this is my work.)
5419 : failed : failed : 0.334842552 (s) : [\\u0600-\\u06FF]
5420 : failed : failed : 3.433571765 (s) : [\\u0600-\\u06FF]
5421 : failed : failed : 1.459547253 (s) : ^(?=.*[a-z])(?=.*[0-9]).{8,25}$
5422 : failed : failed : 2.08705785 (s) : ^(?=.*[A-Z])(?=.*\\d)(?=.*[a-z])(?=.*[^A-Za-z0-9 ]).{8,25}$
5423 : failed : failed : 167.257140605 (s) : .{8,25}\\\\d\\\\D\\\\s\\\\w
5424 : failed : failed : 0.744605341 (s) : ^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[\\w-]).{8,25}$
5425 : failed : failed : 551.264930397 (s) : ^(.{8,25})(?!\\s)(?=.*[a-z])(?=.*\\d)(?!\\S)(?=.*[a-zA-Z])$
5426 : failed : failed : 2.618631624 (s) : ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,25}$
5427 : failed : failed : 33.098312707 (s) : \\b(?!.*[\\W_\\d]).{8,25}[\\w\\s]
5428 : failed : failed : 0.214743302 (s) : ^[a-zA-Z0-9]{8,24}$
5429 : failed : failed : 2.654790907 (s) : ^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).{8,25}$
5430 : failed : failed : 0.738055705 (s) : [a-z]{8,25}[a-z0-9]
5431 : unparsable : unparsable : 0.088320951 (s) : [0-9]{1,3}\\.\\{[0-9]{1,3}\\}
5432 : unparsable : unparsable : 0.064413472 (s) : [0-9][0-9].[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0
5433 : failed : failed : 2.170078106 (s) : 0\\.[0-9]{0,3}\\.[0-9]{0,3}\\.[0-9]{0,3}
5434 : failed : failed : 2.043272767 (s) : The RegEx is [0-9]{1,3}\\.?[0-9]{1,4}\\.?[0-9]{1,3}\\.?[0-9]{1,5}\\.?[0-9]{1,3}\\.?
5435 : failed : failed : 1.328233483 (s) : \\b[0-9]{0,2}\\b
5436 : failed : failed : 0.478871904 (s) : ^[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?$
5437 : unparsable : unparsable : 0.07415336 (s) : [\\p{L}][\\p{P}]{3}\\s?[\\p{L}][\\p{P}]{3} Match a letter between [a-zA-Z] (case insensitive), an optional space, then three more letters between [a-zA-Z] (case insensit) and finally three more letters between [a-z] (case
5438 : failed : failed : 1.193769113 (s) : 0[1-9][0-9]|1[0-9] This should generate a RegEx that will match any 10-digit number between 0 to 90, followed by one of either 0 or 1 (for figures).  3. Create a RegEx for this description.     Answ
5439 : failed : failed : 0.153093335 (s) : ^[0-9]{1,2}$
5440 : failed : failed : 14.98275818 (s) : [0-9]{3}\\.?[0-9]{3}\\.?[0-9]{3}\\.?[0-9]{3}
5441 : failed : failed : 2.579148387 (s) : MM/(YYY|19[1-9])/
5442 failed : unparsable : 0 (s) : Please check your regex.
5443 failed : unparsable : 0 (s) : Please check your regex.
5444 : failed : failed : 1.07876815 (s) : (^[0-9]{2}\\s?[0-9]{4}\\s?[0-9]{2}\\s?[0-9]{2}$)
5445 failed : unparsable : 0 (s) : Please check your regex.
5446 : failed : failed : 1.534179421 (s) : M/\\d{2}\\/\\d{4}/ 
5447 : unparsable : unparsable : 0.075615539 (s) : ^(?=.*\\d)(?!.*-.*-.*-.*-.*-)(?!.*-.*-.*-.*-.*-.*-)(?!.*-.*-.*-.*
5448 : failed : error init : 0.1576028 (s) : (?<![0-9][0-9])
5449 failed : unparsable : 0 (s) : Please check your regex.
5450 : failed : failed : 0.561405969 (s) : ^\\d{4}-\\d{2}$
5451 : failed : failed : 49.246572274 (s) : [a-zA-Z]{6}-[a-zA-Z]{3}
5452 : failed : failed : 0.106270434 (s) : ^[0-9a-fA-F\\s]{3,6}$
5453 : failed : error init : 0.088239249 (s) : ^
5454 : failed : failed : 58.056323586 (s) : <a [^>]*href=[^>]*>[^>]*>(.*)</a>
5455 : failed : failed : 195.522136541 (s) : \\A(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{3,6}$
5456 : failed : failed : 1.107950327 (s) : ^\\A[a-zA-Z0-9_-]{1,255}\\z
5457 : failed : failed : 1.269868508 (s) : r
5458 : failed : failed : 0.151378955 (s) : ^[0-9A-Fa-f]{3}-[0-9A-Fa-f]{3}-[0-9A-Fa-f]{3}$
5459 : failed : failed : 58.43035319 (s) : [ \\dA-Fa-f]{3,6}$
5460 : failed : failed : 10.573604874 (s) : (?=.{3,6}$)([a-fA-F0-9]{3,6})$
5461 : failed : failed : 0.604119855 (s) : \\w{6,20}\\.[^\\W_]
5462 : failed : failed : 0.473094635 (s) : (at least one non-capital letter a-z, at least one digit, at least one special character $&%^*)
5463 : failed : failed : 2.783041902 (s) : ([a-z0-9])([a-z0-9])([a-z0-9])([a-z0-9])([a-z0-9])([a-z0-9])
5464 : failed : pumping failed : 34.654784753 (s) : (?=.*[a-z])(?=.*\\d)(?=.*[A-Z]).{6,}
5465 : failed : failed : 1.950284376 (s) : (1-35) + [0-9]
5466 : failed : pumping failed : 21.953048385 (s) : (?=.*[a-z])(.*[A-Z])(.*[0-9])
5467 : failed : failed : 3.9727074 (s) : ^[a-zA-Z][a-z0-9]{5,}$
5468 : failed : failed : 1.538638641 (s) : ^(?=.*[a-z])(?=.*[A-Z]).{6}$
5469 : failed : failed : 0.877217092 (s) : ^(?=.*[a-zA-Z])(?=.*[0-9])[0-9a-zA-Z]{6}$
5470 : failed : failed : 8.361598462 (s) : ^[A-Za-z1-9]{5,}$
5471 failed : unparsable : 0 (s) : Please check your regex.
5472 : unparsable : unparsable : 0.084713967 (s) : \\d{1,2}\\s?\\d{1,
5473 : failed : failed : 0.286643223 (s) : (0[1-9][0-9]|1[0-2])[ap]mGenerate a RegEx for this description. Answ
5474 : unparsable : unparsable : 0.077904706 (s) : ^(0|[1-9][0-9]*[0-9]){2}-([0-1][0-9]|2[0-3])[0-9]{2}|0[0-2][0-9](1[0-9]|2[0-3
5475 : unparsable : unparsable : 0.101871947 (s) : (exampl
5476 : unparsable : unparsable : 0.067708772 (s) : (\\d{1,2
5477 : failed : failed : 0.303499859 (s) : ^([0-9]|1[0-9]|2[0-3]|[0-9]|3[01])\\/([0-9]|1[0-9]|2[0-3]|[0-9]|3[01])\\s
5478 : unparsable : unparsable : 0.070972505 (s) : ^(0|[1-9]|[1-2][0-9]|3[01])[0-9]{
5479 : failed : failed : 2.879586282 (s) : \\
5480 : failed : failed : 64.521470821 (s) : ^[A-Za-z0-9 ]+\\s*[AM|PM]$|^[A-Za-z0-9 ]+\\s*[AM|PM]$
5481 : failed : failed : 45.189719683 (s) : g(?<=^[0-9]*)(?<![0-9]*[.][0-9]*)(?<![0-9]*[,][0-9]*|$)
5482 : failed : failed : 0.412489405 (s) : ^[0-9](.{1,10})?(?=\\s|\\\\.|-)(?![\\\\\\.]$)
5483 : failed : failed : 6.741195378 (s) : ^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[_.])(?=.*(?<=\\d)(?![a-zA-Z])).*$
5484 : failed : failed : 0.454895054 (s) : CurrencyRegex = re.compile(r\"^(\\d+\\.\\d{2,})$\")
5485 : failed : failed : 0.792199917 (s) : \\$\\d+
5486 : failed : failed : 0.583074726 (s) : [0-9]*
5487 : unparsable : unparsable : 0.107630621 (s) : [\\d\\,\\.]*$  (this will allow your app to check currency during events such as key down(set to decimal(12,2) only)Generate a RegEx for this description. Answ
5488 failed : unparsable : 0 (s) : Please check your regex.
5489 : unparsable : unparsable : 0.071028018 (s) : currency_regex = RegexTemplate(    \"^\\d{2,3}(\\.\\d{3})?\"    \" (\\d{2,3})?\"    \" (\\d{2,3})?\"    \"(\\d{2,3})?\"    \"(\\d{2,3})?\"    \"(\\d{2,3})?\"    \"(
5490 failed : unparsable : 0 (s) : Please check your regex.
5491 : failed : failed : 12.335387238 (s) : d{2,3}|M{3}[0-9]{2}|Y{2}[0-9]{2}
5492 : failed : failed : 0.256983411 (s) : \\b(\\d{1,2})\\s*[a-z]\\s*[a-z]\\s*\\d{1,2}\\b
5493 : failed : failed : 0.117090476 (s) : ^[0-9]{4}-[0-9]{1,2}.[0-9]{2}$
5494 : failed : failed : 0.659118627 (s) : (\d{1,2})\s\w+ \d{4}
5495 : failed : failed : 0.406673344 (s) : (\\d\\d) MMM (\\d\\d (\\d\\d))
5496 : failed : failed : 11.0498191 (s) : [0-9]{2}/[0-9]{2}/[0-9]{4}
5497 : failed : failed : 0.318802906 (s) : (\\d\\d)\\s(\\w+)\\s(\\w+)\\s(\\d\\d \\d\\d)
5498 : failed : failed : 9.318296612 (s) : [0-9][0-9] [0-9][0-9]
5499 : failed : failed : 1.091438977 (s) : ^(0[1-9]|1[012])[0-9]{2}
5500 : failed : failed : 4.890235189 (s) : (?<![\\d])(-[\\d]{1,2})(?![\\d])
5501 : unparsable : unparsable : 0.070214315 (s) : ^[\\+\\-0-9]+$
5502 : failed : failed : 0.528471104 (s) : /^-?(\\d+|\\d+\\.\\d+|\\d+\\.\\d+e\\d+)$/;
5503 : failed : failed : 0.57506694 (s) : ^[+-]?(0|[1-9][0-9]*)([eE][+-]?[0-9]+)?$
5504 : failed : failed : 0.465328853 (s) : /^((0\\.9|[1-9][0-9]*))
5505 : failed : failed : 0.590288064 (s) : /^[-+]?[0-9]*\\.?[0-9]+$/ [1] => RegE
5506 : failed : failed : 0.572953373 (s) : ^[+-]?[\\d]+(\\.\\d+)?(e[+-]?[\\d]+)?$
5507 : failed : failed : 0.864070754 (s) : ^[1-9][0-9]\\.[0-9]+$|^0$
5508 : failed : failed : 0.241215775 (s) : [0-9]+
5509 : failed : pumping failed : 2.847695073 (s) : [0-9]+(.0)?(E|P)?[+-]?[0-9]*(e|E)([+-](0|[1-9])([0-9]*))?
5510 : failed : pumping failed : 2.700006739 (s) : ^\\+?[\\d]+([e\\.]?[\\d]+)?$
5511 : failed : failed : 0.204084853 (s) : Matches all kind of UR
5512 : failed : failed : 0.143253849 (s) : Matches all kind of UR
5513 : failed : failed : 0.161926356 (s) : Matches all kind of UR
5514 : failed : failed : 0.178849116 (s) : Matches all kind of UR
5515 : failed : failed : 0.1302293 (s) : Matches all kind of UR
5516 : failed : failed : 0.1523 (s) : Matches all kind of UR
5517 : failed : failed : 0.212345982 (s) : Matches all kind of UR
5518 : failed : failed : 0.138929352 (s) : Matches all kind of UR
5519 : failed : failed : 0.124332788 (s) : Matches all kind of UR
5520 : failed : failed : 0.171109543 (s) : Matches all kind of UR
5521 : failed : failed : 0.73874176 (s) : \\d{4}-\\d{2}-\\d{2}
5522 : unparsable : unparsable : 0.063285279 (s) : (\\d+-\\d+-\\d+)T(\\
5523 : failed : failed : 1.077356647 (s) : \\b[0-9]{1,3}\\/[0-9]{1,3}\\/[0-9]{2}\\b
5524 : unparsable : unparsable : 0.089526158 (s) : ^(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})(?P<hour>\\d{2})(?P<minute>\\d{2})(?P<second>\\d{2})(?P<tz_hours>\\d+)(?P<tz_minutes>\\d+)?$
5525 : failed : failed : 7.126462426 (s) : ^(0[1-9]|1[012])\\/|[01][012]\\/[0-3][0-9]\\.[0-9]{3}$
5526 : failed : failed : 0.982697696 (s) : (\\w+)\\s(\\w+)\\s(\\d{4})\\s(\\d{2})\\s(\\d{2}) (morning|evening|night)  
5527 failed : unparsable : 0 (s) : Please check your regex.
5528 : unparsable : unparsable : 0.084356778 (s) : \\b(([a-zA-Z][a-zA-Z0-9_]*\\s\\.)+[a-zA-Z]{2,}\\b        This pattern matches any string that starts with a letter or number, followed by zero or more of any alphanumeric character or space, and ends with either another letter or number, or a period.        It is useful for filtering out unwanted data that falls outside a specific range or character set
5529 : unparsable : unparsable : 0.066900389 (s) : \\d{4}-\\d{2}-\\d{2} \\d{
5530 : unparsable : unparsable : 0.077745317 (s) : ^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{
5531 : unparsable : unparsable : 0.061473026 (s) : [\\x21\\x3a-\\x3e]|[\\x2f-\\x7d]|[\\x2f-\\x7d]|[\\x2d-\\x2f]|[\\x2f-\\x7d]|[\\x2f-\\x7d]|[\\x2f-\\x7d]|[\\x2f-\\x7d
5532 : failed : failed : 0.376071788 (s) : ^[0-9a-fA-F]{1,4}\\.([0-9a-fA-F]{1,4}\\.){3,3}\\.([0-9a-fA-F]{1,4})$
5533 : failed : failed : 1.017074982 (s) : (?=20)\\d{1,3}[a-zA-Z]{1}\\d{1,3}(?=\\.|$)
5534 : failed : failed : 0.797391168 (s) : (\\d{1,3}\\s+[0-9]{2}\\s+[0-9]{2})\\s+(\\d{1,4})\\s+(\\d{1,2})\\s+(\\d{2,})\\s+(\\d{1,2})\\s+(\\d{2,})
5535 : failed : failed : 0.661407974 (s) : [^\\d\\s].[^\\d\\s]
5536 : unparsable : unparsable : 0.133949146 (s) : (?<!=\\s)^(?!
5537 : failed : failed : 19.464091571 (s) : [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.\"
5538 : unparsable : unparsable : 0.065522609 (s) : \\d{
5539 : failed : failed : 3.870120484 (s) : /
5540 : failed : failed : 0.171413912 (s) : The following regex should wo
5541 : failed : failed : 0.113669138 (s) : [^a-zA-Z]
5542 : failed : failed : 13.544369749 (s) : /(.*?[^aeiou])/.
5543 : failed : failed : 5.044061737 (s) : (.*)
5544 : failed : failed : 0.133585034 (s) : [a-zA-Z0-9_]{0,30}[a-zA-Z0-9_]{0,30}
5545 : failed : failed : 27.408060424 (s) : (^|(?<!\\S))([^*?\\W]\\w+)
5546 : failed : failed : 0.168331912 (s) : ^(\\w*)\\*\\1$
5547 failed : unparsable : 0 (s) : Please check your regex.
5548 : failed : error init : 0.115007815 (s) : ^
5549 : unparsable : unparsable : 0.081686117 (s) : var regex = /^(?=.{0,100}$)(?=^.*
5550 : failed : failed : 1.200734436 (s) : r'^(?!\\s*)
5551 : unparsable : unparsable : 0.105822625 (s) : (?P<integer1>\\d{1,9})\\.\\d{1,2}
5552 : failed : failed : 0.147308482 (s) : 10-2
5553 : failed : failed : 0.163440782 (s) : ^\\d{10}(\\.\\d{0,2})?$
5554 : failed : failed : 0.129114221 (s) : ^10[1-9]?\\.?[1-9]$
5555 : failed : failed : 0.777624903 (s) : ^\\d{10}(\\.\\d{0,2})?$
5556 : failed : failed : 0.435696001 (s) : \\d{10}\\.[0,2]
5557 : unparsable : unparsable : 0.07932231 (s) : ^[0-9]{10,2}\\\\.[0-9]{1,2}$
5558 : failed : failed : 0.536558379 (s) : \\d{4}\\.\\d{0,2}(\\.\\d{0,2})?
5559 : failed : failed : 0.255397842 (s) : This requires a bit of research but could be something like \"(?=^[0-9]{10}$)(?![0-9]{3}$)(?=^[0-9]{2}$)0*\\.[0-9]{1}[0-9]{0,9}$\".  This sa
5560 : failed : failed : 2.134937862 (s) : [^0-9]\\d{0,10}\\.\\d{0,2}
5561 : failed : failed : 0.726557584 (s) : \\d{3}\\.\\d+
5562 : failed : failed : 11.934944632 (s) : [^\\d]|\\.\\d+[^\\d]|\\d+[^\\d]|\\d+(?=\\.\\d+|$)Explanati
5563 : failed : failed : 1.58785305 (s) : [0-9]{1,3}.{1,3}[0-9]{1,3}
5564 : failed : error init : 0.124490433 (s) : \\d+.\\d+Here is a Python script that demonstrates how to use the `re` module to match decimal numbers. The `re.search()` function is used to search for the decimal number (the decimal part) in the given text. The result of the search is returned as a match object if the decimal number is found and None if it is not.
5565 : failed : pumping failed : 68.088534826 (s) : ([0-9]+)\\.
5566 : failed : failed : 1.844935508 (s) : \\d\\.\\d+
5567 : failed : failed : 0.215815811 (s) : (\\\\d*)\\\\.(\\\\d*)(\\\\.\\\\d*)How can I use this RegEx to test if a String is formatted correctly?Answ
5568 : failed : failed : 14.894989602 (s) : {0,3}[1-9]\\d{0,3}
5569 : failed : failed : 0.244298928 (s) : .{2}(?!\\d)(?=\\d)?(?<!\\d)(?!\\d+$)
5570 : failed : failed : 2.554803328 (s) : 0.00[1-9]\\d*
5571 : unparsable : unparsable : 0.058056207 (s) : \\s*[A-Z]+\\s*[0-9]+\\s*[0-9]+\\s*[0-9]+\\s*[0-9]+\\s*[0-9]+\\s*[0-9]+\\s*[0-9]\\s*[A-Z]+\\s*[0-
5572 : failed : failed : 19.861108202 (s) : ([A-Za-z0-9_\\\\-]+)|(\\\\.\\\\/\\\\.)(\\\\d{1,3}\\\\d{1,3}|\\\\d{1,3}\\\\.\\\\d{1,3})
5573 : failed : failed : 0.802962973 (s) : ^[a-zA-Z0-9-_]*$
5574 : failed : failed : 2.920964287 (s) : [A-Z0-9.,!()-`{}^]+
5575 : unparsable : unparsable : 0.122221605 (s) : ^[!#\\$\\%\\^\\&\\*\\(\\)\\-\\_\\~\\+\\=\\?
5576 : failed : pumping failed : 207.412095021 (s) : ([a-zA-Z0-9_.-]+@[a-zA-Z0-9\\-\\.]+\\.[a-zA-z]{2,3})
5577 : failed : failed : 0.10069863 (s) : [a-zA-Z0-9-_]
5578 : failed : failed : 0.189343648 (s) : ^\\w+[^a-zA-Z0-9\\s]*$
5579 : failed : failed : 0.139130879 (s) : [A-Za-z1-9._-]
5580 : failed : failed : 11.507880775 (s) : ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$
5581 : failed : failed : 7.507064037 (s) : \\b(\\d{1,3}\\.){1,3}\\d{1,3}\\b
5582 : failed : pumping failed : 97.693589899 (s) : ([a-zA-Z0-9\\.]+\\.[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]+)
5583 : unparsable : unparsable : 0.100338747 (s) : {tld}.*?{tld}$
5584 : unparsable : unparsable : 0.0783933 (s) : (http
5585 : unparsable : unparsable : 0.07054295 (s) : %((.*?)%?)?(.*)?(.*)?(.*)?(.*)?(.*)?(.*)?(.*)?(.*)?(
5586 failed : unparsable : 0 (s) : Please check your regex.
5587 : unparsable : unparsable : 0.116661503 (s) : \\b      (http|https|ft
5588 : unparsable : unparsable : 0.090218725 (s) : (http
5589 : unparsable : unparsable : 0.059136791 (s) : (http
5590 : failed : pumping failed : 81.862445207 (s) : (?i)(^[^.]*\\.[^.]*(http|https|ftp|files)\\..*$)?
5591 : unparsable : unparsable : 0.087435403 (s) : (.+?)\\s?[\\s\\
5592 : failed : failed : 0.169982312 (s) : Content-Type (non-MIME)
5593 : failed : pumping failed : 4.664373095 (s) : \\b[A-Z0-9]{1,}[A-Z0-9]{2,}[A-Z0-9]{3,}\\b \\b[A-Z0-9]+[A-Z]+[A-Z0-9]+\\b
5594 failed : unparsable : 0 (s) : Please check your regex.
5595 : unparsable : unparsable : 0.059122764 (s) : \\s*\\/MIME\\s*\\*(?P<mime>[^\\s]+)
5596 : failed : failed : 3.76519532 (s) : .*
5597 : unparsable : unparsable : 0.057546653 (s) : A RegEx that matches both MIME and non-MIME mail messages is [(\\w
5598 : failed : failed : 0.151218364 (s) : Content-Ty
5599 : unparsable : unparsable : 0.082104049 (s) : ^(?P<subtype>mail)$|^(?P<nonmimetype>unmimetypedef)$\"\"\"
5600 : failed : failed : 12.430293711 (s) : [a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]*
5601 : failed : failed : 0.569290923 (s) : \\d{1,2}
5602 : unparsable : unparsable : 0.078116592 (s) : (2[d-F]|3[0-1][0-9]|[0-1][1-9]|[2][0-9]|[3])[0-9]
5603 : failed : failed : 0.513433124 (s) : r'^(0?[1-9]|1[012])/(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])$'
5604 : unparsable : unparsable : 0.073691256 (s) : (\\d{1,2})(\\/)(\\d{1,2})\\/(\\d{4}))
5605 : failed : failed : 18.136128194 (s) : [0-9]{1,2} / [0-9]{1,2} / [0-9]{2}
5606 : unparsable : unparsable : 0.065613028 (s) : $regex = '/(^
5607 : unparsable : unparsable : 0.092740367 (s) : \\d{1,2}-(\\d{1,2}-\\d{1,2})[-\\/](\\d{1,
5608 : failed : failed : 0.761199636 (s) : \\d{2}
5609 : failed : failed : 0.885384967 (s) : \\d{1,2}-\\d{1,3}-\\d{1,4}
5610 : unparsable : unparsable : 0.067876887 (s) : # regex for date     (?P<month>\\d{1,2})(?P<day>\\d{1,2})(?P<year>\\d{4})
5611 : failed : failed : 0.171218036 (s) : ```pythonimport re
5612 : failed : failed : 18.632754725 (s) : /([^\"]*) Exercise
5613 : failed : failed : 19.928043426 (s) : ^ (.*?)(?=\\n|\\Z) # Match anything (?=.*?)(?=\\n|\\Z) # Match the end of a line. $
5614 : failed : failed : 0.489520444 (s) : r\"^#.*$\"
5615 failed : unparsable : 0 (s) : Please check your regex.
5616 : success : cross : 5.07263316 (s) : (\\\\s*[^\\r\\n]*(?<!\\\\\\\\))+(\\r\\n|$)
5617 : failed : failed : 3.611243095 (s) : #(.+)
5618 : unparsable : unparsable : 0.082329842 (s) : ^          # Match the start of the line (         # Open a capture group  ( [^\\n]* )  # Match any characters (up to the newline character)  
5619 : unparsable : unparsable : 0.0893351 (s) : (Assuming every line in the file has the same forma
5620 : failed : failed : 1.601766476 (s) : /\\s*-?\\d+
5621 : failed : pumping failed : 3.302857197 (s) : ^[\\w\\s\\d]+[\\.\\s\\w]+[\\w]+[\\w\\s\\d]{1,3}$
5622 : failed : failed : 2.690501259 (s) : (^.+)
5623 : failed : pumping failed : 25.927730081 (s) : ^(?=.+?)(?=\\.)(?=.*?\\+)|(?=.*?\\.)(?=.*?\\+)$
5624 : failed : failed : 0.281710516 (s) : \\[[^\\]]*\\]The first match should look for 1. A substring enclosed by square brackets 2. Any number of characters, except a closing square bracket
5625 : failed : failed : 3.864936736 (s) : ^[A-Za-z0-9]*$
5626 : success : init : 3.020217771 (s) : [^\\s_\\(\\)|]*[^\\s_\\(\\)]*[^\\s_\\(\\)]*[^\\s_\\(\\)]*[^\\s_\\(\\)]*[^\\s_\\(\\)]*[^\\s_\\(\\)]*[^\\s_\\(\\)]*\"\"\"
5627 : unparsable : unparsable : 0.089659598 (s) : (^
5628 : failed : failed : 97.531622496 (s) : B+-P+0*(Mm)
5629 : failed : failed : 11.752640195 (s) : (?=([^ ]|(?=\\s){1,}|$))
5630 failed : unparsable : 0 (s) : Please check your regex.
5631 : failed : failed : 2.530948878 (s) : Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answ
5632 : failed : failed : 2.074639696 (s) : Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answ
5633 : failed : failed : 1.536390932 (s) : Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answ
5634 : failed : failed : 2.500519806 (s) : Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answ
5635 : failed : failed : 2.164376118 (s) : Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answ
5636 : failed : failed : 1.874926279 (s) : Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answ
5637 : failed : failed : 1.983335428 (s) : Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answ
5638 : failed : failed : 2.767188625 (s) : Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answ
5639 : failed : failed : 3.018029133 (s) : Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answ
5640 : failed : failed : 2.812648403 (s) : Regex to validate strong password for.NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.Generate a RegEx for this description. Answ
5641 : unparsable : unparsable : 0.10000449 (s) : ^([0-1]?[0-9]|2[0-3
5642 : unparsable : unparsable : 0.058195989 (s) : (\\d{2
5643 : unparsable : unparsable : 0.104680356 (s) : ^\\d{
5644 : unparsable : unparsable : 0.065716673 (s) : '^(\\\\d{2
5645 : unparsable : unparsable : 0.083537313 (s) : [0-9]{
5646 : unparsable : unparsable : 0.072842667 (s) : [0-9]{
5647 : unparsable : unparsable : 0.090163462 (s) : ^([2-9]\\d|[1-2][0-9
5648 : unparsable : unparsable : 0.068397893 (s) : ^([0-9]{
5649 : unparsable : unparsable : 0.075800655 (s) : ^[0-
5650 : unparsable : unparsable : 0.066819397 (s) : (?P<H>\\d{1,2
5651 : failed : failed : 1.962180433 (s) : \\d{1,3}(,\\d{3}){0,1}(\\.\\d{0,2})
5652 : failed : failed : 1.781833231 (s) : d({1,2},\\d{0,6})
5653 : failed : failed : 0.225516717 (s) : ^\\d+(,\\d{1,2})$
5654 : unparsable : unparsable : 0.063310015 (s) : \\d{1,2}(,\\d{1,2})?Example of how these rules can be used. string[] values = new string[] {\"1.00,23.43\", \"23.43\", \"1.00\"}; string[] results = Regex.Matches(values, @\"\\d{1,2}(,\\d{1,
5655 : failed : error init : 0.112679836 (s) : ^
5656 : failed : failed : 0.147980601 (s) : ^[0-9]{1,2}(,[0-9]{1,2}){0,1}$
5657 : failed : pumping failed : 115.971714439 (s) : [0-9]+, [0-9]+\\.?[0-9]{0,3}
5658 : failed : failed : 2.27401007 (s) : d\\d{0,2}(,\\d{0,10})
5659 : failed : failed : 1.087492747 (s) : \\d{1,2}(,\\d{1,2})?(\\.\\d{1,2})?
5660 : failed : failed : 1.815457196 (s) : \\d{1,2}[,.]\\d{1,2}
5661 : unparsable : unparsable : 0.058912871 (s) : ^(?P<country_prefix>\\+2\\s|\\+22)\\s?(?P<city_code>\\S+)?(?P<phone_number>\\d{5}\\s?\\d{4})?(?P<extension>\\d{1,3})?
5662 : failed : failed : 0.388099502 (s) : ^\\+44[\\d]{3}
5663 : failed : failed : 0.267489395 (s) : (\\d{2})?(.|\\s)
5664 : unparsable : unparsable : 0.105524517 (s) : ((1[5-9]|2[0-2])[0-9]{3})([0-9]{2})?(\\d{3}[0-9]{3}|3[01]\\d|[1-9]\\d|[0-9])([0-
5665 failed : unparsable : 0 (s) : Please check your regex.
5666 : unparsable : unparsable : 0.090592996 (s) : (\\d\\d.\\d\\d.\\d{1,2}|\\d{3}.\\d{1,2}|\\d{4}.\\d{1,2}|\\d{5,6}\\d+|\\d{6,8}\\d{1,2}|\\
5667 : failed : failed : 2.419531947 (s) : ^\\+22\\(([A-Za-z0-9 ]+) \\+2\\)?[0-9]{1,4} #XXX$
5668 : unparsable : unparsable : 0.0610909 (s) : (?<prefix>\\+(\\d{2}|\\+22\\))?\\s?(?<countrycode>\\d{2}[-]?\\d{2}[-]?\\d{3})\\s?(?<telephone>\\d{9})[\\s\\+
5669 : failed : failed : 1.074549489 (s) : (?<prefix>(2\\.)?\\d{1,2})(?<country>\\w{3})(?<city>[^\\s]{3})(?<extension>\\d{3})
5670 : failed : failed : 0.804188658 (s) : (^|\\s)(\\+22|2[\\d\\s]{3})([^\\s]+)
5671 failed : unparsable : 0 (s) : Please check your regex.
5672 : failed : failed : 0.2383829 (s) : ^\\+1[0-9]*
5673 : failed : failed : 4.6067023 (s) : (?<=\\d{1,2})
5674 : unparsable : unparsable : 0.130108984 (s) : (^[0-9]{19}[.]){2}([0-9]{2}[.]){3}([0-9]{3}[.]){4}([0-9]{2}[.]){2}[0-9]{4}$)
5675 : failed : failed : 12.45556311 (s) : (^[^\\\\s]+(\\\\d+[a-z]([a-z]{2})*)(-?\\\\d{1,4})?(\\\\d{1,3})?$)
5676 : failed : failed : 0.312067333 (s) : ^(([2-9]\\d?)|(1\\d?\\d|2[5-9]))\\s?(\\d[2-9]\\d|1[0-2]\\d|3[0-5]\\d)\\s?(2[1-9]\\d|0\\d{2})
5677 : failed : failed : 0.186541261 (s) : ^[a-z]{2}[a-z]{2}\\s[0-9]{4}$
5678 : failed : failed : 1.353253406 (s) : country_code\\D*\\d{2}\\D*\\d{2}\\D*\\d*
5679 : failed : failed : 4.994270096 (s) : \\b(?=\\d{1,3}[-\\s]?\\d{3}[-\\s]?\\d{4})
5680 : failed : failed : 0.553446232 (s) : ^[A-Z]{2}[-\\s]?[0-9]{3}\\.[0-9]{3}[0-9]{3}$
5681 : unparsable : unparsable : 0.058130837 (s) : (^(?=
5682 : failed : failed : 0.309931143 (s) : ^((0|[1-9][0-9])|(0?[1-9]))((0|[1-9][0-9])|(1[0-2]))((0?[1-9]))$
5683 : unparsable : unparsable : 0.053469397 (s) : (^(?=
5684 failed : unparsable : 0 (s) : Please check your regex.
5685 failed : unparsable : 0 (s) : Please check your regex.
5686 : unparsable : unparsable : 0.064253522 (s) : (?i)(\\d\
5687 : failed : error init : 0.127369434 (s) : ^
5688 failed : unparsable : 0 (s) : Please check your regex.
5689 : failed : error init : 0.099039362 (s) : ^
5690 : unparsable : unparsable : 0.071718902 (s) : \"^(0|[1-9][0-9]|1[0-2
5691 : failed : failed : 36.283393143 (s) : \\((.*?)\\)
5692 : failed : error init : 0.109276072 (s) : \\(.+\\)Here I am using the first instance of matching parenthesis as regex and then capturing everything else that is between them with the match(regex, string,capturegroup) function. In my case, the string is of the format \"(example text1) (example text2) (example text3)\".
5693 : failed : pumping failed : 19.860638301 (s) : ([\\s\\S]*)([\\(])(.*)([\\)\\]])
5694 : failed : failed : 10.86214575 (s) : \\([^\\)]*\\).*
5695 : failed : failed : 40.573504048 (s) : (\\(.*?\\))
5696 : failed : failed : 16.117970237 (s) : \\([^)]+\\)
5697 : unparsable : unparsable : 0.050550932 (s) : (?<=\\()[^()]+[^()]+(?=\\))
5698 : failed : failed : 1.938053312 (s) : (.+)
5699 : failed : failed : 9.340137532 (s) : \"\\\\(.*\\\\)\"
5700 : failed : failed : 3.798767578 (s) : (.*)
5701 : failed : failed : 0.372068703 (s) : This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answ
5702 : failed : failed : 0.410485823 (s) : This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answ
5703 : failed : failed : 0.384903257 (s) : This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answ
5704 : failed : failed : 0.350188409 (s) : This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answ
5705 : failed : failed : 0.351040214 (s) : This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answ
5706 : failed : failed : 0.413026641 (s) : This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answ
5707 : failed : failed : 0.335880355 (s) : This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answ
5708 : failed : failed : 0.474257984 (s) : This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answ
5709 : failed : failed : 0.424921515 (s) : This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answ
5710 : failed : failed : 0.66775551 (s) : This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _. or - in the path, this will be updated at some point.Generate a RegEx for this description. Answ
5711 : failed : failed : 30.275837061 (s) : ([0-9]{3})[_.-](19[0-9]|20)
5712 : failed : failed : 0.166336745 (s) : ^[0-9]{3}[0-9]{3}[0-9]{3}[0-9]{4,5}[0-9]{2}[0-9]{2}$
5713 : failed : failed : 0.91700556 (s) : ^\\d{3}-\\d{4}-\\d{2}[5-9]\\d$
5714 : failed : failed : 0.626531463 (s) : ([0-9]{1,3})((\\s|-)([0-9]{1,3})((\\s|-)([0-9]{1,3}))+)\\s|-\\s|-\\s|
5715 : failed : failed : 0.331825492 (s) : PIN_\\d{0,4}[0-9]{3,4}
5716 failed : unparsable : 0 (s) : Please check your regex.
5717 : unparsable : unparsable : 0.054908242 (s) : (?<month>\\d{1,2})(?<year>[1-12]\\d{3})\\s+(?<day>\\d{2})    (?<year>\\d{3})(?<day
5718 : failed : failed : 0.942443135 (s) : (19*3*5) + (19*4*(4+50))
5719 : unparsable : unparsable : 0.085253597 (s) : (Regex) ([^0-9]|(0[1-9][0-9])|(1[0-2][0-9])|(3[0-1][0-9])|(4[0-6][0
5720 : unparsable : unparsable : 0.073559158 (s) : (?<month>.{3})(?(?=\\d)+
5721 : unparsable : unparsable : 0.067511093 (s) : ([
5722 : failed : failed : 2.752412755 (s) : \\
5723 failed : unparsable : 0 (s) : Please check your regex.
5724 : failed : failed : 3.359776625 (s) : /
5725 failed : unparsable : 0 (s) : Please check your regex.
5726 failed : unparsable : 0 (s) : Please check your regex.
5727 failed : unparsable : 0 (s) : Please check your regex.
5728 : unparsable : unparsable : 0.083421095 (s) : [
5729 : unparsable : unparsable : 0.060934667 (s) : [
5730 : unparsable : unparsable : 0.071455719 (s) : (
5731 : failed : failed : 15.045368074 (s) : (?i)^\\S+(?=\\s*[a-z]\\.)|(?<![a-z])\\S+(?=\\s*[A-Z])
5732 : failed : failed : 12.68471829 (s) : [A-Z]{3}[a-z0-9][A-Z]{3}[a-z0-9]
5733 : failed : failed : 0.354508419 (s) : r\"^[A-Z][a-z]*([a-z]\\d){3}$\"
5734 : failed : failed : 55.258603186 (s) : \\b(?i)([a-z][A-Z]*)(_)([0-9]*)(_)([a-z][A-Z]*)\\b
5735 : failed : failed : 0.865138413 (s) : ^a-zA-Z0-9, \\s*$
5736 : failed : failed : 62.647731033 (s) : [a-z]{5}(?=\\s?[A-Z])
5737 : failed : failed : 0.611954516 (s) : [A-Z][A-Z0-9]{1,2}
5738 : failed : failed : 6.180131039 (s) : [^A-Z]$
5739 : failed : timeout : 600 (s) : [a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+
5740 : failed : failed : 5.088608025 (s) : R([a-z])([A-Z])([a-z])
5741 : failed : failed : 0.320464528 (s) : ^([a-z]|[-_][a-z]){18}$
5742 : failed : failed : 1.447556229 (s) : [RegEx] [RegEx]
5743 : failed : failed : 0.845216046 (s) : A - H+0-9
5744 : failed : failed : 1.814504843 (s) : ([a-h])([1-8])?
5745 : failed : failed : 0.115031239 (s) : [0-9]
5746 : failed : failed : 0.182894622 (s) : [^A-H]\\d[^A-H]\\d[^A-H]\\d[^A-H]\\d[^A-H]\\d[^A-H]\\d[^A-H]\\d[^A-H]\\d.
5747 : unparsable : unparsable : 0.056066962 (s) : (?i)(^(?=)
5748 : failed : failed : 0.135445868 (s) : a-zA-Z0-9^-_]{0,32}
5749 : failed : failed : 0.270184111 (s) : [a-h][1-8]This should pass all the tests, but the way this is written, you would only need to pass one test. But what if the text was longer than 8 characters? So the character set would need to expand to a larger character set.
5750 : failed : failed : 19.660755006 (s) : (a-z|[A-Z]|0-9)a-z|[A-Z]|0-9(b-z|[A-Z]|0-9)|(c-z|[A-Z]|0-9)c-z[a-z]
5751 : unparsable : unparsable : 0.061433702 (s) : r'/\\d{1,3}/\\d{1,3}/\\d{1,3}/\\d{1,3}/\\d{1,3}/\\d{1,3}/\\d{1,3}/\\d{1,3}/\\d{1,3}/\\d{1,3}/\\d{1,3}/\\d{1,3}/\\d{1,
5752 : unparsable : unparsable : 0.078289586 (s) : (\\d{1,2})([-\\w]*)([\\d{1,2}))
5753 : failed : failed : 0.212019602 (s) : (1 - 65536)For each port in the range defined by the RegEx, use a loop to test if the port falls within that range and print a message that you define in the loop.
5754 : failed : failed : 0.121693495 (s) : ```python#import packagesimport re
5755 : failed : failed : 0.583085726 (s) : \\d {2}[a-z]{4}
5756 : failed : pumping failed : 32.981891284 (s) : /m/\\/.*\\/.*\\.([6-9]\\d\\d)*\\/.*/.
5757 : failed : failed : 1.541049987 (s) : \\b1[0-2][0-9]{3}[\\w-]{2,}\\b
5758 : failed : failed : 1.043190647 (s) : \\b(\\d{1,6})\\b
5759 : failed : pumping failed : 142.817098043 (s) : ([0-9a-fA-F\\s\\-]+)\\s*\\|\\s*([0-9a-fA-F\\s\\-]+)\\s*\\|\\s*([0-9a-fA-F\\s\\-]+)\\s*\\|\\s*([0-9a-fA-F\\s\\-]+)\\s*\\|\\s*([0-9a-fA-F\\s\\-]+)\\s
5760 : failed : timeout : 600 (s) : ^(?=.*/)(?=.*\\+)|(?=.*\\-)$
5761 : unparsable : unparsable : 0.08830976 (s) : (\\$\\d{1,3}(\\.\\d{3})?)(\\s[\\d\\-.]*\\s)?
5762 : failed : failed : 0.153319238 (s) : ^([\u20acEUR]|EURO)$
5763 : unparsable : unparsable : 0.071501976 (s) : ^(?!.{,}$)[0-9.]*[\u20ac|EUR|EURO]$
5764 : failed : failed : 2.122221258 (s) : [^0-9]+
5765 : failed : pumping failed : 36.235002326 (s) : [^\\s]*[-+]?\\d{1,2}
5766 : failed : failed : 5.142204831 (s) : ^(?=^.{5,}\\s[\u20ac]$)(?=^.{5,}\\s[+]$)(?=^.{5,}\\s[+\u20ac]$)(?=^.{5,}\\s[+\u20ac]$)(?=^.{5,}\\s[\u20ac]){5,}\\s[\u20ac]$
5767 : unparsable : unparsable : 0.066191722 (s) : \\w*e\\w* (note that the 'e' must be escaped, otherwise, the engine will treat it as a regular lett
5768 : failed : failed : 3.577431008 (s) : \\$|\\$\u20ac\\$\\$\\$\\$
5769 : failed : failed : 0.128485925 (s) : ^\\$[\\s\\S]*\\$
5770 : failed : failed : 18.053912987 (s) : @\"[^a-zA-Z0-9\\(\\,\\.\\)\\s]+\"
5771 : unparsable : unparsable : 0.077763631 (s) : (?<year>\\d+/\\d+/\\d+|\\d{4})/(?<month>\\d{2})/(?<day>\\d{2
5772 : failed : failed : 2.250749993 (s) : /^(?=.*\\d{4}-\\d{2}-\\d{2}).*
5773 : failed : failed : 0.555833503 (s) : (\\b\\d{1,2}\\d{1,2}\\d{4}\\b)
5774 : unparsable : unparsable : 0.110611904 (s) : (?<![\\w\\s][\\w\\s\\d\\d-]*)(\\d{4}-\\d{2}-\\d{2})(?![\\w\\s-])
5775 : failed : failed : 2.928432202 (s) : (4[1-9]|[12][0-9]|3[01])\\/(0?[1-9]|1[012])\\/(19|20)\\d{4}
5776 : failed : failed : 22.649808549 (s) : [0-9]{1,2}(\\/([3-9]|[1-2]\\d|3[01])\\/(\\d{2}|4[12]|[0-9]{3}))
5777 : unparsable : unparsable : 0.082295878 (s) : ^(04/01/1753|12/31/99|12/31/99|12/31/99|12/31/99|12/31/99|1/1/1753|1/1/1753|1/1/1753|1
5778 failed : unparsable : 0 (s) : Please check your regex.
5779 : failed : failed : 0.189255584 (s) : ^(19|20[0-2])\\/(0[1-9]|1[012])\\/(19|20[0-2])$
5780 : unparsable : unparsable : 0.089755528 (s) : [01/07/1753,01/08/1753,01/09/1753,01/10/1753,01/11/1753,01/12/1753,01/01/1453,01/02/1753,01/03/17
5781 : failed : failed : 0.340598441 (s) : (?s) \\b   (?<!\\.)                           # start of line    
5782 failed : unparsable : 0 (s) : Please check your regex.
5783 : failed : error init : 0.112797797 (s) : ^
5784 : unparsable : unparsable : 0.059573498 (s) : ^http[s
5785 : failed : failed : 2.235641281 (s) : \\b
5786 : failed : failed : 2.113003036 (s) : \\b
5787 : unparsable : unparsable : 0.054945723 (s) : ```pythonipv4_pattern = r\"^[0-9]{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\"ipv6_pattern = r\"^[0-9a-fA-F]{1,
5788 : unparsable : unparsable : 0.07872969 (s) : ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}([25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
5789 : failed : failed : 3.240906818 (s) : [IP_V4]{1,3}\\.{1,3}\\.{1,3}\\.{1,3}\\.
5790 : failed : failed : 0.732600229 (s) : \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/v3
5791 : failed : failed : 0.32416637 (s) : ^[a-zA-Z0-9\\-\\.]{1,30}
5792 : failed : failed : 0.604814195 (s) : ^[a-zA-Z0-9-_]{2}\\.[a-zA-Z0-9-_]{2}$
5793 : failed : failed : 16.237510229 (s) : ^([a-zA-Z0-9_-]+)@([a-zA-Z0-9]{2,15})$
5794 : failed : failed : 0.430769586 (s) : ([\\w\\d\\-\\.]+)\"It will match the followi
5795 failed : unparsable : 0 (s) : Please check your regex.
5796 : unparsable : unparsable : 0.116149423 (s) : ^(?!.*
5797 : failed : failed : 6.149678002 (s) : [0-9][a-zA-Z0-9_]*
5798 : unparsable : unparsable : 0.068301382 (s) : (?<=^(?<value>\\d{2})\\s)(?<=\\$)([^,]+)(,\\s+)?(?=\\$)(?<value>\\d{2})?
5799 : failed : failed : 22.434129125 (s) : ([0-9]{1,3}\\.){3}\\[0-9]{1,3}\\.[0-9]{1,3}
5800 : unparsable : unparsable : 0.097848572 (s) : (this is a link to a good RegEx for this descriptio
5801 : failed : failed : 4.088451975 (s) : (\\d{1,3}\\.){3}\\d{1,3}
5802 : failed : failed : 0.331729993 (s) : ^([0-9]{1,2}\\.){3}([0-9]{1,2}\\.){3}([0-9]{1,2})$
5803 : failed : failed : 2.51826702 (s) : (\\d{1,3}\\.){3}\\d{1,3}
5804 : failed : failed : 0.441349589 (s) : ^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$
5805 : failed : failed : 6.659964934 (s) : \\d{1,3}\\.(\\d{1,3}\\.){3}\\d{1,3}|\\d{1,3}\\.(\\d{1,3})
5806 : failed : failed : 0.809008814 (s) : \\d[\\.\\-\\,\\/]\\d{2}[\\.\\-\\,\\/]\\d{2}[\\.\\-\\,\\/]\\d{2}[\\.\\-\\,\\/]\\d{2}
5807 : failed : failed : 2.309383752 (s) : .NET regular expression patte
5808 : failed : failed : 0.480842284 (s) : r'^(\\d{1,3}\\.){3}\\d{1,3}$'
5809 : failed : failed : 0.937476755 (s) : \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\"\"\"
5810 : failed : failed : 83.396331278 (s) : (?<=^|\\s).*(?=\\s|$)
5811 : failed : failed : 1.642429712 (s) : ^(?=[^/]*$)\\d{1,2}[-.]\\d{2,4}$
5812 : failed : error init : 0.106533927 (s) : (?i)
5813 : failed : failed : 0.503410776 (s) : ^(0?[1-9]|1[0-2])\\/(0?[1-9]|[12][0-9]|3[01])\\
5814 : unparsable : unparsable : 0.086855928 (s) : ^(0[1-9]|1[0-2])\\/(0[1-9]|1[012])\\/(19[2-9]|20[0-
5815 : unparsable : unparsable : 0.096350157 (s) : ((0[1-9]|1[012])/([0-9]{1,2}[0-9]|3[01])/([0-9]{4})
5816 : unparsable : unparsable : 0.084675364 (s) : ^(?!(00|0|(02|0|4|6)|01|1|2|3|4|5|8)|(02|0|4|6)|(
5817 : failed : failed : 0.301360533 (s) : (?<month>\\d\\d)(?<day>\\d\\d)?(?<year>\\d\\d)?
5818 : failed : failed : 3.128843806 (s) : \"(?!^).{1,2}(?=([-.]{2}))\"
5819 : failed : failed : 0.196126671 (s) : ^[0-9]{1,2}[0-9]{1,2}[0-9]{1,2}$
5820 : failed : failed : 0.639584227 (s) : (^(0[1-9]|1[012])([-\\/.])(0[1-9]|[12][0-9]|3[01])$)
5821 : unparsable : unparsable : 0.084001754 (s) : (^\\d{1,2
5822 : unparsable : unparsable : 0.055691308 (s) : (?=^[0-9]{1,2}$)(?=^[0-9]{1,4}$)(?=^[0-9]{
5823 : unparsable : unparsable : 0.06909051 (s) : ddMMyY[2-9]d[0-9][0-9] [2-9][0-9][0-9] [2-9][0-9][
5824 : failed : failed : 8.816123534 (s) : [0-9]{1,4}-[0-9]{1,2}-[0-9]{1,2} [0-9]{1,2}
5825 : unparsable : unparsable : 0.062366599 (s) : ^[0-9]{4}[\\-0-9]{2}[0-9]{2}[0-9]{2}[0-9]{
5826 : unparsable : unparsable : 0.091750444 (s) : (?<=
5827 : failed : failed : 0.197430352 (s) : yyyymmddhhmmss[0-9]
5828 : unparsable : unparsable : 0.064336557 (s) : ^(0[1-9]|1[012])/(0[1-9]|[12])/[0-9]{2}[0-9]{2
5829 : unparsable : unparsable : 0.067814551 (s) : (?i)\\d\\d\\d\\d-(\\d{2})-(\\d{2})-(\\d{2})\\.(\\d{2
5830 : unparsable : unparsable : 0.093229914 (s) : (\\d{2}\\/\\d{2}\\/\\d{4}|\\d{2}\\/\\d\\d\\/\\d{4}|\\d{2}
5831 failed : unparsable : 0 (s) : Please check your regex.
5832 : failed : failed : 0.126301214 (s) : ^[ ]*\\d+[ ]*$
5833 : failed : failed : 2.561659948 (s) : \\d{1,3}\\.\\d{1,3}.\\d{1,3}.\\d{1,3}
5834 : failed : failed : 1.890691752 (s) : \\d
5835 : failed : failed : 1.0105906 (s) : (^[1-9][0-9]|[1-9][0-9]0|[1-9][0-9]|[1-9][0-9]0$ )
5836 : failed : error init : 0.105943863 (s) : ^
5837 : failed : failed : 10.096192773 (s) : -([0-9]|[1-9][0-9]|1[0-9]{2})$
5838 : failed : failed : 0.216432365 (s) : [0-1]?[0-9]?[0-1]?[0-9]?[0-9]?.
5839 : failed : failed : 1.581437567 (s) : \\b(?!\\d)$
5840 : failed : pumping failed : 538.752724333 (s) : .*\\d+
5841 : failed : failed : 0.151939445 (s) : ^-?\\d{1,3}(.{0,3})?$
5842 : failed : failed : 4.049238093 (s) : \\b(0|[1-9][0-9]*)\\b
5843 : failed : failed : 0.139939723 (s) : ^[(][1-9][0-9][)]*$Generate a RegEx to match that number.
5844 : failed : failed : 15.980265007 (s) : -?\\d{1,3}\\.?\\d{1,3}\\.?\\d{1,3}|-?\\d{1,3}\\.?\\d{1,3}|-?\\d{1,4}\\.?\\d{1,3}
5845 : failed : failed : 0.140922504 (s) : ^\\-?
5846 : failed : failed : 1.555377026 (s) : \\b\\d{3}(,\\d{3})?\\b
5847 : failed : failed : 2.091092115 (s) : \\b
5848 : unparsable : unparsable : 0.082895181 (s) : \\b[0-9]\\{1,2\\}\\b
5849 : failed : failed : 7.674800153 (s) : (?<!\\d)         ^     
5850 : unparsable : unparsable : 0.114745825 (s) : ^(?P<small>\\d{1,3})-(?P<big>\\d{1,3})-(?P<range>\\d{1,3})-(?P<sign>[-])?$
5851 : failed : failed : 0.149948557 (s) : [0-9a-f]{1,2}
5852 : failed : failed : 0.616564159 (s) : ^(?=.*[0-9])[0-9]$
5853 : failed : failed : 0.873583898 (s) : \\d{6}
5854 : failed : failed : 1.48908179 (s) : r'^[01]{0,1}[0-5]{0,1}[0-9]+$'
5855 : failed : failed : 532.707157394 (s) : ^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*(?![^a-zA-Z\\d]*$).*$
5856 : failed : failed : 23.167466394 (s) : (0|1|2|3|4|5|6|7|\\d*)%
5857 : failed : failed : 2.218042765 (s) : \\b
5858 : failed : failed : 3.868586702 (s) : \\d{1}\\s*\\d{1}\\s*\\d{1}\\s*
5859 : unparsable : unparsable : 0.073694611 (s) : \\\\x{[0-9a-fA-F]+}
5860 : failed : failed : 24.169018428 (s) : [0-9a-fA-F]{8}  (in C#)
5861 : failed : failed : 2.064780564 (s) : (0x[0-9a-fA-F]+)
5862 : failed : failed : 12.305371199 (s) : [0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}
5863 : failed : failed : 1.252725175 (s) : [0-9]\\d{7}$
5864 : failed : failed : 0.242121971 (s) : ^[0-9]{32}$
5865 : failed : failed : 0.997723905 (s) : [0-9]{1,2}[0-9]{2,3}
5866 : failed : failed : 0.782575404 (s) : 0-9,., +, -, *, /, %, ^, &, $, [a-z], \\d, {3,4}
5867 : failed : failed : 102.324351713 (s) : (0)0+(1)1+2
5868 : failed : failed : 3.566784442 (s) : ([0-9a-fA-F]+)
5869 : failed : failed : 4.748306991 (s) : (\\d+)(\\.\\d+)?
5870 : failed : failed : 0.904206222 (s) : 0[1-9]|[1-2][0-9]|3[01]
5871 : unparsable : unparsable : 0.089980519 (s) : \\d{1,2}(
5872 : unparsable : unparsable : 0.074777841 (s) : (?(?=\\d{1,
5873 failed : unparsable : 0 (s) : Please check your regex.
5874 : unparsable : unparsable : 0.077715421 (s) : ([5-9][0-9]|1[0-2][0-9
5875 : unparsable : unparsable : 0.121142554 (s) : (?P<hours>[0-9]{1,2
5876 : unparsable : unparsable : 0.059449696 (s) : ^\\d{
5877 : failed : failed : 0.202242433 (s) : %m%s%H%M%S
5878 : failed : error init : 0.131925646 (s) : ^$|
5879 : unparsable : unparsable : 0.08095083 (s) : ^([0-3][0-9]|[0-5][0-9]|0[0-9])?[0-9][0-
5880 : failed : failed : 2.879370478 (s) : [1-6]\\d{0,2}[AP]M?
5881 : failed : failed : 0.621687222 (s) : (?x)(^\\d{1,2})([/-](\\d{1,2})|\\d{1,2})(\\.\\d{2})$
5882 : failed : failed : 0.26675517 (s) : \\d/\\d\\/\\d{4}
5883 : failed : failed : 0.269412186 (s) : (?<![^\\d\\.])[0-9]{1,2}[-/.][0-9]{2,4}[,.][0-9]{4}See examples.Generate a RegEx for this description. Answ
5884 : failed : failed : 0.836436746 (s) : (\\d/\\d/\\d)
5885 : unparsable : unparsable : 0.061445483 (s) : (?!.*\\d)(?!.*\\d$)(?<!\\d)(?!\\d$)(?!d$)(?!m$)^(?!.*\\d)(?!.*\\d$)(?!\\d$)(?!d$)(?!m$)(?!m$)(?!m$)(?!x$)(?!y$)(?!z$)(?!y$)(?!y$)(?!z$)(?!y$)(?!y
5886 : failed : failed : 0.890524882 (s) : (?<day>\\d{1,2})\\/(?<month>\\d{1,2})\\/(?<year>\\d{4})
5887 : unparsable : unparsable : 0.05957434 (s) : \\d{1,2}\\/\\d{1,2}\\/\\d{4 }
5888 : failed : failed : 0.17824792 (s) : ^\\d{2}-\\d{2}-\\d{4}$
5889 : failed : failed : 1.636686558 (s) : (\\d\\d)\\/(\\d\\d)\\/(\\d\\d)(\\.\\d+)?
5890 : unparsable : unparsable : 0.075122996 (s) : (?P<month>\\d)/(?P<day>\\d)/(?P<year>\\d)
5891 : failed : error init : 0.107958826 (s) : ^
5892 : unparsable : unparsable : 0.06914381 (s) : ^([0-9]{
5893 : failed : failed : 0.154138693 (s) : #! /usr/bin/perl
5894 failed : unparsable : 0 (s) : Please check your regex.
5895 : unparsable : unparsable : 0.068743991 (s) : /^\\[(\\
5896 : unparsable : unparsable : 0.056325316 (s) : \\d{2
5897 : unparsable : unparsable : 0.079726317 (s) : (0[1-9]|1[0-9]|2[0-3]|[0-1][1-9
5898 : unparsable : unparsable : 0.120883669 (s) : (
5899 : unparsable : unparsable : 0.099745966 (s) : [1-7][0-9][0-9][0-
5900 : unparsable : unparsable : 0.064259624 (s) : (?!
5901 : failed : failed : 0.179494915 (s) : ^[0-9]{3} - start. $1 is start. $2 is stop.
5902 : failed : failed : 4.344508571 (s) : [0-9][1-9][2-9][0-9][1-9][2-9]\\.[0-9][0-9]
5903 : failed : failed : 250.28921178 (s) : [a-zA-Z]{4,12}\\b
5904 : failed : failed : 0.270006879 (s) : $2 is stop; $1 is start; ^
5905 : failed : failed : 0.725548886 (s) : e. g.
5906 : failed : failed : 0.508127779 (s) : \\$1 is +\\$2;
5907 failed : unparsable : 0 (s) : Please check your regex.
5908 : failed : pumping failed : 44.706411852 (s) : /(?=([^;]*;){2})([^;]*)(?=([^;]*){2})/Generate a RegEx for this description. Answ
5909 : unparsable : unparsable : 0.081060926 (s) : .{,16}Blah, blah, blah.
5910 : failed : failed : 0.130146525 (s) : ^\\d{11}[^;{]*;[^;{]*$
5911 : unparsable : unparsable : 0.060971967 (s) : (?<=\\s*\"[^\"]*\"\\s*)
5912 : failed : failed : 0.162058674 (s) : \"
5913 : failed : failed : 0.914470413 (s) : \"[^\"]+
5914 : failed : failed : 0.112191461 (s) : \\W
5915 : failed : failed : 9.642063994 (s) : \"([^\"]*)\"
5916 : failed : failed : 9.673342296 (s) : \"([^\"]*)\"
5917 : failed : failed : 7.787951131 (s) : \".*\"
5918 : failed : failed : 11.06601026 (s) : \"([^\"]*)\"
5919 : failed : pumping failed : 259.137628833 (s) : [(?s)(\" + \" | [^\"\\s]+ | $)]*    \"\"\"
5920 : failed : failed : 0.974350234 (s) : \\\"[*]+\\\"
5921 : failed : failed : 0.332408924 (s) : This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. No
5922 : failed : failed : 0.204476667 (s) : This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. No
5923 : failed : failed : 0.225280063 (s) : This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. No
5924 : failed : failed : 0.278886077 (s) : This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. No
5925 : failed : failed : 0.275435926 (s) : This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. No
5926 : failed : failed : 0.246543431 (s) : This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. No
5927 : failed : failed : 0.287294162 (s) : This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. No
5928 : failed : failed : 0.255596434 (s) : This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. No
5929 : failed : failed : 0.211019388 (s) : This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. No
5930 : failed : failed : 0.260407264 (s) : This expression will allow whole dollar amounts (along with $ and,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. No
5931 : failed : failed : 0.479008429 (s) : ^[0-9]*$
5932 : failed : failed : 1.333211124 (s) : [2-9][0-9]|1[012]
5933 : failed : failed : 0.207542006 (s) : $3 to $9
5934 : failed : failed : 2.565411644 (s) : ^(?=.*\\d)([^\\d]|[\\d]\\d)\\d{1,4}$
5935 failed : unparsable : 0 (s) : Please check your regex.
5936 : failed : failed : 5.186525457 (s) : \\d{1,2}?\\.|\\d{1,3}\\.|\\d{1,4}\\.|\\d{1,5}\\.|\\d{1,6}
5937 : failed : failed : 0.222379772 (s) : \\d  - Matches a single digit.
5938 : failed : failed : 0.145166051 (s) : x\\d{1,2}-\\d{1,2}-\\d{1,2}-\\d{1,2}-\\d{1,2}, where x is any letter from a to z, and {1,2} is a range of consecutive digits, e.g. 0-9.
5939 : failed : failed : 27.922473943 (s) : (?i)(?<=^|\\s)([-1-9]|1[0-2])(?=$|\\s)
5940 : failed : failed : 0.234737824 (s) : public static final String REGEX_NUMBER = \"^-?\\\\d*(\\\\.\\\\d+)?\";
5941 : failed : failed : 4.721068253 (s) : ^[0-9]+(,[0-9]+)?(,[0-9]+)$
5942 : failed : failed : 3.430588979 (s) : \\d+(\\.\\d+)?
5943 : failed : failed : 0.908725615 (s) : 0.1,0.01,0.001,0.0001,-0.0001,0.00001,0.0000001,1,1e-9,1e-15,1e-21
5944 : failed : pumping failed : 112.5458838 (s) : var REGEX = new Regex(@\"(?<number>.+)(,\\s(?<thousands>.+))?(\\.\\s(?<dot>.+))?(,\\s(?<commas>.+))?\", RegexOptions.IgnoreCase);
5945 : failed : failed : 6.14717248 (s) : \\d+| \\d\\.\\d+| \\d+,\\d+,\\d+
5946 : failed : pumping failed : 105.771731275 (s) : [\\d.]+,[\\d.]+,?[\\d\\.]+|\\d+\\,\\d+\\,\\d+\\.\\d+|\\d+\\.\\d+\\.\\d+
5947 : unparsable : unparsable : 0.090444448 (s) : (?<=^)|(?<=\\.|,)^|(?<=^|\\.)(?=[1-9][0-9]*\\.?[0-9]*\\.[0-9]*$)(?<!\\.){3,}([1-9][0-9]*(,[1-9][0-9]*)*[
5948 : failed : pumping failed : 13.775652262 (s) : (([0-9.]+)\\,[0-9.]+)|([0-9.]+-([0-9.]+))|([0-9.]+,[0-9.]+)|([0-9.]+\\,[0-9.,]+)
5949 : failed : failed : 3.197303786 (s) : \\d{1,6}
5950 : failed : failed : 0.767666917 (s) : ^([1-9]+\\.)?([1-9]+)([,]|[,.])([0-9]+[,]?)?$
5951 : failed : failed : 0.703733223 (s) : r'^
5952 : failed : failed : 0.766175744 (s) : ^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])
5953 : unparsable : unparsable : 0.096677911 (s) : ?[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}
5954 : failed : failed : 0.6877488 (s) : ^192\\.168\\.0\\..*$
5955 : failed : failed : 1.436937093 (s) : (\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})
5956 : failed : failed : 0.21394104 (s) : ^([0-9]{1,2}\\.){3}[0-9]{1,2}$
5957 : failed : failed : 0.508837548 (s) : /^
5958 : unparsable : unparsable : 0.082263999 (s) : \\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]
5959 : failed : failed : 2.258250679 (s) : \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}
5960 : failed : error init : 0.113824259 (s) : ^
5961 failed : unparsable : 0 (s) : Please check your regex.
5962 : failed : failed : 0.55634418 (s) : /^[0-9a-f]{3}[0-9a-f]{3}[0-9a-f]{6}$/.
5963 : failed : failed : 1.052175562 (s) : ^\\d{3,6}$
5964 : failed : failed : 0.716441581 (s) : [0-9A-Fa-f]{3}
5965 failed : unparsable : 0 (s) : Please check your regex.
5966 : failed : failed : 1.883749482 (s) : [A-Fa-f0-9]{3}|[A-Fa-f0-9]{6}
5967 : failed : failed : 0.117673067 (s) : ^\\b#\\d{1,3}
5968 : failed : error init : 0.099339404 (s) : (?<![A-Fa-f0-9])
5969 : failed : failed : 0.64211229 (s) : ^#[0-9a-f]{6}|^#[0-9a-f]{3}$
5970 : failed : error init : 0.110186227 (s) : ^
5971 : failed : failed : 3.401140494 (s) : \\s*(\\d+)/
5972 : failed : failed : 5.634048446 (s) : [a-zA-Z0-9_.-]+
5973 : failed : pumping failed : 587.887125997 (s) : .+?\\s+
5974 : failed : failed : 3.116783552 (s) : ^[\\s\\S]+?\\s$
5975 : failed : failed : 0.992409774 (s) : (?<=^|\\.)(?=\\W|$)                                       ^^ ^^^
5976 : failed : failed : 12.10096797 (s) : [a-z]{3}-[a-z]{3}-[a-z]{3}
5977 : failed : failed : 9.821272333 (s) : \\A\\b[A-Za-z0-9-_]+\\b\\z
5978 : failed : pumping failed : 117.248869421 (s) : ([0-9]+)\\s([a-z]+)\\s([0-9]+)\\s.
5979 : failed : failed : 27.562806112 (s) : \\D(?=\\s[^\\s]*\\s$)
5980 : unparsable : unparsable : 0.085263486 (s) : /^\\s*(?P<name>[^ ]+)[^ ]+\\s*$/gi Explanati
5981 : failed : failed : 0.355527487 (s) : match string between chars'' as in source codeGenerate a RegEx for this description. Answ
5982 : failed : failed : 0.554298599 (s) : match string between chars'' as in source codeGenerate a RegEx for this description. Answ
5983 : failed : failed : 0.247276634 (s) : match string between chars'' as in source codeGenerate a RegEx for this description. Answ
5984 : failed : failed : 0.34513768 (s) : match string between chars'' as in source codeGenerate a RegEx for this description. Answ
5985 : failed : failed : 0.314234411 (s) : match string between chars'' as in source codeGenerate a RegEx for this description. Answ
5986 : failed : failed : 0.250962758 (s) : match string between chars'' as in source codeGenerate a RegEx for this description. Answ
5987 : failed : failed : 0.301405898 (s) : match string between chars'' as in source codeGenerate a RegEx for this description. Answ
5988 : failed : failed : 0.314926436 (s) : match string between chars'' as in source codeGenerate a RegEx for this description. Answ
5989 : failed : failed : 0.621515531 (s) : match string between chars'' as in source codeGenerate a RegEx for this description. Answ
5990 : failed : failed : 0.292762392 (s) : match string between chars'' as in source codeGenerate a RegEx for this description. Answ
5991 failed : unparsable : 0 (s) : Please check your regex.
5992 : failed : error init : 0.115429245 (s) : (?m)
5993 : failed : failed : 3.471841099 (s) : (\\S+)(N|S)(\\d{1,2})(\\d{2}).*
5994 failed : unparsable : 0 (s) : Please check your regex.
5995 : failed : failed : 2.416077578 (s) : (N|S|E|W) (\\d|\\d\\d|\\d\\d\\d) (\\d|\\d\\d|\\d\\d\\d)
5996 : failed : failed : 5.227324327 (s) : N(?=[^NWSW]*[NS])([0-9]|[1-9][0-9])S(?=[^NWSW]*[WE])([0-9]|[1-9][0-9])
5997 : failed : failed : 0.949934473 (s) : (N|S|E|W) (\\d+)\\.\\d+
5998 : unparsable : unparsable : 0.075947451 (s) : [N|S|E|W]    [N|S]?[0-9]?[0-9]?[0-9]    [N|S]?[0-9]?[0-9]    [0-
5999 : failed : failed : 1.496667915 (s) : [N|S|E|W]? [\\d]{0,2} [\\d]{0,2}[\\d]{0,2}
6000 : unparsable : unparsable : 0.106558574 (s) : (?P<coord1>\\d{2} \\d{2})  (?P<coord2>\\d{2} \\d{2
6001 : failed : failed : 0.386369603 (s) : /^[0-9]{8}
6002 : unparsable : unparsable : 0.067467421 (s) : 0[0-9]{7,}Here is a RegEx I tested. $valid =!preg_match('/^[0-9]{7,}$/
6003 : failed : failed : 0.480652347 (s) : \\b\\d{5}\\b
6004 : failed : failed : 0.898795971 (s) : \\d{6}\\d{0,5}
6005 : failed : failed : 0.13893389 (s) : ^([\\d]{8})($|[-\\s]+)
6006 : failed : failed : 0.14840155 (s) : ^[a-zA-Z0-9]{6}\\d{2}$
6007 : failed : failed : 0.149156723 (s) : \"^[0-9]{7}[a-zA-Z0-9]$\"
6008 : unparsable : unparsable : 0.092934912 (s) : (^\\d{0,6}\\d{0,5}\\d{0,4}\\d{0,3}\\d{0,2}\\d{0,1}\\d{
6009 : unparsable : unparsable : 0.06026863 (s) : \\b(10[0-9]|11[0-9]|12[0-9]|13[0-9]|14[0-9]|15[0-
6010 : failed : failed : 1.88994837 (s) : (?<prefix>0[9]|[13][0-9])[0-9]{3} [0-9]{3}-[0-9]{4}
6011 : failed : failed : 1.758381245 (s) : \\b[0-9]{8}\\b
6012 : failed : failed : 0.147107146 (s) : ^[0-9a-f]{8}(-[0-9a-f]{4}|[0-9a-f]{2}|[0-9a-f])$
6013 : failed : failed : 0.166163129 (s) : ^\\\\d{8}$
6014 : failed : failed : 0.171276856 (s) : ^\\d{1,7}$
6015 : failed : failed : 1.883394717 (s) : (?=^.{8}$)
6016 : failed : failed : 0.12926267 (s) : ^[0-9]{8}$
6017 : failed : failed : 0.135767551 (s) : ^[0-9]{8}$
6018 : failed : failed : 0.116209496 (s) : ^[a-zA-Z0-9]{8}$
6019 : failed : failed : 0.144007171 (s) : ^[0-9]{7}$
6020 : unparsable : unparsable : 0.087504302 (s) : {9,0}(?=[^0]*0){8,}
6021 : failed : failed : 1.47434318 (s) : \\s
6022 : failed : failed : 0.572519771 (s) : ^[A-Za-z0-9,\\./\\\\]*$
6023 : failed : failed : 0.938432696 (s) : ^[^\\s]+$
6024 : failed : failed : 0.294577381 (s) : ^[\\w\\s]*$
6025 : failed : failed : 6.383300688 (s) : ^[^\\s]*$
6026 : failed : failed : 4.99994334 (s) : ^[^ ]*   # beginning of line    [a-zA-Z0-9_]* # string of alphanumeric characters (upper and lower)    [a-zA-Z]    # string of alphabetic characters    $       # end of line
6027 : failed : failed : 1.971505535 (s) : \\s+
6028 : failed : failed : 0.786075568 (s) : [^a-zA-Z0-9\\-_]
6029 : failed : failed : 0.673037933 (s) : \\b\\w+\\b
6030 : failed : failed : 0.74389517 (s) : ^[a-zA-Z0-9_]*$
6031 : failed : failed : 0.231782019 (s) : ^(0[1-9]|1[012])\\/(3[01])\\/(19|20)\\d{2}$
6032 : unparsable : unparsable : 0.056612473 (s) : [d/m/yyyy, 
6033 : failed : failed : 0.573139922 (s) : \\d{2}\\/\\d{2}\\/\\d{4} (dd/mm/yyyy) or \\d{2}/\\d{4}/\\d{4}
6034 : failed : failed : 0.25429643 (s) : (\\d{19})-(\\d{2})-(\\d{4} \\d{2} \\d{2})
6035 : failed : failed : 33.058789315 (s) : \\s*[a-zA-Z0-9\\-\\_\\(\\)\\.]+\\s*
6036 : unparsable : unparsable : 0.07266299 (s) : ^([0-9]{1,2}/[0-9]{1,2}/[0-9]{4}|[0-9]{1,2}-)[0-9]{1,
6037 : failed : failed : 0.804522853 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
6038 : unparsable : unparsable : 0.119503614 (s) : (2.0.0) [01-31-1999 
6039 : unparsable : unparsable : 0.106302053 (s) : var date_regex = /^[A-Za-z-_\\+\\?\\=\\.]+[0-9]{0,2}[0-9]{1,2}[0-9]{4}\\.[0-9]{
6040 : unparsable : unparsable : 0.106444119 (s) : \\d{2}/\\d{2}/\\d{4} \\d{
6041 : failed : failed : 0.932585626 (s) : (?=[^,]*,){2,}(?=[^,]*,){2,}
6042 : failed : failed : 0.716689515 (s) : ^(?=.*[^e])(?!.*e)[\\p{L}]{2,}$
6043 failed : unparsable : 0 (s) : Please check your regex.
6044 : failed : failed : 0.833276968 (s) : \\b[a-z0-9]{1,2}
6045 : unparsable : unparsable : 0.085140485 (s) : ^(.{1,9}
6046 : failed : failed : 17.201545128 (s) : (\\w){3,}|(?!\\w{2})\\w{1,3}
6047 : failed : failed : 0.180222378 (s) : /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*(-_=+)])(?=.{1,20})$/         ^                    ^                         ^                   ^         |                    |                         |                    |         |                    |
6048 : failed : failed : 2.120924099 (s) : ^([^\\s]|\\s){0,2}\\s*$
6049 : failed : failed : 169.60312564 (s) : (?=.{2})(?=(\\S|$))
6050 : failed : failed : 9.261783905 (s) : \\w*(.)\\w\\1\\w*
6051 : failed : failed : 0.702459939 (s) : [a-zA-Z0-9._-]{5,15}
6052 : failed : failed : 0.298513943 (s) : ^(?=.{5,15}$)(?=\\S+$)[a-z]+$
6053 : failed : failed : 5.097251651 (s) : ^[a-zA-Z0-9._-]+$
6054 : failed : failed : 1.539700569 (s) : ^(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[a-z\\d@$!%*?&]{5,15}$
6055 : failed : failed : 6.045646251 (s) : [a-zA-Z0-9\\.\\_\\-\\_\\s]
6056 : failed : failed : 6.076464912 (s) : ^(?![a-z0-9\\-\\_]*$)[a-z0-9\\-\\_\\.]{5}$
6057 : failed : failed : 0.698475818 (s) : ^\\w{5,15}$
6058 : failed : failed : 0.201247289 (s) : ^[a-zA-Z0-9._-]{5,15}$
6059 : failed : failed : 0.204175372 (s) : ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}$
6060 : failed : failed : 0.145591838 (s) : ^\\\\w{5,15}$
6061 : failed : failed : 0.214154499 (s) : ^[a-zA-Z][a-zA-Z0-9]{1,5}$
6062 : failed : pumping failed : 28.054634399 (s) : (.+?)(?=\\s|$)
6063 failed : unparsable : 0 (s) : Please check your regex.
6064 : failed : failed : 0.908523778 (s) : ^(?=.*[a-z])[a-z0-9]{5,12}$
6065 : failed : failed : 0.237901728 (s) : ^\\s*[A-Za-z0-9_-]{5,12}$
6066 : failed : failed : 0.9645752 (s) : ^[a-z]{5,12}$
6067 : failed : failed : 8.96572517 (s) : ^\\s*[a-zA-z0-9]{5,12}\\s*$
6068 : failed : failed : 189.125456 (s) : ^[a-zA-Z0-9 ]*[0-9]{5,12}$
6069 : failed : failed : 1.20003684 (s) : [A-Za-z0-9_-]{5,12}
6070 : failed : failed : 0.218958726 (s) : ^(?<!\\S)(?<!\\s\\s{5})(?!\\s\\s{12})\\S+$
6071 : failed : failed : 0.372733838 (s) : India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answ
6072 : failed : failed : 0.348166102 (s) : India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answ
6073 : failed : failed : 0.383163378 (s) : India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answ
6074 : failed : failed : 0.417731481 (s) : India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answ
6075 : failed : failed : 0.376517944 (s) : India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answ
6076 : failed : failed : 0.35757453 (s) : India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answ
6077 : failed : failed : 0.31080564 (s) : India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answ
6078 : failed : failed : 0.325531085 (s) : India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answ
6079 : failed : failed : 0.336132828 (s) : India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answ
6080 : failed : failed : 0.437714381 (s) : India phone number, accept with optional +91 national code and 0 for land and mobile number prefix. Allows optional - after national codeGenerate a RegEx for this description. Answ
6081 : failed : failed : 0.211183376 (s) : ^[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}$
6082 : unparsable : unparsable : 0.06153421 (s) : (?P<days>\\d{1,3}d?)?(?(?P<hours>\\d{1,2}h?)?(?(?P<minutes>\\d{1,2}m?)?))?
6083 : unparsable : unparsable : 0.061804577 (s) : (?<![0-9]\\d{2}[a-zA-Z]\\d{1}[a-zA-Z\\d]\\d{1}[a-zA-Z\\d]\\d{4})\\(?[0-9]\\d{2}[a-zA-Z]\\d{1}[a
6084 : failed : error init : 0.107504475 (s) : ^
6085 : failed : failed : 20.5529786 (s) : (\\d{1,2})(\\d?)([hmo])?(?=\\s\\d{1,2}?\\s|$)
6086 : failed : failed : 2.744550092 (s) : [0-9]{1,3}(.0{1,2})?[0-9]{1,2}(.0{1,2})?
6087 : unparsable : unparsable : 0.063568219 (s) : ^(?P<year>\\d\\d\\d\\d)(-?(?P<month>\\d\\d))(-(?P<day>\\d\\d))?(-(?P<hour>\\d\\d))?(-?(?P<minute>\\d\\d))?(-(?P<second>\\d\\d))$
6088 : failed : failed : 92.103456229 (s) : 0?[1-9]|1[012]|2[012]|3[012]|4[012]|5[012]|6[012]|7[012]|8[012]|9[012]|[1-9]|0?[1-9]|1[012]
6089 : failed : failed : 0.278160117 (s) : ^(([^0-9]|(0[1-9]|1[0-2]))|([0-9]{1,2}))[0-9]{0,2}[0-9]{0,2}$Examp
6090 : failed : failed : 0.480969873 (s) : \\d{4}
6091 : failed : error init : 0.108034658 (s) : ^
6092 : failed : failed : 19.829852852 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2}
6093 : failed : failed : 0.65887454 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
6094 : unparsable : unparsable : 0.103150782 (s) : ([1-12]|[1-9][0-9])\\/((1[0-2]|0[1-9])|(3[01]
6095 : unparsable : unparsable : 0.067103499 (s) : ^\\s*(?P<month>\\d{1,2})\\s*(?P<day>\\d{1,2})$
6096 : failed : failed : 0.500330898 (s) : ^(\\d{4})(-(\\d{2})(-|\\d{1}))?$
6097 : unparsable : unparsable : 0.063938964 (s) : \\b((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{1,2}|Jan
6098 : failed : failed : 0.412467443 (s) : month/day/year(?!\\s*0*\\d)\\d{1,2}/\\d{1,2}/\\d{4}
6099 : failed : failed : 6.406281622 (s) : 0?(3[0-9]|[6-9])[0-9]{2}$
6100 : failed : failed : 0.19244691 (s) : ^[0-9][0-9][0-9][0-9]\\/[0-9][0-9][0-9][0-9]
6101 : unparsable : unparsable : 0.074057381 (s) : ^(?P<year>\\d{4})(?P<month>\\d{2})(?P<day>\\d{2})$
6102 : failed : failed : 1.544274244 (s) : \\d{1,2}(\\/\\d{1,2}(\\/\\d{4})?(\\/\\d{1,2}(\\/\\d{4})?))
6103 : failed : failed : 1.636667962 (s) : #(0|[1-9][0-9])/(0?[1-9][0-9])/([1-9][0-9])
6104 : unparsable : unparsable : 0.065919733 (s) : (\\d{1,2})/(\\d{2})/(\\d{4}|\\d{2})(/|-|?\\d{2})?
6105 : unparsable : unparsable : 0.128981874 (s) : /^(0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|1[012])\\/(19|20)\\d{4}$/ /^[01]?[0-9]*\\/[01]?[0-9
6106 : failed : failed : 0.802793976 (s) : ^\\d{2}\\/\\d{2}\\/\\d{4}$
6107 : failed : failed : 1.329799065 (s) : \\d{2}\\/\\d{2}\\/\\d{4}
6108 failed : unparsable : 0 (s) : Please check your regex.
6109 : failed : failed : 0.685426873 (s) : \\b(0?[1-9]|1[012])\\/(0?[1-9]|1[012])\\/(19|20)\\d\\d\\d\\b
6110 : failed : failed : 0.628276391 (s) : ^0?[1-9]?[0-9]
6111 : failed : failed : 0.12108723 (s) : [^\\w\\d\\s\\(\\)]
6112 failed : unparsable : 0 (s) : Please check your regex.
6113 : failed : failed : 1.006696267 (s) : \\.(jpeg|jpg|png|tiff)
6114 : failed : failed : 1.517237034 (s) : \\.(jpg|jpeg)$
6115 : failed : failed : 1.056530938 (s) : [0-9]{3}
6116 : failed : failed : 1.073917987 (s) : \\.(jpg|jpeg)$  Exercise
6117 : failed : pumping failed : 411.6216403 (s) : -.+\\.jpg|.+\\.jpeg$
6118 : failed : failed : 13.484556261 (s) : (\\.(\\w+))$
6119 : failed : failed : 2.231015087 (s) : r'jpeg|jpe?g'
6120 : failed : pumping failed : 66.311445328 (s) : (.*)\\.jpg(\\..*)*
6121 : failed : failed : 0.135664468 (s) : ^#
6122 : failed : failed : 0.226104407 (s) : [a-zA-Z0-9_]
6123 : failed : failed : 1.398837737 (s) : a|b(c|d|e|f)
6124 : failed : failed : 105.112097884 (s) : [a-zA-z0-9-_\\.]+You need to make sure that at least 1 special character is used.I hope this helps!
6125 : failed : failed : 2.621994812 (s) : \\s(\\.|_)
6126 : failed : failed : 0.161258435 (s) : ^\\S*$
6127 : failed : failed : 49.410412494 (s) : (?i)\\b(?=.*[aeiou])(?=.*[^aeiou])
6128 : failed : failed : 28.901781801 (s) : (\\w|\\W)+$
6129 : failed : failed : 1.508832055 (s) : \\s+
6130 : failed : failed : 0.88808902 (s) : \\d{3}\\-\\d{2}
6131 : failed : failed : 0.551436219 (s) : ^[1-9][0-9]{3}$
6132 : failed : failed : 0.169962174 (s) : ^(0[1-9]|1[012])[0-9]{4}$
6133 : failed : failed : 0.959034024 (s) : [0-9][0-9][0-9][0-9]
6134 : failed : failed : 0.715086453 (s) : ^\\d{4}-\\d{3}-\\d{2}-\\d{1}$
6135 : failed : failed : 1.167949893 (s) : (0|^1[0-9]{0,2}[1-9]{2})+
6136 : failed : failed : 1.279492429 (s) : \\d{4}
6137 : failed : failed : 0.721009345 (s) : \\d{4}
6138 : failed : failed : 1.202421735 (s) : [0-9]{4}
6139 : failed : failed : 0.147731404 (s) : ^\\d{4}$
6140 : failed : failed : 0.191581488 (s) : ^0[1-9]\\d{3}$
6141 : failed : failed : 0.240425255 (s) : The answer will depend on the chosen book and the student's interpretation.
6142 failed : unparsable : 0 (s) : Please check your regex.
6143 failed : unparsable : 0 (s) : Please check your regex.
6144 : unparsable : unparsable : 0.07491103 (s) : \\b(?=.*(\\d+)
6145 : failed : failed : 6.303403402 (s) : \\d{1,}\\.?\\d{1,}|\\d{1,}\\.?\\d{1,},\\d{1,}\\.?\\d{1,}
6146 : failed : failed : 0.153708226 (s) : ^\\$0{1,2}(\\d\\d|\\d{1,3})$
6147 : failed : failed : 0.384930818 (s) : r'^[^0-9]+$'
6148 : failed : failed : 27.521331817 (s) : [0-9\\.]{1,2}$
6149 : failed : failed : 2.187006897 (s) : ^(?=.*[1-9])\\d+$
6150 : failed : failed : 23.45007434 (s) : (.{2})\\s\\d{2}\\.{2}$
6151 : unparsable : unparsable : 0.083224508 (s) : (?<country_code>[0-9]{3})-??[0-9](-?[0-9]{3})?
6152 : unparsable : unparsable : 0.118311873 (s) : [0-4]?[01]?[0-9]?[0-9]?[0-9]?[\\x20]?[\\x20]?[\\x20]?[\\x20]?[\\x20]?[\\x20]?[\\x20]?[\\x20]?[\\x20]?[\\x20]?[
6153 : unparsable : unparsable : 0.069623378 (s) : \\(
6154 : failed : failed : 9.779477417 (s) : ([0-9]{1,3}\\.){3}[0-9]{1,3}
6155 : unparsable : unparsable : 0.074750309 (s) : (^[0-9]{2})?[\\-\\s]?(.{3}?[\\-\\s]?)?[0-9]{9}\\(?\\)?[\\s\\-]?(.{3}?[\\s\\-]?)?[\\s\\-]?(.{3}?[\\s\\-]?)?[\\s\\-]?(.{3
6156 : failed : failed : 1.858597922 (s) : ht
6157 : failed : failed : 0.15237481 (s) : 1-0+000-000-000+000-000+000-000-000-000-000+000-000+000-000-000+000-000+000+000-000+000-000-000+000-000-000-000-000-000-000-000-
6158 : failed : failed : 2.790031751 (s) : [a-z0-9]{3}[-\\s]?[a-z0-9]{2}[-\\s]?[a-z0-9]{4}
6159 : failed : failed : 0.418643399 (s) : (^[0-9]{2}[-][0-9]{3}[-][0-9]{4})$
6160 : failed : failed : 2.845810033 (s) : (|[0-9]{3}[-.]?){3}[0-9]{4}
6161 : unparsable : unparsable : 0.071777542 (s) : ^(?P<score>\\d+\\.\\d+)\\s[a-z]{1,2}\\s(?P<units>\\d+)\\s[a-z]{1,2}\\s(?P<passes>\\d+)$
6162 : failed : failed : 0.121504321 (s) : RegEx
6163 : failed : failed : 0.12673194 (s) : ^(1[6-9]|[2-9]\\d?)$
6164 : failed : error init : 0.099174215 (s) : ^
6165 : failed : failed : 0.819615636 (s) : 0-9+[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?(?=\\s)?
6166 : failed : failed : 0.209662608 (s) : ^(4[0-9]|5[0-9]|6[0-9])(\\.0[0-9]|\\.1[0-9]|)$
6167 : failed : failed : 0.352846757 (s) : ^([1-9]\\d*)\\.([1-9]\\d*)\\.([1-9]\\d*)$
6168 : failed : failed : 0.239722769 (s) : 0-9 \\d{4}.\\d{2}
6169 : failed : failed : 1.269339296 (s) : [\\d]{4}\\s[a-z]{2}\\s[\\d]{1}
6170 : failed : failed : 0.904341997 (s) : [0-99]{4}
6171 : failed : failed : 0.159440702 (s) : ^6[0-9]{7}$
6172 : failed : failed : 1.149330356 (s) : (6\\d{7})\\d{3}
6173 : failed : failed : 0.222300674 (s) : ^(6\\d{7}$)
6174 : failed : failed : 7.217612103 (s) : [0-6][7-9]{8}
6175 : failed : failed : 0.172367267 (s) : ^(6\\d{2}|(24\\d{3}))$
6176 : failed : failed : 0.128924576 (s) : /^6
6177 : failed : failed : 0.277508948 (s) : ^(6\\d{2})?\\d{7}$
6178 : failed : failed : 0.154559882 (s) : ^(6\\d{3})(\\d{7})?$
6179 : failed : failed : 0.67462836 (s) : ^6[1-9]\\d{7}$
6180 : failed : failed : 0.837999352 (s) : \\d{6}[7-9]*
6181 : failed : failed : 0.541062783 (s) : (100-199)
6182 : failed : failed : 2.125416882 (s) : [\\d;\\d]
6183 : failed : failed : 2.786196148 (s) : (.*)
6184 : failed : failed : 0.81586371 (s) : [100-119]Generate a RegEx for this description. Answ
6185 : failed : failed : 0.154159892 (s) : [0-9]{1}[0-9]{1}[0-9][0-9][0-9][0-9]
6186 : failed : failed : 0.191409727 (s) : [Regex of your choice]
6187 : failed : failed : 2.596863811 (s) : (100) \\d{0,2}(,\\d{0,3})+ (199) \\d{0,2}((,\\d{0,3})*)?
6188 : failed : failed : 0.182941409 (s) : \\d\\d
6189 : failed : failed : 0.186652889 (s) : 0 to 99, 100 to 199
6190 : failed : failed : 5.988408235 (s) : .(?<!\\.)1-9(?!\\.)
6191 : failed : failed : 0.867946071 (s) : This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answ
6192 : failed : failed : 0.567621978 (s) : This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answ
6193 : failed : failed : 0.669270397 (s) : This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answ
6194 : failed : failed : 0.656798251 (s) : This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answ
6195 : failed : failed : 0.877124749 (s) : This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answ
6196 : failed : failed : 0.644233743 (s) : This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answ
6197 : failed : failed : 0.889709946 (s) : This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answ
6198 : failed : failed : 0.787797964 (s) : This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answ
6199 : failed : failed : 0.68747606 (s) : This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answ
6200 : failed : failed : 0.487979459 (s) : This is a simple regular expression which allows 1 to 99 in.5 increments which I originally developed for a forum postGenerate a RegEx for this description. Answ
6201 : failed : error init : 0.107695332 (s) : |      \\A            # (positive start of string)    |      [1-9]\\d*\\.\\d+  # (positive decimal with 2 digits)    |      
6202 : failed : error init : 0.113673858 (s) : ^
6203 : failed : failed : 1.677693507 (s) : r'^[+-]?
6204 : failed : failed : 0.162030291 (s) : [^.0-9]+
6205 : failed : failed : 1.402137236 (s) : \\d+\\.\\d{1,2}
6206 : failed : failed : 0.35507494 (s) : .{1,2}[.][0-9]{1,2}|.{2,24}
6207 : unparsable : unparsable : 0.069110087 (s) : (^
6208 : failed : failed : 17.543405512 (s) : \\d*[0-9]
6209 : failed : failed : 0.721878973 (s) : [0-9.0-9]{3}[.0-9]{2}
6210 : failed : pumping failed : 74.168913798 (s) : [0-9]+[0-9]\\\\.[0-9]+[0-9]|[12]\\\\d|\\.[1-9]{2}
6211 : unparsable : unparsable : 0.057713806 (s) : (?i)((package?)([a-zA-Z0-9-_]+(\\.[a-zA-Z0-9-_]+)*)|(([a-zA-
6212 : failed : error init : 0.131259939 (s) : ^
6213 : failed : failed : 6.217153688 (s) : \\A\\s*(\\w+)\\
6214 : unparsable : unparsable : 0.070297239 (s) : [a-zA-Z0-9_.]+\\/[a-zA-Z0-9_.]+\\/[a-zA-Z0-9_.]+\\/[a-
6215 : unparsable : unparsable : 0.06598245 (s) : (^|[^a-zA-Z0-9_])([a-zA-Z0-9_][a-zA-Z0-9_]*)(\\.([
6216 : unparsable : unparsable : 0.068057686 (s) : (?<=^[A-Za-z0-9_]*$)(?!([A-Za-z0-9_]*(_[A-Za-z0-9_
6217 : unparsable : unparsable : 0.08764746 (s) : (?P<Package>
6218 : unparsable : unparsable : 0.086986482 (s) : (?P<Package>^[a-z0-9]+[.][a-z0-9]*\\.[a-z]{3,4}$|^[a-z0-
6219 : failed : error init : 0.108204927 (s) : | (?<=\\s).*?(?=\\s|\\.\\s*|$) Explanati
6220 : unparsable : unparsable : 0.096193724 (s) : (?<=^|\\.)(?(?=.*[^\\.\\s])(?<!^.)(?<!\\.)[^\\s\\.\\,]+(?=\\.\\s
6221 : failed : failed : 10.987693203 (s) : ip_address  |  validation_scheme   -----------------------  .               |  any character of any length   1-4              |  must be between 1 and 4   5-9              |  must be between 5 and 9  .               |  any character of any length  .               |  any character of any length  .               |  any character of any length  ...             |  any character of any length
6222 : unparsable : unparsable : 0.080701633 (s) : (?<![a-zA-Z0-9\\-\\.])\\.(?![a-zA-Z0-9\\-\\.])\\.(?![a-zA-Z0-9\\-\\.])\\.(?![a-zA-Z0-9\\-\\.])\\.(?![a-zA-Z0-9\\-\\.])\\.(?![a-zA-Z0-9\\-\\.])\\.(?![
6223 : failed : error init : 0.081061837 (s) : ^
6224 : failed : failed : 0.88673201 (s) : ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
6225 : failed : failed : 3.066176555 (s) : [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]
6226 : failed : failed : 0.4939663 (s) : ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$
6227 : failed : failed : 4.321758889 (s) : [0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}
6228 : failed : failed : 0.623472996 (s) : [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}
6229 : failed : error init : 0.111297768 (s) : |----|----|----|-----|-----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|    |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  | 10 |
6230 : failed : failed : 2.085622923 (s) : ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9a-zA-Z])[0-9a-zA-Z\\-]*$
6231 : failed : failed : 2.321783912 (s) : \\d+.\\d+
6232 : failed : failed : 2.911349523 (s) : [0-9]\\\\+|[0-9]
6233 : failed : failed : 0.554618398 (s) : ^[+-]?\\d+(,\\d+)?$
6234 : unparsable : unparsable : 0.059920058 (s) : ^(?=\\d+)(?=\\d+)|(?<!\\d+)(-?\\d+)(?!\\d+$)
6235 : failed : failed : 0.812577597 (s) : /^[.-]?\\d+
6236 : failed : failed : 0.124011115 (s) : (?!^)[.\\-\\d]*
6237 : failed : failed : 0.828171378 (s) : [-+]?\\d+
6238 : failed : failed : 0.151938002 (s) : ^([1-9][0-9]*|[0-9])$
6239 : failed : failed : 8.470253893 (s) : [0-9]|[1-9][0-9]|[1-9][0-9]|[1-9][0-9]\\.[0-9]|[0-9][0-9]\\.[0-9]|[0-9]\\.[0-9]{1}
6240 : failed : failed : 1.519373965 (s) : \\d.\\d
6241 : failed : failed : 0.898693859 (s) : \\b\\d{1,3}
6242 failed : unparsable : 0 (s) : Please check your regex.
6243 : failed : failed : 0.725383145 (s) : \"^[1-9,]?[.][1-9,]?[.][1-9,]?[.][1-9,]?[.][1-9,]?$\"
6244 failed : unparsable : 0 (s) : Please check your regex.
6245 : failed : pumping failed : 64.243305474 (s) : ^(0|[1-9][0-9]*)(,?0)*$
6246 : failed : pumping failed : 125.483202865 (s) : (?=.*\\d)(?=.*[\\,.])[\\+\\-\\*/]?\\d+(\\.\\d+)?
6247 : failed : failed : 7.507708514 (s) : (\\d+\\.?|,\\d+|\\d+\\.?|\\d+\\.?)
6248 : failed : failed : 0.46183525 (s) : ^(0|[1-9][0-9]*)?[\\.,0-9]*$
6249 : failed : pumping failed : 170.550077068 (s) : [0-9]+[.][0-9]+[,]?
6250 : failed : failed : 5.441083556 (s) : [1-9][0-9]|[0-9][1-9]\\,\\d|[1-9][0-9]\\.(0[1-9])|[1-9][0-9]\\.(0[0-9]|1[0-9])|[1-9][0-9]\\.(1[0-9])|[1-9][0-9]\\.
6251 : failed : failed : 6.220512679 (s) : ^[a-zA-Z0-9_-]+
6252 : failed : failed : 0.801310268 (s) : \\d+\\s\\d+
6253 : failed : failed : 0.389677226 (s) : r'^[-+]?[0-9]*\\.[0-9]+$'
6254 : failed : failed : 1.395195247 (s) : (\\d+)\\.?\\d*
6255 : failed : failed : 0.477677136 (s) : \\[\\d+,\\d+\\]
6256 : failed : failed : 1.243407236 (s) : (examples only) /^(0|(1|2)[1-9][0-9]*)(\\.[0-9]+)?$/i | /^[0-9\\-]+(\\.\\d+)?$/i
6257 : failed : failed : 0.16467337 (s) : \\d\\d-\\d\\d-\\d\\d
6258 : failed : failed : 4.620814767 (s) : [0-9]{1,3} [0-9]{3} [0-9]{3} [0-9]{3} [0-9]{3} [0-9]{3} [0-9]{3}
6259 : failed : pumping failed : 2.477742733 (s) : (0|[1-9][0-9]*)[0-9]*(.+)?, ([0-9]{1,4})?
6260 : failed : failed : 0.243345803 (s) : (\\+?\\d+)|(-?\\d+)?
6261 : failed : failed : 0.113203938 (s) : ^[0-9]*$
6262 : failed : pumping failed : 125.529414631 (s) : .*?\\d{1,2}\\.?\\d{1,2}\\.?\\d{1,2}\\./?
6263 : failed : failed : 0.659449476 (s) : (\\d+)
6264 : failed : failed : 4.414613621 (s) : \\d+
6265 : failed : failed : 1.841281586 (s) : [1-9]\\d*[a-zA-Z]
6266 : failed : failed : 0.698510212 (s) : \\d{3}-\\d{3}-\\d{4}
6267 : failed : failed : 7.28698333 (s) : [0-9]{2}\\.?[0-9]{1,2}\\.?[0-9]{1,2}\\.?[0-9]{1,2}.
6268 : failed : failed : 0.713889361 (s) : (\\d+)[_-](\\d+)\\s[^,]
6269 : failed : failed : 0.142841978 (s) : \\d\\d\\d\\d\\d\\d
6270 : failed : failed : 0.38138064 (s) : r'^[0-9]*$'
6271 : unparsable : unparsable : 0.070682501 (s) : {        [0-9]{0,4}-[0-9]{0,4}-[0-9]{0,4} |        [0-9]{0,4}-[0-9]{0,4}-[0-9]{
6272 : failed : failed : 1.720110058 (s) : pattern = re.compile(    r'\\b([A-Za-z][A-Za-z0-9._-]+)\\s*(Error|Warning|Exception)\\b', re.I  )
6273 : failed : failed : 0.284920858 (s) : (this is the best regex I could find to match my requirement) ^.*\\[(.*)\\]\\s*\\(.*\\)\\s*\\[(.*)\\]$
6274 : failed : failed : 0.71438519 (s) : Error|Warning|Exception
6275 : failed : failed : 0.539155642 (s) : #   Pattern to search for \"Error\" \"Error\" = \"([0-9]*)\"   # the value is captured in the brackets #   Pattern to search for \"Warning\" \"Warning\" = \"([0-9]*)\" #   Pattern to search for \"
6276 : failed : failed : 0.335835101 (s) : public static Regex TermRegex = new Regex(@\"Error|Warning|Exception\");
6277 : failed : failed : 2.995627583 (s) : [Error|Warning|Exception]
6278 : failed : pumping failed : 74.869227388 (s) : ^.*\\b[\\w\\W]+\\bError\\s.+\\b.*\\b[\\w\\W]+\\bWarning\\s.+\\b.*\\b[\\w\\W]+\\bException\\s.+\\b.*
6279 : failed : failed : 0.293823389 (s) : [Test]    [Verb]      - Test    [Result]      - Warning
6280 : failed : failed : 0.147375648 (s) : \"Error\" \"Warning\" \"Exception\"
6281 : unparsable : unparsable : 0.081074421 (s) : (?=.*[a-zA-Z0-9])(?=.*[0-9])(?=.*[!@#$%^&*()_+\\-=\\[\\]])(?=.*[^\\s])
6282 : failed : failed : 0.271575988 (s) : ^(?=.{1,15}$)[A-Za-z0-9_]*$
6283 : unparsable : unparsable : 0.064716359 (s) : \\p{Alnum}\\p{Alnum}{1,15}\\p{Alnum}
6284 : failed : failed : 1.396729309 (s) : ^[A-Za-z0-9]{1,15}$
6285 : failed : failed : 2.431337956 (s) : [a-zA-Z0-9]{1,15}
6286 : failed : failed : 0.1815372 (s) : ^[a-zA-Z0-9-_]{1,15}$
6287 : failed : failed : 3.014990693 (s) : ^[a-zA-Z0-9]+$
6288 : failed : failed : 0.171865529 (s) : ^[0-9a-zA-Z\\d]{1,15}$
6289 : failed : failed : 7.33149862 (s) : ^[a-zA-Z0-9][a-zA-Z0-9_\\s]+$
6290 : failed : failed : 0.2862199 (s) : ^[a-zA-Z0-9_]{1,15}$
6291 : unparsable : unparsable : 0.078502345 (s) : (?<vat_num_1>.{1,2})(?<vat_num_2>.{2})(?<vat_num_3>.{2})
6292 : failed : failed : 1.205463311 (s) : \\d{1,3}%
6293 : unparsable : unparsable : 0.092758281 (s) : ((?<=^|[-_\\.,])[0-9]+[0-9]+(,)(?=\\.[0-9])[0-9]+(,)(?=\\.)[0-9]+(\\.[0-9]{1,3})[0-9]+(\\.[0-9]{3,4})
6294 : unparsable : unparsable : 0.095104464 (s) : \\p{CJK}*u-?[\\p{C}\\u0400-\\u04FF]*(?=[a-zA-Z0-9-_+\\u0040-\\u00FF]|$)
6295 : failed : failed : 4.153154568 (s) : \\d+\\.\\d*%
6296 : failed : failed : 11.852322132 (s) : \\b(0.1|0.01)|(0.001|0.0001)\\b
6297 : failed : failed : 0.169070233 (s) : ^\\d+
6298 : failed : failed : 3.771865289 (s) : (0-9)(\\.[0-9]{2})?
6299 : failed : pumping failed : 122.811796838 (s) : .*\\d{0,2} (?=\\.)    (?=\\d{2}\\.\\d{2})
6300 failed : unparsable : 0 (s) : Please check your regex.
6301 : failed : failed : 0.769436319 (s) : [a-zA-Z_][a-zA-Z0-9_]{0,32}
6302 : failed : failed : 0.680193472 (s) : ^[a-zA-Z0-9_]{31,60}$
6303 : failed : failed : 0.22840242 (s) : [a-z0-9_]{0,31}
6304 : failed : failed : 16.705988991 (s) : \\w+?\\W*(?=^\\S+$)
6305 : failed : failed : 1.051287129 (s) : ^[a-zA-Z_][a-zA-Z0-9_]{0,29}$
6306 : failed : failed : 2.644148297 (s) : (^\\w{0,63}$)
6307 : failed : failed : 30.33796901 (s) : (?<![^a-z_0-9])[a-z_0-9](?!_[a-z0-9])
6308 : failed : failed : 2.771660008 (s) : [a-zA-Z_0-9]{31}
6309 : failed : failed : 2.692746944 (s) : [^-A-Z0-9a-z_\\s]\\w{1,20}
6310 : failed : failed : 0.254475094 (s) : ^[\\w\\d_]{31}\\z
6311 : failed : failed : 0.428486401 (s) : \\w{3,}-\\w{3,}-\\w{3,}_\\w{3,}
6312 : failed : failed : 0.246682432 (s) : r'^[a-zA-Z0-9_]{8,}$'
6313 : failed : failed : 0.192055948 (s) : [a-z0-9_]
6314 : failed : failed : 13.502927934 (s) : (^[a-zA-Z_0-9]*$)
6315 : failed : failed : 529.604410266 (s) : (?=[^0-9a-z]*$)[A-Za-z0-9_]{8,}
6316 : failed : failed : 2.725715261 (s) : [a-z0-9_]
6317 : failed : failed : 4.416341517 (s) : [a-z0-9_]
6318 : unparsable : unparsable : 0.080143568 (s) : ![RegEx](htt
6319 : failed : failed : 0.659609276 (s) : ^[a-z0-9_]*$
6320 : failed : failed : 2.622029999 (s) : \\W*
6321 : failed : failed : 7.746795522 (s) : (?<![\\d])(?![\\-\\s])\\b(([a-z]{1,2}[a-z]{1,2})\\s+)[a-z]{1,2}\\b
6322 : failed : failed : 0.932389999 (s) : ^[0-9]{2}([a-z]+[0-9]{3}[a-z]{1,3})[0-9]{3}[a-z]{1,3}[a-z]{1,3}$
6323 : failed : failed : 0.574205477 (s) : /^[A-Z][A-Z0-9]{1,3}
6324 : failed : failed : 1.645799743 (s) : \\w{2,24}\\D{0,5}
6325 : failed : failed : 1.452953035 (s) : ^[A-Z]{1,2}\\s+[A-Z]+\\s+[A-Z]+\\s+[A-Z]{1,4}$
6326 : failed : failed : 0.291247405 (s) : ^[0-9]{1,4}[a-z]{1,3}[0-9]{1,4}$
6327 : failed : failed : 1.050583831 (s) : \\d{2}
6328 : failed : failed : 0.391265039 (s) : (^[0-9]{1,2}, [^,]{1,}[0-9]{1,4}$)
6329 : failed : failed : 0.186952961 (s) : ^[A-Z]{1,2}[A-Z][0-9]{1,2}[A-Z]\\s[0-9]{1,3}[A-Z]\\s[0-9]{1,3}$
6330 : failed : failed : 8.681818612 (s) : ^[^0-9]*[0-9]{3}[0-9]$No
6331 : failed : failed : 22.609232045 (s) : [0-9]{3}-[0-9]{3}-[0-9]{4}
6332 : failed : failed : 0.235553191 (s) : ```python[1] \"555-1234\"```
6333 : failed : failed : 0.113166016 (s) : 1-######.####
6334 : failed : failed : 2.639615729 (s) : ###(###)-####
6335 : failed : failed : 30.197481311 (s) : ([0-9]{3})-([0-9]{3})-([0-9]{4})
6336 : unparsable : unparsable : 0.093591 (s) : \\(?\\d{3}\\)-\\d{3}-\\d{4}
6337 : failed : failed : 0.510327758 (s) : [\\d]\\d{5}-\\d{5}-\\d{4}
6338 : failed : failed : 0.71462008 (s) : \\[(###)\\]####
6339 : failed : failed : 7.350232071 (s) : ([0-9]{3})-((##)-[0-9]{4}|[0-9]{3}-(##)-[0-9]{3})
6340 : failed : failed : 0.154334129 (s) : Phone Numb
6341 : unparsable : unparsable : 0.0790389 (s) : \"\\(#######-######\"     2. What is the complete Python script for writing a RegEx function that takes in a string and returns a list of all the words that begin with the letter 'a' and end with the letter 'e'?Answ
6342 : unparsable : unparsable : 0.077033073 (s) : **[123]\\d{3}-\\d{3}-\\d{4}**
6343 : unparsable : unparsable : 0.088913421 (s) : \\(?\\d{3}\\)?-?\\d{4}
6344 : failed : failed : 0.105299756 (s) : ####/######\"\"\"
6345 : unparsable : unparsable : 0.066780454 (s) : ***\\d+--\\d{3}-\\d{3}-\\d{4}***
6346 : failed : failed : 0.201197085 (s) : ```pythonpattern = r\"^(\\d{3})-(\\d{3})-(\\d{4})$\"```
6347 : failed : failed : 0.433063091 (s) : ^(\\+)?([0-9]{1,3})([0-9]{3})?-?([0-9]{9})$
6348 : failed : failed : 3.117539538 (s) : /^
6349 : failed : failed : 0.193555024 (s) : ^\\d{2}-\\d{2}-\\d{4}$
6350 : unparsable : unparsable : 0.081263174 (s) : ```pythondef socal_format_numbers(ph_numbers, area_code
6351 : failed : failed : 0.167838838 (s) : .{4}
6352 : failed : pumping failed : 76.149607449 (s) : .*?(S\\d{1,2})     # Area code.*?(R\\d{1,2})     # Subcode.*(X\\d{1,2})     # ZIP Code
6353 : failed : failed : 0.209035574 (s) : ^\\(9\\d{5}\\)[-\\s]?\\d{4}\\-\\d{2}\\-\\d{1}$
6354 : failed : failed : 0.195099797 (s) : ```pythonimport re
6355 : failed : failed : 0.325176872 (s) : ###-###-####-([A-Z]{3})
6356 : unparsable : unparsable : 0.074631766 (s) : (\\(\\d{3}\\)\\s\\d{4}
6357 failed : unparsable : 0 (s) : Please check your regex.
6358 : failed : failed : 0.812697381 (s) : [area_code]\\d{3}-\\d{3}-\\d{4}
6359 : unparsable : unparsable : 0.079181256 (s) : +[8][2-9]
6360 failed : unparsable : 0 (s) : Please check your regex.
6361 : unparsable : unparsable : 0.080344124 (s) : \\+?[0
6362 failed : unparsable : 0 (s) : Please check your regex.
6363 : unparsable : unparsable : 0.101487027 (s) : \\((\\d{3
6364 : failed : failed : 0.151592284 (s) : var phoneNum =
6365 : unparsable : unparsable : 0.065773058 (s) : /(^\\+?
6366 : unparsable : unparsable : 0.060405306 (s) : [A-Z
6367 failed : unparsable : 0 (s) : Please check your regex.
6368 : unparsable : unparsable : 0.078825339 (s) : (^|\\s
6369 : unparsable : unparsable : 0.056062754 (s) : [a-z][0
6370 : unparsable : unparsable : 0.073273833 (s) : (^\\(\\
6371 : failed : failed : 1.777663613 (s) : <(echo /var/www/html/amp.html | cut -f1) | grep -Eo 'amp'
6372 : failed : failed : 0.105651375 (s) : r'amp'
6373 : failed : failed : 0.186855028 (s) : amp' -> 'amp
6374 : unparsable : unparsable : 0.098668989 (s) : {% with amp_matches_regex = '<a[^>]+>(amp)</a>' %}
6375 : failed : failed : 235.105173936 (s) : [a-zA-Z0-9]{2,30}-amp
6376 : failed : failed : 0.634832188 (s) : /\\s*amp\\s*\\=\\s*(.*)
6377 : failed : failed : 0.108951284 (s) : amp
6378 : failed : failed : 0.167558072 (s) : amp
6379 : failed : failed : 0.143098228 (s) : amp\\s
6380 : failed : failed : 0.165326684 (s) : '\\\\<a
6381 : failed : failed : 1.03536963 (s) : ^[a-zA-Z0-9_\\-\\.]+ @[a-zA-Z0-9_\\-\\.]+$
6382 : unparsable : unparsable : 0.083984501 (s) : ^(([0-9a-f]{3,6})(\\+[0-9a-f]{3,4})([0-9a-f]{3,5})$
6383 failed : unparsable : 0 (s) : Please check your regex.
6384 : failed : failed : 22.272553745 (s) : [0-9A-Fa-f]{3} [0-9A-Fa-f]{3} [0-9A-Fa-f]{3}
6385 : failed : failed : 13.641675605 (s) : (\\d+)\\.(\\d+)\\s*(\\w+)$
6386 failed : unparsable : 0 (s) : Please check your regex.
6387 : failed : failed : 0.177084371 (s) : (?i)^0x[a-fA-F0-9]{3}$Examp
6388 failed : unparsable : 0 (s) : Please check your regex.
6389 : unparsable : unparsable : 0.092086172 (s) : Dim regex As String = \"(?<match>\\\\d{4}-?\\\\d{2}-?\\\\d{2})\\\\s?\\\\d{5}\\\\s?\\\\[\\\\d{2}-?\\\\d{2}-?\\\\d{4}
6390 : failed : failed : 0.131357362 (s) : ^([0-9a-f]{3})([0-9a-f]{2})([0-9a-f]{2})
6391 failed : unparsable : 0 (s) : Please check your regex.
6392 : failed : failed : 0.699282508 (s) : ^[0-9]+[\*\*\*][\*\*\*][\*\*\*][\*\*\*][\*\*\*][\*\*\*][\*\*\*]$
6393 : failed : failed : 105.729252975 (s) : (0[1-9]|[1-9]\\*|\\*[1-9]|A|[A-Z]|[A-Z][A-Z]|[A-Z][A-Z][A-Z]|[0-9][0-9])$
6394 : unparsable : unparsable : 0.098675711 (s) : (10?[0-9])\\s+(1[0-9])\\s+(1[0-9])\\s+(1[0-9])\\s+(1[0-9])\\s+(1[0-9])\\s+(1[0-9])\\s+(2
6395 : unparsable : unparsable : 0.070763232 (s) : /([0-9]|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*|\\*
6396 : unparsable : unparsable : 0.072635799 (s) : (?=^.{5,}$)(?=^.*[\\+\\-\\*\\/])(?=^[\\d\\*\\-\\.]+$)(?!.*[\\r\\n\\t])(?!.*[^A-Za-z0-9\\*
6397 : failed : failed : 46.148483149 (s) : ^(?=.*\\d)(?=.*[*](?=.*\\d)(?=.*[*][*]))(?=.*[*][*][*])\\b[0-9*]{6}\\b
6398 : failed : failed : 0.832848987 (s) : (?!0*)(?!.*0*)(?!.*0*.*0*)[0-9]*
6399 : failed : failed : 2.43177272 (s) : \\d[\\d*a-b-c-d]*
6400 : failed : failed : 1.869246232 (s) : [a-d89]
6401 : failed : failed : 2.84136022 (s) : ((?<![^,\\d])[\\d,]+(?![^,\\d]))
6402 : failed : failed : 0.325247073 (s) : ^\d+(,\d+)?$
6403 failed : unparsable : 0 (s) : Please check your regex.
6404 : unparsable : unparsable : 0.063572317 (s) : ^(?=!,)(?!,$)(?!,)(?=
6405 : failed : failed : 19.676864183 (s) : 0|1|2|3 10 -11 -12 0,2 0,2,3 0,2,3,4 0,2,3,4,5
6406 : failed : failed : 0.856034324 (s) : (\\d+(,\\d+)?|\\d+)
6407 : failed : pumping failed : 420.337462677 (s) : ^[-+]?[0-9]*\\.,?[0-9]*|[0-9]+$
6408 : failed : failed : 0.202573442 (s) : ^\\d+(,\\d+)*$
6409 : failed : failed : 40.574237462 (s) : [0-9]{1,}(,[0-9]{1,})*
6410 : unparsable : unparsable : 0.056935779 (s) : (
6411 : failed : error init : 0.103765193 (s) : ^
6412 : failed : failed : 0.153017724 (s) : The regular expression is m(?<=\\d{3})(\\d{3})\\d{2}.
6413 : failed : failed : 0.278294529 (s) : \"Mobile number +91\"Generate a RegEx using this Pattern +91. Answ
6414 : failed : failed : 24.383173708 (s) : [0-9]{3}[\\s]+\\+91
6415 : unparsable : unparsable : 0.08191194 (s) : +^91{10}$
6416 : unparsable : unparsable : 0.075517375 (s) : [a-zA-Z]\\d+[a-zA-Z]{2}\\d+[a-zA-Z]{2}\\d+[a-zA-Z]{2}[a-zA-Z]{2}[a-zA-Z]{2}[a-zA-Z]{2}[a-zA-Z]{2}[a-z
6417 : failed : failed : 8.808407334 (s) : (?<=\\b)P(?=[\\d]{10})
6418 : failed : failed : 0.539324117 (s) : Pattern +91
6419 : failed : failed : 1.403032964 (s) : (?=(?=^[1-9]{3}$)[1-9]*[1-9]*[1-9]*$)([+91]*[1-9]*[0-9]*$).
6420 : failed : failed : 2.974128304 (s) : Pm(0-9)(0-9|9)
6421 : failed : failed : 2.861015847 (s) : \\b(7|2[3-5])[0-9]([0-9]{6})?\\b
6422 : failed : failed : 2.705736328 (s) : \\d
6423 : failed : failed : 0.804398651 (s) : \\b[S|W|E|N|I|A|T|T|L|C]\\d{6,8}
6424 : failed : failed : 0.666656222 (s) : ^([0-9]{8}|[0-9]{6}(SC)(\\s|$))
6425 : failed : failed : 0.476118438 (s) : ^([a-zA-Z0-9]{9}[a-zA-Z0-9]{3}[a-zA-Z0-9]{5})$
6426 : unparsable : unparsable : 0.090914347 (s) : /^((?!\\d)\\b(8[0-9]{6}|10[0-9]{3}|11[0-9]{2}|12[0-9]{1}).{8}$|(?!\\d)\\b(7[0-9]{6}|9[0-9]{5}|99[
6427 : unparsable : unparsable : 0.080673731 (s) : (?i)(^
6428 : failed : failed : 0.523335788 (s) : ^[a-zA-Z0-9]{0,6}[a-zA-Z0-9]{0,7}[a-zA-Z0-9][a-zA-Z0-9]([a-zA-Z0-9]{0,11}[a-zA-Z0-9])?$
6429 : failed : failed : 0.357754247 (s) : ^[0-9]{8}[S|W|E|N|I]\\d{6}$
6430 : failed : failed : 3.963420479 (s) : \\b
6431 : unparsable : unparsable : 0.07280707 (s) : [4],[1
6432 : failed : failed : 1.392418296 (s) : \\d+,
6433 : unparsable : unparsable : 0.076076222 (s) : ^[\\d,
6434 : unparsable : unparsable : 0.06508 (s) : ([0-9][
6435 : unparsable : unparsable : 0.080982189 (s) : [1,2,
6436 : unparsable : unparsable : 0.088317886 (s) : ([0-9
6437 : unparsable : unparsable : 0.064772324 (s) : \\[([
6438 : unparsable : unparsable : 0.082617752 (s) : [0-9
6439 : unparsable : unparsable : 0.058355417 (s) : 1 + ( (
6440 : failed : failed : 4.253805319 (s) : \\d+
6441 : failed : failed : 0.177455526 (s) : ^[8-9][0-9]{10}$
6442 failed : unparsable : 0 (s) : Please check your regex.
6443 : failed : failed : 1.103930018 (s) : (8[0-9]) {10,11}
6444 : failed : failed : 4.526381008 (s) : [^0-9]{9}|[^0-9]{10}|[^0-9]{10,}
6445 : failed : failed : 7.83658348 (s) : (\\b[0-9]{1,2}\\s){10}\\b
6446 : failed : failed : 1.716706194 (s) : (^[8][0-9]{9}$|^)&
6447 : failed : failed : 0.219094701 (s) : ^[8-9]\\d{9}$
6448 : failed : failed : 101.160034082 (s) : (?<!^[8-9]{10})(?<!^[0-9][0-9][0-9])[0-9]{10}(?![0-9])
6449 : failed : failed : 0.238146247 (s) : Mobile no can be of the form [8-9]\\\\d{9} or
6450 : failed : failed : 14.157735798 (s) : (?<=\\d{10}$)(?<!\\d\\d)\\d{8}|$
6451 : failed : failed : 15.871702462 (s) : [-0-9](?![-0-9])|[1-9][ -]*[0-9][ -]*[1-9]|[0-9]{12}
6452 : failed : failed : 268.036396169 (s) : [a-zA-Z]{1,32}[0-9]
6453 : failed : failed : 2.782800149 (s) : (\\d)(\\1|\\2|\\3|\\4|\\5|\\6|\\7|\\8|\\9)
6454 : failed : failed : 0.202141113 (s) : ^[0-9]{8,12}$
6455 : failed : failed : 0.267750394 (s) : ^[0-9]{1,2}[a-zA-Z0-9-]{0,3}[.][0-9]{1,3}[.][0-9]{1,4}$
6456 : unparsable : unparsable : 0.059775357 (s) : (?<_number>\\+?\\d{1,3}[-\\s]?\\d{1,3}[-\\s]?\\d{1,4}[-\\s]?\\d{1,4})
6457 : failed : error init : 0.11350448 (s) : [ ]  // Match any number of spaces, including leading and trailing spaces        [ ]  // Match any number of whitespace characters        [0-9] // Match numbers in the range 0-9        [0-9] // Match numbers in the range 0-9        [ ]  // Match any number of spaces, including leading and trailing spaces        [0-9] // Match numbers in the range 0-9
6458 : failed : failed : 0.739474253 (s) : ^\\d{3}-?\\d{3}-?\\d{4}$
6459 : unparsable : unparsable : 0.078994577 (s) : (^\\d{1,2}-\\d{2}-\\d{2} \\d{
6460 : failed : failed : 0.547103977 (s) : ^\\+\\d{1,5}$
6461 : failed : failed : 0.624496674 (s) : \\b(0|1|2|3)\\.(0|1|2|3)\\.(0|1|2|3)\\.(0|1|2|3)\\b
6462 : failed : failed : 0.130948596 (s) : /
6463 : failed : failed : 0.765572053 (s) : /^
6464 : failed : failed : 3.487833566 (s) : \\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b
6465 : failed : failed : 0.560275441 (s) : ^((\\d+)\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}))$
6466 failed : unparsable : 0 (s) : Please check your regex.
6467 : unparsable : unparsable : 0.116337215 (s) : ^((((1|2|3|4)|(10|11|12|13))|(1|2|3|4))|((5|6|7|8)|(15|16|17|18))|(192|208|240|256))\\.((1|2|3|4)|(10|11|12|13))|(5|6|7|8)|(15|16|17|18))$
6468 : failed : failed : 0.853210156 (s) : ^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$
6469 failed : unparsable : 0 (s) : Please check your regex.
6470 : failed : failed : 1.686626565 (s) : /^
6471 : failed : failed : 0.143518465 (s) : ^[0-9]{7}$
6472 : failed : failed : 0.112311185 (s) : ^\\d{7}$
6473 : failed : failed : 0.483029069 (s) : ^((\\d{7}|0{0,6})\\d{6}|0{0,4}(\\d{6}\\d{1,6})[0-9]|0{0,4}\\d{1,6}\\d{1,6}\\d{1,6})$
6474 : failed : failed : 0.183708866 (s) : ^[0-9]{7}$
6475 : failed : failed : 1.15484892 (s) : [\\d]{7}$
6476 : failed : failed : 0.846390476 (s) : ^\\d{8}$
6477 : failed : failed : 0.194718884 (s) : ^(0{1,3})0{6}
6478 : failed : failed : 0.223538592 (s) : var regEx = new RegExp(/^[0-9]{7}$/);
6479 : failed : failed : 1.808442411 (s) : ^(?=.*\\d)(?=.*\\d\\d\\d)\\d{7}$
6480 : failed : failed : 0.133329715 (s) : ^[0-9]{7}$
6481 : failed : failed : 0.300571154 (s) : ^     \\d{2}/   # month     \\d{2}/     # day     [A-Z][a-z]? # last name     \\d{4}        # year     (. )?          # zero or more dots    $
6482 : failed : error init : 0.084254998 (s) : ^
6483 failed : unparsable : 0 (s) : Please check your regex.
6484 : failed : failed : 0.236040795 (s) : m/d/yyyy or m/d/yy or dd/yyyy  leap
6485 : unparsable : unparsable : 0.057281126 (s) : if not (re.match(r\"^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$\", date) or re.match(r\"^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{
6486 : failed : failed : 1.315018887 (s) : /^(0(1+\\d)/)?[1-9]\\d{2}/(0(1+\\d)/)?
6487 : failed : failed : 0.751746784 (s) : \\d{1,2}\\/\\d{1,2}\\/\\d{4} | \\d{1,2}\\/\\d{1,2}\\/\\d{4}-\\d{1,2}-\\d{4}
6488 : failed : failed : 5.514783097 (s) : \\b(?=\\d{1,2}\\s[-/.]\\d{1,2}\\s\\d{4}\\b)
6489 : failed : failed : 2.113995995 (s) : Da
6490 : failed : failed : 0.192811381 (s) : ^([0-9]{1,2}/)?([0-9]{1,2}/)?([0-9]{4})?$
6491 : failed : failed : 0.208584249 (s) : ^\\d{1,9}(,\\d{1,9})*$
6492 : unparsable : unparsable : 0.127107394 (s) : ^(?=
6493 : failed : failed : 0.198313075 (s) : 123,345,4444444,5612,3434,56111,11
6494 : failed : failed : 1.955979951 (s) : ^((\\d+,){1}({0,4}){0,1})(\\d+)
6495 failed : unparsable : 0 (s) : Please check your regex.
6496 : failed : failed : 0.533062813 (s) : \\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,\\d+,
6497 : failed : failed : 0.21308651 (s) : ^[123456789,]{5}\\s*,\\s*[\\d,]+$
6498 : failed : failed : 0.182796427 (s) : [^\\s,\\d]
6499 : unparsable : unparsable : 0.093635583 (s) : (\\\\d{1,3}(,\\\\d{3})*),(\\\\d{1,3}(,
6500 : failed : failed : 5.647511858 (s) : \\d+,\\\\d+,\\\\d+(,\\\\d+,\\\\d+)*
6501 : failed : failed : 0.302382647 (s) : ^\\d{1,3}\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$
6502 : failed : failed : 1.087064786 (s) : ^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$
6503 failed : unparsable : 0 (s) : Please check your regex.
6504 failed : unparsable : 0 (s) : Please check your regex.
6505 : failed : failed : 0.224122075 (s) : ^0*((9,?)\\.){2}0*$
6506 : failed : failed : 2.080680338 (s) : \\A
6507 : failed : pumping failed : 9.484345548 (s) : (.*)([0-9]*)$
6508 : failed : failed : 0.603021248 (s) : ^(10\\.){1,63}10\\.(0|1|2|3|4|5|6|7|8|9)$
6509 : failed : failed : 2.293378289 (s) : 0+([0-9])([0-9]?)([0-9]?)(0+).
6510 : failed : failed : 0.662938771 (s) : ^(([1-9][0-9]|1[0-9]|2[0-4]))-([1-9][0-9]|[12][0-9]|3[01])-(25[0-5])$
6511 : unparsable : unparsable : 0.117146831 (s) : ^N\\d\
6512 : failed : failed : 0.610657647 (s) : \\d+(\\.\\d+)?,\\d+(\\.\\d+)?,\\d+(\\.\\d+)?,\\d+(\\.\\d+)? No restriction on degrees.
6513 : unparsable : unparsable : 0.078154544 (s) : (\u00b0N)^[\\-0-9]{1,2
6514 : unparsable : unparsable : 0.079842574 (s) : ^[\\d]{1}, [\\d]{1
6515 failed : unparsable : 0 (s) : Please check your regex.
6516 failed : unparsable : 0 (s) : Please check your regex.
6517 : failed : failed : 0.173230364 (s) : ^\\
6518 : failed : failed : 0.122731099 (s) : ^N
6519 failed : unparsable : 0 (s) : Please check your regex.
6520 : failed : failed : 4.287469679 (s) : ^N[\\d\\.]+E[\\d\\.]+$
6521 : unparsable : unparsable : 0.076286195 (s) : {1..10}
6522 : failed : failed : 0.520392636 (s) : \\b(1-10)\\b
6523 : failed : failed : 0.147303533 (s) : ^(1-9)$
6524 : failed : failed : 1.790031554 (s) : (\\d{1,10})\\d{1,10}
6525 : failed : failed : 0.197166347 (s) : ^(1-9)(0-9)$
6526 : unparsable : unparsable : 0.099060403 (s) : (1+1.*1+|1+1.*2+|1+2.*1+|2+1.*1+|3+1.*1+|4+1.*1+|5+1.*1+|6+1.*1+|7+1.*1+|8+1.*1+|9+1.*1+|10+1.*1+
6527 : failed : pumping failed : 5.278007798 (s) : (?=.*\\d).*\\d{1,2}(?=.*\\d){1,2}.*\\d{1,2}(?=.*\\d){1,2}.*\\d{1,2}(?=.*\\d){1,2}.*
6528 : failed : failed : 10.037308997 (s) : (1[0-9]|2[0-3]) | (4[0-9]|5[0-9])
6529 : failed : failed : 0.166062631 (s) : /^1-3$|
6530 : failed : error init : 0.095104274 (s) : ^
6531 : failed : failed : 0.142456597 (s) : A-Z or a-z|[A-Z]
6532 : failed : failed : 0.123872987 (s) : ^[a-z][a-zA-Z]$
6533 : failed : failed : 19.697245339 (s) : [A-Z][a-z\\d]*
6534 : failed : failed : 0.590648679 (s) : (A-Y)
6535 : failed : pumping failed : 43.309241617 (s) : (?=.+[a-z].*\\.[a-z])
6536 : failed : failed : 0.938242239 (s) : [a-zA-Z]\\w{0,99} Example
6537 : failed : failed : 0.217763899 (s) : ^[a-zA-Z]{5}$
6538 : failed : failed : 0.137134981 (s) : ([a-zA-Z])
6539 : failed : failed : 1.44684714 (s) : [A-Za-z]
6540 : failed : failed : 0.155503618 (s) : [a-zA-Z]
6541 : failed : failed : 0.398935373 (s) : import reimport mysql.connector
6542 failed : unparsable : 0 (s) : Please check your regex.
6543 : failed : failed : 96.21325386 (s) : (?<=^|\\s)([^\\n\\r]*)(?=\\s|$)Example outp
6544 : unparsable : unparsable : 0.091148797 (s) : SELECT * from {tablename}WHERE {condition}
6545 failed : unparsable : 0 (s) : Please check your regex.
6546 : failed : failed : 0.496579283 (s) : ```pythonimport requery = \"SELECT * FROM users WHERE username LIKE '%John%'\"clean_query = re.sub(r\"^\\s*//.*$\", \"\", query)print(clean_query)# OUTP
6547 failed : unparsable : 0 (s) : Please check your regex.
6548 : failed : failed : 0.365255043 (s) : ```pythonimport mysql.connector
6549 : failed : failed : 0.301982838 (s) : ``` pythonimport mysql.connectorimport re
6550 : failed : failed : 0.181545044 (s) : The pattern for this exercise 
6551 : failed : failed : 1.364039363 (s) : #[0-9A-Fa-f]{3,}
6552 : failed : failed : 0.142911108 (s) : ^#[a-f0-9]{6}$
6553 : failed : failed : 1.562779017 (s) : #[0-9A-Fa-f]{6}#
6554 : failed : failed : 1.579352543 (s) : #[A-Fa-f0-9]{6,}
6555 : failed : failed : 0.543815198 (s) : ^#[a-f0-9A-F0-9]{6}$
6556 : failed : failed : 0.896452883 (s) : #[A-Fa-f0-9]{6}
6557 : failed : failed : 0.134550141 (s) : ^#
6558 : failed : failed : 0.211081956 (s) : #[0-9A-Fa-f]{6} (at least 1 and at most 8 characters long)
6559 : failed : failed : 0.193396498 (s) : ^[0-9A-Fa-f#]{6}$
6560 : failed : failed : 7.650387166 (s) : \"#[A-F0-9a-fA-F]{6,}#\"
6561 failed : unparsable : 0 (s) : Please check your regex.
6562 : failed : failed : 0.474664204 (s) : Tim
6563 : failed : failed : 0.667116975 (s) : \\
6564 : failed : failed : 0.109460177 (s) : \"
6565 failed : unparsable : 0 (s) : Please check your regex.
6566 : unparsable : unparsable : 0.072002613 (s) : (
6567 failed : unparsable : 0 (s) : Please check your regex.
6568 failed : unparsable : 0 (s) : Please check your regex.
6569 : unparsable : unparsable : 0.081939391 (s) : [
6570 : failed : failed : 1.441635792 (s) : /
6571 : failed : failed : 0.275169337 (s) : postal.\\d\\d.\\d\\d\\d\\d$
6572 : failed : failed : 0.435425856 (s) : ^([0-9]+)[^0-9]*$
6573 : failed : failed : 1.703812309 (s) : ^[1-9]\\d?|1\\d{2}
6574 : failed : failed : 0.14675153 (s) : ^[0-9a-zA-Z ]+$
6575 : failed : failed : 1.702256365 (s) : ^[0-9]*$
6576 : failed : failed : 0.513047281 (s) : r'^[0-9]{1,3}?[0-9]\\d\\d ([0-9]{3})?(\\d{2})?(\\d{3})$'
6577 : failed : failed : 0.143046802 (s) : .{5}
6578 : failed : failed : 0.897121435 (s) : (\\s*\\d{5})(?=.*\\d)
6579 : failed : failed : 0.152688067 (s) : ^[1-9012-9]\\d\\d[1-9012-9]$
6580 : unparsable : unparsable : 0.101097337 (s) : [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][
6581 : failed : failed : 0.322262915 (s) : (?i)\\b9999 \\s* \\d{2} \\d{2} \\d{2}
6582 : failed : failed : 23.210022526 (s) : [0-9]{4} [0-9]{4} [0-9]{4}
6583 : failed : failed : 0.347349252 (s) : 9999 (0 or 1 digit, 0 or 1 space, no hyphens or dashes).
6584 : failed : failed : 3.105248962 (s) : \\b(0[1-9]|1[012])[0-9]{2}[A-Z]{2}\\b.
6585 : failed : failed : 0.936027522 (s) : \\d+ [Aa] [Aa] \\d+
6586 : failed : failed : 0.621719963 (s) : \"\\d{4}[ A-Z]{1}\"
6587 : failed : failed : 0.579769928 (s) : `^[0-9]{3}\\ ([A-Z]{3}\\ [A-Z]{3})$`
6588 : failed : failed : 0.957038957 (s) : ^\\d{5}[A-Z]\\d{2}$
6589 : failed : failed : 2.137052751 (s) : \\b
6590 : failed : failed : 1.041717819 (s) : ^[A-Z]{1}[0-9][0-9]$
6591 : failed : failed : 0.216303333 (s) : ^[0-9]{4}-[0-9]{2}-[0-9]{2}[0-9]{2}$
6592 : failed : failed : 1.290709365 (s) : ^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d]{7,17}$
6593 : unparsable : unparsable : 0.080057698 (s) : ^(?P<HIC>[0-9]{4}-[0-9]{2}-[0-9]{2})$
6594 : failed : failed : 0.158453503 (s) : ^([A-Z0-9]{3})([0-9]{2})([0-9]{4})$
6595 : failed : failed : 0.63283137 (s) : ([a-zA-Z]{3}\\.){2}\\d{3}[a-zA-Z]
6596 : failed : failed : 0.722019306 (s) : (\\d{3}-\\d{4}-\\d{5})
6597 : failed : failed : 0.65204997 (s) : \\d{2}-\\d{2}-\\d{4}
6598 : unparsable : unparsable : 0.076223567 (s) : ^(?=
6599 : failed : failed : 0.405978121 (s) : .*
6600 : failed : failed : 0.96276503 (s) : [\\+\\-\\.]{1}[0-9]{5}
6601 : failed : failed : 0.446463055 (s) : Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answ
6602 : failed : failed : 0.485401792 (s) : Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answ
6603 : failed : failed : 0.568566527 (s) : Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answ
6604 : failed : failed : 0.488706009 (s) : Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answ
6605 : failed : failed : 0.553055912 (s) : Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answ
6606 : failed : failed : 0.621083241 (s) : Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answ
6607 : failed : failed : 0.648767633 (s) : Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answ
6608 : failed : failed : 0.454141544 (s) : Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answ
6609 : failed : failed : 0.533198216 (s) : Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answ
6610 : failed : failed : 0.718322724 (s) : Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q,'or -.Generate a RegEx for this description. Answ
6611 : failed : failed : 6.676792646 (s) : [A-Z][0-9]
6612 : unparsable : unparsable : 0.056014644 (s) : ^(1\\d|\\d|\\d|\\d|\\d|\\d|\\d|\\d|\\d|\\d|\\d|\\d|\\d|\\d|\\d|\\
6613 : failed : failed : 0.121168532 (s) : [^\\d]{1,3}
6614 : failed : failed : 0.193862921 (s) : ^[1-9][0-9][0-9]$
6615 : unparsable : unparsable : 0.066676389 (s) : (?<address_number>[A-Za-z ]+)\\s+(?<street_prefix>[A-Za-z ]+)\\s+[A-Za-z]+\\s+[A-Za
6616 : failed : failed : 8.905004875 (s) : ^[A-Z][A-Za-z ]*[0-9]{1,3}[0-9]{1}[0-9]{1}$
6617 : failed : failed : 0.393906506 (s) : /^Addresse\\s+Nr\\s+(\\d{1,3})[,\\s\\-a-zA-Z0-9]*\\s+Dort\\s+
6618 : failed : failed : 0.619057527 (s) : ^([a-zA-Z]+)$([a-zA-Z]+)$
6619 : failed : failed : 0.953004813 (s) : \\w+No\\s(\\w+)\\s(.+)\\s.*
6620 : unparsable : unparsable : 0.073343614 (s) : ((?<!\\d{1}\\d{2} )
6621 : failed : failed : 0.271340927 (s) : (.*)?(.*)?(.*)
6622 : failed : pumping failed : 1.822576338 (s) : \"(2|1|7|5|6|8|9|4|1|3)*(1|0|0|0|0|0|0|0|0|)*\"I am trying to convert this into a python program for further analysis.My code so f
6623 : failed : failed : 0.167938655 (s) : import re
6624 : unparsable : unparsable : 0.072931804 (s) : public static void main (String[] args) {    String data = \
6625 : failed : failed : 5.179095643 (s) : [0-3]?[0-9]|4[0-1]?[0-9] or 5[0-2][0-9]?[012]
6626 : unparsable : unparsable : 0.057906356 (s) : [a-zA-z0-9]\\s*-\\s*[a-zA-z0-9]\\s*-\\s*[a-zA-z0-9]\\s*-\\s*[a-zA-z0-9]\\s*-\\s*[a-zA-z0-9]\\s*-\\s*[a-zA
6627 : unparsable : unparsable : 0.089959971 (s) : /^(store|office).*\\s(open|close)\\s\\d{
6628 : failed : failed : 0.171133367 (s) : import re
6629 : failed : failed : 1.679177837 (s) : \"(\\d{1,2})\"
6630 : unparsable : unparsable : 0.067066129 (s) : [0-9]?[0-9]|[0-9]?[1-9]?[0-
6631 : failed : failed : 2.683395252 (s) : (\\d{2}/\\d{2}[a-z]+\\d{4})|(^[0-9]{2}-\\d{2}[a-z]{1}-\\d{4}$)
6632 : failed : failed : 17.703438553 (s) : [0-9]{2}[-/][0-9]{2}[-/][0-9]{4}
6633 : failed : failed : 0.505147218 (s) : (\\d\\d-\\d\\d-\\d\\d)
6634 : failed : failed : 0.694664851 (s) : ([0-9]{2})-([0-9]{2})-([0-9]{4})
6635 : failed : failed : 2.572802053 (s) : \\b
6636 : failed : failed : 2.391411398 (s) : (\\d{2}[-\\.\\s]\\d{2}[-\\.\\s]\\d{4})
6637 : failed : failed : 0.34530303 (s) : ^(\\\\w\\\\d\\\\d\\\\-\\\\d-\\\\d\\\\-\\\\d\\\\d)[\\\\w\\\\d]*$
6638 : failed : failed : 4.017909596 (s) : (?<![^0-9a-zA-Z-]\\.)\\d{2}
6639 : failed : failed : 0.572494442 (s) : \\d{1,2}\\s\\w{1,2}\\s\\d{4}
6640 failed : unparsable : 0 (s) : Please check your regex.
6641 : failed : failed : 0.211171814 (s) : ^.
6642 : failed : timeout : 600 (s) : (?i)(?=.*/)(\\/[^/]+|\\/.)
6643 : failed : failed : 8.840619245 (s) : /\\S[^/]*/Explanation for this answ
6644 : failed : failed : 0.537017578 (s) : /^[a-zA-Z0-9._-]+
6645 : failed : failed : 35.487043906 (s) : [^/]+
6646 : failed : failed : 10.617375218 (s) : [^/]*
6647 : failed : failed : 0.15937028 (s) : \"^\\/www\\.\"
6648 : unparsable : unparsable : 0.079323723 (s) : [a-zA-Z0
6649 failed : unparsable : 0 (s) : Please check your regex.
6650 : failed : failed : 2.478129848 (s) : /\\/[^/]*
6651 : unparsable : unparsable : 0.097983245 (s) : [
6652 : failed : failed : 0.616841809 (s) : \"
6653 : unparsable : unparsable : 0.071950646 (s) : (
6654 : failed : failed : 1.233779847 (s) : \"
6655 : failed : failed : 2.638022165 (s) : /
6656 failed : unparsable : 0 (s) : Please check your regex.
6657 failed : unparsable : 0 (s) : Please check your regex.
6658 failed : unparsable : 0 (s) : Please check your regex.
6659 : failed : failed : 0.204474202 (s) : \\
6660 : unparsable : unparsable : 0.106461572 (s) : [
6661 : unparsable : unparsable : 0.05690959 (s) : [A-Z][a-
6662 : failed : failed : 1.154764491 (s) : \\A(?=\\w)
6663 : failed : failed : 2.117750246 (s) : \\w*@ *\\w*\\s\\w*
6664 : success : init : 3.352517482 (s) : (0-9a-zA-Z\\s)+(.+){5}Now, here's the code I wro
6665 : failed : failed : 2.773193339 (s) : [\\w._-]
6666 : failed : failed : 0.514716998 (s) : (^[a-zA-Z]{1}[0-9]{6,}[^a-zA-Z][a-zA-Z0-9=]*)
6667 failed : unparsable : 0 (s) : Please check your regex.
6668 : failed : failed : 0.146883416 (s) : ^[^@]\\w$
6669 : failed : failed : 0.192699552 (s) : .(?![A-Za-z]{1}$).
6670 : failed : failed : 3.239028049 (s) : ^[A-Za-z0-9]+@([A-Za-z0-9]+\\.)+[A-Za-z]{2,4}$
6671 : failed : failed : 0.179137466 (s) : ^(?<Digits>[0-9]|\\.)(?<First>[0-9]|\\.)(?<Second>[0-9])$
6672 : failed : failed : 1.32076109 (s) : \\d{1,4}\\.?\\d{1,4}
6673 : failed : error init : 0.122494074 (s) : ^
6674 : failed : failed : 12.83623304 (s) : [0-9]{1}[a-zA-Z]{1}[0-9]{1}
6675 : failed : failed : 0.433582734 (s) : ^[0-9][0-9]$|^[0-9][0-9][0-9]$|^[0-9][0-9][0-9][0-9]$
6676 : failed : failed : 1.180091309 (s) : \\d(\\.)?\\d+
6677 : unparsable : unparsable : 0.092331101 (s) : \\b\\d{1,\\d}\\.\\d{1,\\d}\\b
6678 : failed : failed : 0.16083372 (s) : ^[0-9]{1,2}(\\.00[0-9]*)?$
6679 : failed : pumping failed : 200.323672737 (s) : .*\\d*$
6680 : failed : failed : 2.750860428 (s) : \\d{1,}\\.?\\d{1,}
6681 : failed : failed : 0.129623044 (s) : ^\\s*
6682 : failed : failed : 0.452213533 (s) : \\d+\\.\\d+ (no more than 3 decimal places).
6683 : unparsable : unparsable : 0.091981677 (s) : ([+-]?\\d+(\\.\\d+)?
6684 : failed : failed : 13.730363003 (s) : (?<!\\d)\\d{1,3}
6685 : failed : failed : 1.450170855 (s) : [a-z]\\s+[0-9]{3}\\s?[.,][0-9]{3}\\s?[a-z]
6686 : failed : failed : 0.266762514 (s) : # Generating a RegEx pattern for the descriptionmy_pattern = r\"([+-]?\\d+\\.\\d+|[+-]?\\d+)
6687 : failed : failed : 0.311935726 (s) : ^(\\d+\\.\\d+)?[eE][+-]?\\d+$
6688 : failed : failed : 1.166471755 (s) : \\d+\\.?\\d*
6689 : failed : failed : 1.427881085 (s) : (\\d)
6690 failed : unparsable : 0 (s) : Please check your regex.
6691 : failed : failed : 0.793694767 (s) : \\b(\\d{1,10})\\d{11}\\d{1,3}\\b
6692 failed : unparsable : 0 (s) : Please check your regex.
6693 : failed : failed : 0.548121001 (s) : ^\\+?\\d{6}-\\d{3}-\\d{2}$
6694 : failed : failed : 2.115336806 (s) : (\\\\d{3}|\\\\d{3}\\\\.){4}\\\\d{10}
6695 : failed : failed : 1.023156831 (s) : (?<prefix>\\d{1,1})(?<postfix>\\d{1,1})(?<zone>\\d{1,1})
6696 : failed : failed : 1.022645694 (s) : \\d{3}-\\d{3}-\\d{4}
6697 : failed : failed : 0.498873399 (s) : (\\d{10})
6698 : failed : failed : 0.464439528 (s) : \\b\\d{11}[ ]{1}[ ]{0,1}(\\d{5})\\b
6699 : failed : failed : 0.957096535 (s) : [0-9]{3}[-][0-9]{3}[-][0-9]{2}[-][0-9]{2}[0-9]{8}
6700 : failed : failed : 2.760504488 (s) : ^\\+?[1-9][0-9]{2}[0-9]{3}$
6701 : unparsable : unparsable : 0.080313235 (s) : ^[a-z][a-z][a-z]^|^[A-Z][a-z][A-Z]^|^[A-Z][A-Z][A-Z]^|^[A-Z][A-Z][A-Z][A-Z]^|^[A-Z][A-Z][A-Z][A
6702 : failed : failed : 0.879962373 (s) : \"^([a-z][a-z][A-Z]|[A-Z][a-z][A-Z])[a-z]$\"
6703 : failed : failed : 2.842608317 (s) : \"US\\s+([A-Z]{2}\\s+[A-Z]{2}\\s+[A-Z]{2}\\s+[A-Z]{2}\\s+[A-Z]{2}\\s+[A-Z]{2}\\s+[A-Z]{2}\\s*)\" This answer assumes valid 2 letter
6704 : failed : failed : 21.030877801 (s) : (?<![0-9]) 
6705 : failed : error init : 0.126295794 (s) : ^
6706 : failed : failed : 50.607568449 (s) : (([A-Z]{1,2}[_-][A-Z]{1,2})|(a-z[_-]a-z[_-]))
6707 : failed : failed : 2.97791242 (s) : /^
6708 : failed : failed : 1.420141802 (s) : \\b([a-z]{2})\\b
6709 : failed : failed : 3.600531838 (s) : (?<![A-Za-z])[A-Za-z][A-Za-z0-9]{0,2}(?![A-Za-z])
6710 : failed : failed : 0.846042684 (s) : ^[a-z]{2}[a-zA-Z]{1}$
6711 : failed : failed : 0.66404888 (s) : \\d{8}-99-9999
6712 : failed : failed : 14.713401928 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2}-99
6713 : failed : failed : 0.787193482 (s) : (\\d{2})(-?\\d{2})?-?\\d{4}-?\\d{2}-?\\d{4}-?\\d{4}-?\\d{4}
6714 : failed : failed : 0.20098625 (s) : YYYY-MM-DD-99-9999
6715 : failed : failed : 0.349904477 (s) : ^([1-9]\\d{2})([1-9]\\d{2})[-.]([1-9]\\d{3})-([1-9]\\d{4})$
6716 : failed : failed : 0.14637791 (s) : YYMMDD-99-9999-
6717 : failed : failed : 24.814130596 (s) : ([0-9]{3})-([0-9]{4})-([0-9]{5})
6718 : failed : failed : 0.202859698 (s) : ^\\d{4}\\-\\d{2}\\-\\d{2}\\-\\d{3}$
6719 : failed : failed : 0.100449143 (s) : YY-MM-DD-99
6720 : failed : failed : 0.202968161 (s) : ^[0-9]{2}-[0-9]{2}-[0-9]{4}-99-9999$
6721 : failed : failed : 0.766468963 (s) : ^[E||V]\\d\\d\\.(\\d{1,2})
6722 : failed : failed : 0.755107648 (s) : ^E{3}\d{1,2}\.\d{1,2}$
6723 : failed : failed : 0.998180851 (s) : [E|V]\\d{1,2}\\.\\d{1,2}
6724 : failed : failed : 1.082219653 (s) : (?i)[E|V]\\d{3}[0-9]{1,2}
6725 : failed : failed : 1.285944372 (s) : ([E|V]\\d{3}\\.\\d{1,2})
6726 : failed : failed : 0.344838089 (s) : E(0-3).V[0-9] (1-2 digits) (optional).
6727 : failed : failed : 0.170594798 (s) : ^[A-Z][0-9]{2}.[0-9]{1,2}$
6728 : failed : failed : 2.345435443 (s) : E00.[0-9]|V00[0-9]
6729 : failed : failed : 0.711237396 (s) : E.0A1
6730 : failed : failed : 17.753017244 (s) : ([A-Z]{3}(.\\d{1,2}))
6731 : failed : failed : 0.160198801 (s) : ^[A-Za-z0-9]{3}[0-9]
6732 : failed : failed : 1.473339951 (s) : \\b[A-Z0-9][A-Z0-9]\\b
6733 : unparsable : unparsable : 0.080204603 (s) : [a-z][0-9A-Z][0-9] (in the brackets there can be 4 digits or 1 letter(s) in the middle
6734 : failed : failed : 0.750394191 (s) : \\d{4}[A-Z]\\d{4}
6735 : failed : failed : 0.180201619 (s) : ^[a-zA-Z0-9]{5}$
6736 : failed : failed : 4.812395444 (s) : [a-zA-Z]{1}[0-9]([a-zA-Z]{1}[0-9]{3})
6737 : failed : failed : 25.708599554 (s) : [a-z]{5}\\d{3}
6738 : failed : failed : 2.786314941 (s) : \\d[A-Z]|\\d[A-Z]+
6739 : failed : failed : 0.431731077 (s) : CPT_DESCRIPTION_REGEX = re.compile(r\"^[A-Za-z\\d]+_[A-Za-z\\d]+$\")
6740 : failed : failed : 0.645750844 (s) : [A-Z]\\d{3}\\w+
6741 : failed : failed : 5.808727142 (s) : ^[a-zA-Z0-9_.-]+$
6742 : failed : failed : 14.485414405 (s) : [a-zA-Z0-9_.-]'
6743 : failed : failed : 0.170292432 (s) : [A-Za-z0-9_.-]{4,10}
6744 : failed : failed : 0.256551513 (s) : ^[a-zA-Z0-9_.-]{4,10}$
6745 : failed : failed : 3.225329698 (s) : r'^[\\d.\\-]{4,10}$'
6746 : failed : failed : 6.052470389 (s) : ^[A-Za-z0-9_.-]+$
6747 : failed : failed : 0.206298648 (s) : ^[a-zA-Z0-9_-]{4,10}$
6748 : failed : failed : 7.36580911 (s) : ^[0-9A-Za-z_.-][0-9A-Za-z0-9_.-]*$
6749 : failed : failed : 0.647650632 (s) : \\d{4,10}[._.-]
6750 : failed : failed : 0.187373178 (s) : ^[A-Za-z0-9][A-Za-z0-9_.-]{0,3}[A-Za-z0-9]$
6751 : unparsable : unparsable : 0.141384148 (s) : [0-9]{
6752 failed : unparsable : 0 (s) : Please check your regex.
6753 : unparsable : unparsable : 0.059712108 (s) : h[0-
6754 failed : unparsable : 0 (s) : Please check your regex.
6755 : unparsable : unparsable : 0.077288632 (s) : ^\\d{
6756 failed : unparsable : 0 (s) : Please check your regex.
6757 : failed : failed : 0.569725567 (s) : (1x3)^\\d+
6758 failed : unparsable : 0 (s) : Please check your regex.
6759 failed : unparsable : 0 (s) : Please check your regex.
6760 : failed : error init : 0.122118511 (s) : ^
6761 : failed : failed : 1.323170151 (s) : \\d{3,}\\.?\\d
6762 : failed : failed : 0.125247922 (s) : ^[0-9]{3}(,[0-9]{3}){3}$
6763 : failed : failed : 0.128691911 (s) : (?<=^|[,.])([+-]?)
6764 : failed : failed : 0.172009518 (s) : ^\\d{3}([3,4]\\d|\\d\\d)(,\\d{3})*$
6765 : failed : failed : 31.588868747 (s) : ^\\d+([,\\d]{3})*(\\d+([,\\d]{3})*)?$
6766 : failed : error init : 0.10846829 (s) : ^
6767 : failed : error init : 0.077879969 (s) : ^
6768 : failed : failed : 0.195843561 (s) : ^(([0-9]{0,3}\\.)?[0-9]{3}[0-9])$
6769 : unparsable : unparsable : 0.072001982 (s) : (^|,)(0|\\d\\d\\d)(0|\\d\\d\\d)(0|\\d\\d\\d)(0|\\d\\d\\d)(0|\\d\\d\\d)(0|\\d\\d\\d)(0|\\d\\d\\d)(0|\\d\\d\\d)(0|\\d\\d\\d)(0|\\d\\d\\
6770 : failed : timeout : 600 (s) : (?<=\\d{1,3}(,\\d{3})*)([\\d.]{1,2})(?=\\D|$)Explanati
6771 failed : unparsable : 0 (s) : Please check your regex.
6772 : failed : failed : 1.308412305 (s) : [1-9][0-9]*
6773 : failed : failed : 0.537751252 (s) : ^(0|--|100|--|1,000,000|--|1,000,000,000|--|1,000,000,000,000,000,000|--|1,000,000,000,000,000,000,000,000,000)$
6774 : failed : pumping failed : 27.099289764 (s) : 0(1|2|3|4|5|6|7|8|9|0)+\"\"\"
6775 : failed : pumping failed : 144.533546437 (s) : (0|$)([1-9][0-9]*)([0]*)?$
6776 failed : unparsable : 0 (s) : Please check your regex.
6777 : failed : failed : 0.915179671 (s) : \"\\b([+-]\\d+)[0-9]*(\\b|$)\"
6778 : failed : pumping failed : 126.329519126 (s) : 0(0)+1
6779 : failed : failed : 0.493762318 (s) : ^[0-9]+$;
6780 : failed : failed : 0.324805206 (s) : 1, 2, 3,  4,  5, 6,  7,  8,  9, 10,  11, 12, 13, 14, 15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,
6781 : failed : failed : 0.125773305 (s) : ^\\+.*\\(00\\).*$
6782 : failed : failed : 0.747125019 (s) : ^\\+[0-9]{2}\\(\\d{3}\\)$
6783 : failed : failed : 0.273402699 (s) : ^(\\+)?([1-9][0-9]|[1-9][0-9]\\d|2[1-8])[- ]?\\d{3}[- ]?\\d{3}[- ]?\\d{4}$
6784 : failed : failed : 1.522344198 (s) : (0?\\d{3}[-.]\\d{3}[-.]\\d{4})|(0?\\d{3}[-.]\\d{3}[-.]\\d{3})-(\\d{4})$
6785 : failed : failed : 0.878530772 (s) : (0\\\\d{3}\\\\d{2}).*$
6786 : failed : error init : 0.130696835 (s) : (?<![0-9])
6787 : failed : failed : 0.173264979 (s) : ^([1-9])\\d{3}-\\d{2}$
6788 : failed : failed : 11.939655884 (s) : ^(\\+|\\d{2})\\d{3}\\d{3}$
6789 : failed : failed : 0.968785003 (s) : ^\\+?[1-9]\\d\\d\\s?\\d\\d\\d\\s?
6790 : failed : failed : 45.423068006 (s) : (0[3]|[2-9][0-9]|[1-9][0-9][0-9])\\s?
6791 : failed : failed : 6.821381475 (s) : (\\d{1,2}|^[1-9][0-9]{0,2})
6792 : failed : failed : 16.981961713 (s) : [0-9]?[0-9]|[1-9]?[0-9][0-9]|1[012]
6793 : failed : failed : 55.047853955 (s) : ^(1[0-2])[0-9]|[0-9]{2}[0-9][0-9]$
6794 : failed : failed : 1.83253665 (s) : \\b[1-9]?\\d?\\d?\\.\\d?\\d?\\b
6795 : failed : failed : 1.611430442 (s) : (.{1}[\\d\\.]+[\\d]{2})
6796 : failed : failed : 0.126887772 (s) : ^[1-9][0-9]?[0-9]?$
6797 : failed : failed : 5.342489026 (s) : [0-9]{0,1}\\.[0-9]{0,1}
6798 : failed : failed : 21.911234954 (s) : (100%|1[0-2]?%|[1-9]?%|[0-9]?%|[1-9]?)\\s*$
6799 : failed : failed : 0.240468125 (s) : r'^1[0-9]*
6800 : failed : failed : 0.671537242 (s) : \\d{1,2}
6801 : failed : failed : 0.60138825 (s) : R(XXXX).Y(ZZZ).\"\"\"
6802 : unparsable : unparsable : 0.096689572 (s) : (?<!^)((
6803 : failed : failed : 0.208895912 (s) : \\d{2}\\.\\d{2}\\.\\d{2}\\d{2}\\.\\d{1,2}\\.\\d{1,2}\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}\\d{1,2}\\.\\d{1,2}\\.\\
6804 : failed : failed : 8.432409404 (s) : ^[A-Z0-9]+\\.[A-Z0-9]+\\.[A-Z0-9]+$
6805 : failed : failed : 0.696434064 (s) : \\b(0\\.){1,2}\\d{3}
6806 : failed : failed : 1.3831068 (s) : xx.yy.zz
6807 : failed : failed : 1.493584041 (s) : [a-zA-Z0-9].{0,3}.{0,3}(?=.[a-zA-Z0-9])
6808 : failed : failed : 0.405761786 (s) : XX\\.YY\\.(ZZ)
6809 : failed : failed : 0.902207238 (s) : [0-9]{2}[0-9]{7}
6810 : failed : failed : 3.761023106 (s) : ([0-9]{2}).([0-9]{2}).([0-9]{4})
6811 : unparsable : unparsable : 0.113827616 (s) : \"\\\\b(\\\\d{1,3}/[1-9]\\\\d{0,2
6812 : failed : failed : 0.992474826 (s) : \\d[1-9]\\d
6813 : unparsable : unparsable : 0.112144914 (s) : [0-9]{1,3}\\.[0-9]{1,3}\\.[0-
6814 : unparsable : unparsable : 0.107385603 (s) : [\
6815 : unparsable : unparsable : 0.080446646 (s) : [A-Za-z0-9]([-\\.]){0,3}[A
6816 : unparsable : unparsable : 0.09310996 (s) : /[0-9]\\.[0-9]\\.[0-9]\\.[0-9
6817 : unparsable : unparsable : 0.089005213 (s) : [\\\\\"/].*[\\\\\"
6818 : unparsable : unparsable : 0.054556644 (s) : /[\\s\\S]*?(?=\\b
6819 : unparsable : unparsable : 0.052938213 (s) : [\\w\\d
6820 : failed : failed : 0.707499716 (s) : \\w+/(\\d+)\\.(\\d+)\\.(\\d+)/
6821 : failed : failed : 9.08939152 (s) : [^127.0.0.1]The regex sa
6822 : failed : pumping failed : 124.777892335 (s) : (.*?)\\.(.*?)
6823 : failed : failed : 7.980466929 (s) : ^[a-z0-9]{1,63}(\\.|\\-|\\.){3}[a-z0-9]{1,63}$ No
6824 failed : unparsable : 0 (s) : Please check your regex.
6825 : unparsable : unparsable : 0.111644557 (s) : ^(?!\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\d{1,3}\\.\\d{1,
6826 failed : unparsable : 0 (s) : Please check your regex.
6827 : failed : failed : 0.314170561 (s) : ^([0-9]|1[0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]|1[0-9]|2[0-4][0-9]|25[0-5])$
6828 : failed : failed : 0.169579087 (s) : .
6829 : failed : failed : 31.178487413 (s) : (^(?!.*\\.)[0-9]{1,3}\\.(0\\.){1,3}\\.(0\\.){1,3}\\.(0\\.){1,3})$
6830 : failed : failed : 0.344154399 (s) : \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}, which is a range of IP addresses and does not include 127.0.0.1.
6831 : failed : failed : 1.486473756 (s) : \\d\\d\\d\\d\\/\\d\\d\\/\\d\\d( 0[1-9]|1[0-2]\\d|2[1-9]|3[01]|4[012]|5[012])\\/\\d\\d\\d
6832 : failed : failed : 0.158687641 (s) : \\d\\d/\\d\\d/\\d\\d
6833 : failed : failed : 0.690353849 (s) : ^(([0-3]?[0-9]|4[0-9])\\/([0-9]|1[0-2]))
6834 : unparsable : unparsable : 0.08044848 (s) : (?<![a-zA-Z])(?<![0-9])(?<![-/])[a-zA-Z0-9]{3}/((?!(0[1-9]|1[0-2]))[0
6835 : unparsable : unparsable : 0.084682708 (s) : var pattern = /^\\d{4}\\/\\d{2}\\/\\d{2}$/;    console.log( 'validateDa
6836 : failed : failed : 0.616663114 (s) : \\d{4}/\\d{2}/\\d{2}
6837 : failed : failed : 0.191386644 (s) : $expr = \"
6838 : failed : failed : 0.770985651 (s) : \\d{4} \\/\\d{2} \\/ \\d{2}
6839 : failed : failed : 0.33509808 (s) : \\d/\\d/\\d$
6840 : failed : failed : 2.238853495 (s) : [0-9]\\d{3}/[0-9]\\d{2}/[0-9]{4}
6841 : failed : failed : 0.51455275 (s) : (?<year>\\d{4})(-(?<month>\\d{2})(-(?<day>\\d{2}))?)?    Exampl
6842 : failed : failed : 3.106738783 (s) : yyyy[0-9]{4}  /((0|1|2|3)|(4|5|6)|(7|8|9))
6843 : failed : failed : 0.986509454 (s) : \\d{4}\\/\\d{2}\\/\\d{2}[AP]M
6844 : failed : failed : 12.808370985 (s) : [0-9]{3}[.][0-9]{3}[.][0-9]{2}
6845 : failed : failed : 1.339716636 (s) : ^(?=.*\\d)(?=.*[A-Za-z])[\\d]{2}/\\d{1,2}/\\d{4}$
6846 : unparsable : unparsable : 0.108474632 (s) : \\d{4}-\\d{2}-\\d{2}T\\d{
6847 : unparsable : unparsable : 0.077897392 (s) : ^(
6848 failed : unparsable : 0 (s) : Please check your regex.
6849 : failed : failed : 0.12076173 (s) : Y|
6850 : failed : failed : 0.15118932 (s) : \\d{4}/\\d{2}/\\d{2} (any valid dates in YYYY/MM/DD format)
6851 : failed : failed : 0.172559367 (s) : YYYY-MM-DD or YYYY-MM-DD-0000
6852 failed : unparsable : 0 (s) : Please check your regex.
6853 : failed : failed : 0.22383649 (s) : \\d{4}-\\d{2}-\\d{2} or \\d{4}-\\d{2}-\\d{2} or \\d{4}-\\d{2}-\\d{4}
6854 : failed : failed : 1.133526902 (s) : \\d\\d\\/\\d\\/\\d\\d| \\d\\d\\/\\d\\/\\d{4}| \\d\\d\\/\\d{2}[0-3]| \\d{4}
6855 failed : unparsable : 0 (s) : Please check your regex.
6856 : failed : error init : 0.129912176 (s) : ^
6857 : failed : failed : 0.634813903 (s) : (\\d{4}[-/]\\d{1,2}[-/]\\d{1,2})
6858 : failed : failed : 0.171919339 (s) : @f1mqwg7g
6859 : unparsable : unparsable : 0.083559785 (s) : '^((1[0-2]|0[1-9])/(3[0-1]|[12])/[0-9]{4}|[0-9]{2}-(1[0-2]|0[1
6860 : failed : failed : 0.584258312 (s) : \\d{4}/\\d{1,2}/\\d{1,2} or \\d{4}-\\d{2}-\\d{2}
6861 : unparsable : unparsable : 0.102454788 (s) : (0*\\d{9})|(\\d+
6862 : failed : failed : 0.172705471 (s) : ^(0\\d|(1\\d|2\\d|3\\d|4\\d|5\\d|6\\d|7\\d|8\\d|9\\d)|1\\d|2\\d|3\\d|4\\d|5\\d|6\\d|7\\d|8\\d|9\\d|0)$
6863 : failed : pumping failed : 57.914532632 (s) : (.*?)\\.(0+)(\\d*)([a-zA-Z0-9-]*)$
6864 failed : unparsable : 0 (s) : Please check your regex.
6865 : failed : failed : 0.710189493 (s) : \\d{4}([0-9]{2}|\\.)(?!0)
6866 : failed : failed : 0.211402676 (s) : ^[1-9]\\d*\\.(0|$)
6867 : failed : failed : 0.160774479 (s) : ^[1-9][0-9]?[0-9]?\\.[0-9]?$
6868 : failed : failed : 6.254274091 (s) : (?<!\\d)\\d{1,99}(?!0)
6869 : unparsable : unparsable : 0.058189136 (s) : ^(?=\\d*\\.\\d*$)(?!0*
6870 : failed : failed : 0.269801255 (s) : ^(?!0*?0)(?!0*?00?)(?!0*?0*?0$)[a-zA-Z0-9\\s]{0,15}$
6871 : failed : failed : 0.434552631 (s) : ^[a-zA-Z0-9-_.]*$
6872 : failed : failed : 1.406398115 (s) : [^\\S]
6873 : failed : pumping failed : 55.728877386 (s) : .+[0-9]+(\\.\\d+)?
6874 : failed : failed : 0.803371357 (s) : [^a-zA-Z0-9]
6875 : failed : failed : 9.025631432 (s) : ^[a-zA-Z0-9_\\-\\+\\=\\(\\)\\/\\\\]*$
6876 : failed : failed : 10.771077875 (s) : [a-zA-Z]\\\\d*
6877 : failed : failed : 0.175345845 (s) : [a-zA-Z0-9]*
6878 : failed : failed : 1.272061614 (s) : \\W
6879 : failed : failed : 0.203042581 (s) : [\\w\\d]*
6880 : failed : failed : 2.074443358 (s) : [A-Za-z0-9\\.\\\\-\\_]+
6881 : failed : failed : 0.233121037 (s) : ^[A-Z0-9]{3}-[A-Z0-9]{3}-[A-Z0-9]{4}
6882 : failed : error init : 0.123681408 (s) : ^
6883 : failed : failed : 0.133263923 (s) : XXX-XX-XX-XXX
6884 : failed : failed : 2.871861006 (s) : ([0-9]{2}-[0-9]{4}-[0-9]{4}-[0-9]{4})
6885 : failed : failed : 1.388927139 (s) : (?<!\\s)(\\d{3}-\\d{3}-\\d{4})(?!\\s)
6886 : unparsable : unparsable : 0.088868958 (s) : ^(?<first_part>\\d{3}-\\d{3}-\\d{3}-\\d{4})(?<second_part> \\d{3}-\\d{3}-\\d{3}-\\d{4})$
6887 : unparsable : unparsable : 0.071329162 (s) : (?<NIP_ID>(
6888 : failed : failed : 0.25358631 (s) : XXX-XX-XX-XXX ; XXX-XXX-XX-XX ; XXX XX XX XXX ; XXX XXX XX XXAnsw
6889 : failed : failed : 13.783201589 (s) : (\\d{0,3})([A-Z]{1,3}){0,3}-[A-Z]{1,3}-[A-Z]{1,3}-[A-Z]{1,3}No
6890 : failed : error init : 0.138517991 (s) : ^
6891 : unparsable : unparsable : 0.069481152 (s) : ^[a-f0-9]{2
6892 : failed : failed : 0.181022135 (s) : ^([0-9a-f]{2}){5}$
6893 : failed : failed : 0.229025457 (s) : ^[0-9A-Fa-f]{2}-[0-9A-Fa-f]{2}-[0-9A-Fa-f]{2}-[0-9A-Fa-f]{2}-[0-9A-Fa-f]{4}$
6894 : unparsable : unparsable : 0.073502151 (s) : ^([A-Fa-f0-9]{2
6895 : unparsable : unparsable : 0.061134863 (s) : ^([A-Fa-f0-9]{2}
6896 : unparsable : unparsable : 0.083896847 (s) : ^([0-9A-Fa-f]{2
6897 : failed : failed : 0.178959512 (s) : ^[0-9a-f]{2}\\-{2}[0-9a-f]{2}\\-{2}[0-9a-f]{2}\\-{2}[0-9a-f]{2}\\$
6898 : failed : failed : 0.467429156 (s) : /^([0-9a-fA-F]){5}([0-9a-fA-F]){3}([0-9a-fA-F])$/.
6899 : unparsable : unparsable : 0.070503516 (s) : [0-9A-Fa-f]{2
6900 : failed : failed : 0.828806948 (s) : (\\d{2}-){5}\\d{2}-
6901 : unparsable : unparsable : 0.069295013 (s) : \\+?([0-9]+
6902 : success : init : 2.696471849 (s) : ^(\\+?[0-9]*(.[0-9]*)?|[0-9]*(.[0-9]*)*)([eE][+-]?[0-9]+)?[.]?[0-9]+$
6903 : failed : failed : 8.509578071 (s) : \\d+(\\.\\d+)?\"
6904 : failed : failed : 18.67931255 (s) : \\d+\\.\\d+|\\d+\\.\\d+$
6905 : failed : failed : 47.828322585 (s) : [0-9]{1,3}[\\.][0-9][0-9]
6906 : failed : pumping failed : 102.694347444 (s) : [0-9]+\\.[0-9]*
6907 : failed : pumping failed : 270.511012691 (s) : [+]?[0-9]*\\.[0-9]*
6908 : failed : failed : 0.144360823 (s) : ^\\+?
6909 : failed : failed : 0.147523986 (s) : ^[+]?\\d+
6910 : failed : failed : 1.885559772 (s) : [0-9]+
6911 : failed : failed : 0.815417645 (s) : /^[0-9]{5}[a-zA-Z0-9]{3}
6912 : unparsable : unparsable : 0.112925897 (s) : /^([a-z]{5}([a-z0-9]{6}[0-
6913 : failed : failed : 0.483556767 (s) : (at least 9 characters)
6914 : unparsable : unparsable : 0.066792006 (s) : ^(?=.{15})(?=\\w{5})(?=\\d{6}
6915 : unparsable : unparsable : 0.076145942 (s) : ^(?=^[a-zA-Z][0-9]{5}[0-
6916 : unparsable : unparsable : 0.065926906 (s) : \\A[A-Z]{5}[a-zA-Z0-9]{5
6917 : unparsable : unparsable : 0.082786057 (s) : ^(?=.*([0-9]{1,2})-([0-9]{1,
6918 : failed : failed : 0.175343161 (s) : ^[A-Za-z]{5}\\d{1,6}\\d{1,3}\\
6919 : unparsable : unparsable : 0.071382713 (s) : /^(?=.*[a-z])(?=.*[A-Z])(?=.*
6920 : unparsable : unparsable : 0.064180716 (s) : [a-zA-Z]{6}[0-9]{5}(1[0-
6921 : failed : failed : 0.523647821 (s) : \"^[a-zA-Z][(a-zA-Z-)]{2}[-\\'.\\s]*[a-zA-Z]$\"
6922 : failed : failed : 5.517387023 (s) : personName = ~\"[a-zA-Z][a-zA-Z][a-zA-Z].*?\"
6923 : failed : failed : 1.555214431 (s) : The RegEx is [a-z0-9]+(['-'][a-z0-9]+)*
6924 : unparsable : unparsable : 0.071392822 (s) : The pattern is [a-zA-Z-]{3}[a-zA-Z0-9]{3}[a-zA-Z0-9]{3}[a-zA-Z0
6925 : unparsable : unparsable : 0.100577163 (s) : /^[A-Z][A-Za-z0-9'- ]*$/;
6926 : failed : failed : 0.600656149 (s) : \\b[a-z]{1,3}\\s[a-z]{2}\\b
6927 : failed : failed : 6.702709619 (s) : ^[a-z][a-z0-9-]*$     ^[a-z][a-z0-9-]*$
6928 : unparsable : unparsable : 0.059737887 (s) : ^[a-zA-Z][a-zA-Z-]{2}-${a-zA-Z,A-Z,0-9,_}$
6929 : unparsable : unparsable : 0.106788544 (s) : /^[a-zA-Z]([a-zA-Z-][a-zA-Z-]*['a-zA-Z-][a-zA-Z-]*['a-zA
6930 : failed : failed : 3.302198954 (s) : [a-zA-Z0-9_][a-zA-Z0-9_ -]*[a-zA-Z0-9_ -]
6931 : failed : failed : 11.399151139 (s) : [0-9]{1,2}H[0-5][0-9][0-9] (12-59)
6932 : unparsable : unparsable : 0.072560227 (s) : (2[0-9]|[1-9][0-9
6933 : failed : failed : 1.418689823 (s) : \\d{1,2} (00|1|2|3|4|5|6|7|8|9|0)\\d
6934 : failed : failed : 0.509866625 (s) : ^(1[012]|2[03]\\d|3[01])am\\/([1-9]\\d|[1-2]\\d)-([1-9])pm\\/([1-9]\\d)$
6935 : failed : failed : 0.217966818 (s) : ^\\d{1,2}[a-zA-Z]{1}\\d{0,2}[a-z]{1}[a-z]{1}$
6936 : failed : pumping failed : 59.957617714 (s) : [^\\s]+ [0-9] [0-9] [AP | aP ] [AP| aP ] [0-9] [0-9] [AP | aP ] [0-9] [0-9]
6937 : unparsable : unparsable : 0.072851844 (s) : (\\d\\d?){2
6938 : unparsable : unparsable : 0.088621674 (s) : \\d{
6939 : failed : failed : 1.311648245 (s) : 12[0-9]*
6940 : failed : error init : 0.152846584 (s) : (?i)
6941 : unparsable : unparsable : 0.076145211 (s) : ((?<!\\d)([a-z]\\d{1,3})(?!\\d))|((?<!\\d)(\\d{1,3})(?!\\d
6942 failed : unparsable : 0 (s) : Please check your regex.
6943 : failed : error init : 0.097969279 (s) : (?<![0-9])
6944 : failed : failed : 1.682251473 (s) : [^\\.0-9]|[^\\d0.]+
6945 : failed : failed : 1.966439659 (s) : [a-zA-z0-9-\\._]{1,20}
6946 : failed : failed : 0.151888629 (s) : <^0\\.000 <1\\.000^2 <1\\.001 <1\\.002 <1\\.003 <1\\.004 <1\\.005 <1\\.006 <1\\.007 <1.
6947 : failed : failed : 11.798295613 (s) : [^\\d]|\\d{1,3}\\.?\\d{2}\\.?|\\d{1,4}\\.?
6948 : failed : failed : 0.832850671 (s) : 0.001 < 1.000 (1.000<1.001<1.002<1.001<1.002<1.001<1.003<1.001)
6949 : unparsable : unparsable : 0.104407314 (s) : (0(?=\\d)\\d
6950 : failed : pumping failed : 138.562860996 (s) : [a-zA-Z0-9\\s\\-]+[a-zA-Z].
6951 failed : unparsable : 0 (s) : Please check your regex.
6952 : failed : failed : 0.993330448 (s) : [0-9]\\d\\d\\/[0-9]\\d\\/[0-9]\\d(19|20)\\d\\d
6953 : unparsable : unparsable : 0.071492508 (s) : (?<![0-9])([1-3][0-9]/[1-9][0-9]/[0-9][0-9]|[1-3][0-9]/[1-9][
6954 : failed : failed : 0.206068948 (s) : ^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}
6955 : failed : failed : 0.166855917 (s) : \\d/\\d/\\d?
6956 : failed : failed : 15.504667129 (s) : \\d{1,2}[-/\\s]?\\d{1,2}[-/\\s]?\\d{4}
6957 : failed : failed : 5.76426412 (s) : (\\d{1,2}|\\d{3})/(\\d{1,2}|\\d{3})/(\\d{4})
6958 : failed : failed : 1.136431922 (s) : (\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})
6959 : failed : failed : 11.296968318 (s) : (?<=D/)
6960 : failed : failed : 0.929692929 (s) : D/M/YYYY|DD/MM/YYYY|MM/DD/YYYY|DD/MM/YYYY
6961 : failed : timeout : 600 (s) : ([^w]*w[^e]*e[^a]*a[^d]*d)[^w]*
6962 : failed : failed : 1.067881774 (s) : \\b
6963 : unparsable : unparsable : 0.115516137 (s) : var weekday = function () {     var weekdays = [\"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\", \"sun\"];     return [        new RegExp(\"^
6964 : unparsable : unparsable : 0.084219511 (s) : import reweekdayNamePattern = re.compile( r\"([A-W]|[a-w]|[Ff]rst|[gG]rst|[Mm]onday|[Mm]onday|[Mm]onday|[Mm]onday|[Jj]ury|[Jy]ury|[fF])
6965 : failed : failed : 1.02163405 (s) : (example) [a-m]?
6966 : failed : failed : 0.249510328 (s) : ^[a-z]{2,}||[a-z]+[a-z][a-z]{2,}
6967 failed : unparsable : 0 (s) : Please check your regex.
6968 failed : unparsable : 0 (s) : Please check your regex.
6969 : failed : failed : 0.155758858 (s) : (?i)^[a-z][a-z1]?[a-z]$
6970 : failed : failed : 17.901873568 (s) : ([A-Z][a-z]{1,2})?([a-z0-9]+)
6971 : failed : pumping failed : 4.334136066 (s) : [0-9]{1,3}[.]{0,1}[0-9]{1,3}[.]{0,1}[0-9]{1,3}[.]{0,1}[0-9]{1,3}[.]{0,1}[0-9]{1,3}[0-9]'
6972 : failed : failed : 0.409715301 (s) : (0-9)\\.?[1-9]{2}\\.?[1-9]{2}\\.?[1-9]{2}\\.?[1-9]{2}\\.?[1-9]{2}\\.?[1-9]{2}\\.?[1-9]{2}\\.?[1-9]{2}\\.?[1-9]{2}\\.?[1-9]
6973 : unparsable : unparsable : 0.077798372 (s) : (?<num>\\(\\d{1,5}\\)\\d{1,5}|\\d{1,3}\\d{1,5}\\d{1,5}|\\d{1,4}\\d{1,5}\\d{1,5}|\\d{1,5}\\d{1,5}|\\d{1,4}\\d{1,5}|\\d{1,3}\\d{1,
6974 : failed : failed : 2.749710183 (s) : /^
6975 : unparsable : unparsable : 0.056841247 (s) : (^\\d{4}-\\d{3}-\\d{2}
6976 : failed : failed : 0.577328235 (s) : [0-9]{9}
6977 : failed : failed : 0.188552333 (s) : ^\\d{3}-?\\d{3}-?\\d{4}$
6978 : failed : error init : 0.098025257 (s) : ^
6979 : unparsable : unparsable : 0.06317581 (s) : (\\d{3}\\d{,3})\\d{3}-\\d{4}
6980 : unparsable : unparsable : 0.097335075 (s) : (?<!\\d)(?<!\\d\\s)(?<!\\d\\s\\s)(?<!\\d\\s\\s\\s)(?<=\\d[\\d\\s\\d]{1}[\\d\\s\\d]{1}[\\d\\s\\d]{1})(?<!\\d[\\d\\s\\d]{1}[\\d\\s\\d]{1
6981 : unparsable : unparsable : 0.057468853 (s) : [00]{0,}[1-3]{0,}[0-9]+[0-9]{5}[-0-9]{0,5}[0-9]{6}[-0
6982 : failed : failed : 341.648006407 (s) : ([0-9]{1,3}[ -]?)[0-9]{3}[ -]?([0-9]{1,3}[ -]?)[0-9]{1,4}-
6983 : failed : failed : 0.240441368 (s) : ^0[0-9]{2}[0-9]{3}( [0-9]{3})?$
6984 : unparsable : unparsable : 0.078903611 (s) : ^[+]00[0-9]{1,3}[ -]00[0-9]{1,3}[ -]00[0-9]{1,3}[ \\-]00[0-
6985 : failed : pumping failed : 47.213267444 (s) : (00 | + | 0-9 )?[0-9]{5}-[0-9]{3}[0-9]{3}
6986 : failed : failed : 0.216578564 (s) : ^00[1-9]\\d{0,3}[-.]?\\d{5,11}$
6987 : unparsable : unparsable : 0.059891389 (s) : /^(\\+?00[0-9]{3}[- ]?0[0-9]{4}[- ]?[0-9]{3}[- ]?[0-9]{3}
6988 : failed : failed : 13.61943583 (s) : (00 - 0x1? | 01 - 0?3? ) + [0-9 -]{3,5}[0-9 -]{3,9}
6989 : unparsable : unparsable : 0.068778541 (s) : (00|01|04|05|06|07|08|09|10|11)*( 0|-)+\\d{1,3} (1|2|3|4|5|6|7|8|9
6990 : unparsable : unparsable : 0.069165635 (s) : (1
6991 : failed : failed : 3.161722215 (s) : ((0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|1[012])\\/(0[1-9]|[12][0-9]|3[01]))
6992 : failed : failed : 8.045789903 (s) : \\d{1,2}{1,2}(\\-)?(0?[1-9])|(0?[1-9])-(0?[1-9])-0?[1-9]
6993 : failed : failed : 0.22215201 (s) : %d\\d\\d/%m/%Y
6994 : failed : failed : 0.18550667 (s) : 01234567-89AB-CDE-FGHIJ-KLMNOP
6995 : unparsable : unparsable : 0.07201426 (s) : ^(([0-9]{4})([1-9]{3})([0-9]{2})?))$
6996 : failed : failed : 2.335702684 (s) : ^(?=.*[0-9])(?=.*[A-z])(?=.*[0-9])(?=.*[a-z])(?=.*[A-z][0-9])(?=.*[0-9][a-z][0])[A-z][0-9]{4}$
6997 : unparsable : unparsable : 0.072431952 (s) : ^[0-9]{4,2}[0-9]{3}
6998 : failed : failed : 0.90255665 (s) : \\d{4}(0[1-9])[-/](0[1-9])[1-2]
6999 : failed : failed : 0.14040201 (s) : dd/mm/yyyy
7000 : failed : failed : 0.569772777 (s) : (\\d\\w\\d\\d\\d-\\d\\d-\\d\\d)
7001 : unparsable : unparsable : 0.106912248 (s) : [examples]- [Example 1]  Match [a] French phone number with or without french international dialling code  + Start with a telephone number such as ([+])([(])(\\d{3})(\\d{3})(\\d{4}))  + End with a phone number such as ([+])([(])(\\d{3})(\\d{3})(\\d{4}))  + Match
7002 failed : unparsable : 0 (s) : Please check your regex.
7003 : unparsable : unparsable : 0.095147018 (s) : \\(?(?<!\\.)[1-9][0-9]{1,2}[1-9]
7004 : failed : failed : 0.411841633 (s) : htt
7005 : failed : failed : 0.377578413 (s) : (^[0-9][0-9]\\d[0-9]$) or (^[0-9][0-9]\\d$)
7006 : failed : failed : 5.578629949 (s) : [^\\s]*
7007 : failed : failed : 2.961946375 (s) : \"^[\\+44]|[43]\\d{5,9}$\"
7008 : unparsable : unparsable : 0.136003563 (s) : (\\(?\\d{1,3}\\)?[\\.\\s\\-]?\\d{4}[\\.\\s\\-]?)
7009 : failed : failed : 1.966842586 (s) : ht
7010 : failed : error init : 0.094690272 (s) : ^
7011 : failed : failed : 0.921972888 (s) : [0-9]\\d{0,3}(,\\d{0,3})?
7012 : failed : failed : 8.284865895 (s) : [0-9]{2}-[0-9]{2}-[0-9]{4}
7013 : failed : failed : 0.174190671 (s) : (?x)^\\d*\\d+$
7014 : unparsable : unparsable : 0.053031013 (s) : (?<!(?<!\\\\$)\\d+\\.\\d+)(?<![^0-9])[0-9]+
7015 : failed : pumping failed : 4.643313415 (s) : [0-9]+[,.]?[0-9]*[eE][+-]?[0-9]*[.]?[0-9]+
7016 : failed : failed : 2.662537808 (s) : \\d{1,2}
7017 : failed : failed : 0.337122598 (s) : [^0-9a-zA-Z.-]
7018 : failed : failed : 1.955499846 (s) : #\\d+$
7019 : failed : failed : 0.221091565 (s) : ^([a-zA-Z0-9!@#%^&*()_\\-\\+=,\\/\\|\\\\\\[\\]{};<>?=~]){9,20}(?![a-zA-Z0-9!@#%^&*()_\\-\\+=,\\/\\|\\\\\\[\\]{};<>?=~])
7020 : failed : failed : 2.655954682 (s) : (^([0-9]{1,2})(\\.[0-9]{1,2})?(,[0-9]{3})*)?$
7021 : failed : failed : 0.74308384 (s) : ^(0[1-9]|1[0-2])\\/\\d{2}\\.[0-9]{2}([-\\/])\\d{2}([-\\/])\\d{4}$
7022 : failed : failed : 2.155108412 (s) : (0(1[ -/]9) | 1[ -/]2)
7023 : unparsable : unparsable : 0.083262784 (s) : (dd)[.-/](MM)[.-/](yyyy)[ ](hh
7024 : failed : failed : 0.621416922 (s) : (dd)[.-/](MM)[.-/](yyyy)[ ]?(hh)
7025 : failed : failed : 0.762306315 (s) : (0[1-9]|1[012])[ -]?([0-9]{2})([ -]?[0-9]{2})\\.([1-9][0-9]{2})\\.([0-9]{4})
7026 : failed : failed : 1.156944163 (s) : ([0-9][0-9][0-9])
7027 : unparsable : unparsable : 0.084416194 (s) : (dd[.-/](MM)[.-/](yyyy) )[ ](h
7028 : unparsable : unparsable : 0.079209444 (s) : (0[.]1[.]3|1[.]9|2[.]0|2[.]1|2[.]3|3[.]0|3[.]1|3[.]9|4[.]0|4[.]1|4[.]3|5[.]0|5[.]1|5[.]9|6[
7029 : failed : failed : 0.409977552 (s) : ^[0-9]{2}[.]?[0-9]{2}[.]?[0-9]{4}$|^[0-9]{2}
7030 : unparsable : unparsable : 0.094953515 (s) : (?x)(?<d>
7031 : unparsable : unparsable : 0.075739336 (s) : (?P<tax_department>\\d{4})\\s(?P<record_number>\\d{5})\\s(?P<check_digit>\\d{1})
7032 : failed : failed : 0.458840331 (s) : \\b(tax\\d?\\d?\\d?\\d?\\d\\d?\\d?\\d?\\d?\\d?)(\\d{5})(\\d)\\b
7033 : unparsable : unparsable : 0.110465742 (s) : ^(?<tax_dept>.+?(?<re_num>\\d+)
7034 : failed : failed : 0.502394819 (s) : \\d{4}-\\d{4}-\\d{4}-\\d{4}-\\d{5}-\\d{1}
7035 : failed : failed : 0.894449419 (s) : (\\d{4}) (\\d{5}) (\\d{1}) '''
7036 : failed : failed : 0.582992371 (s) : (?<code>\\d{4})\\s+.\\s+.\\s+(?<num>\\d{5})\\.\\s+(-?\\d)$
7037 : failed : failed : 0.706368048 (s) : (\\d{4}){2}(.\\d{5})$
7038 : failed : failed : 0.725539727 (s) : \\d{4}-\\d{5}-\\d{1}
7039 : unparsable : unparsable : 0.094923378 (s) : (?P<number1>\\d{4}\\s?\\d{5}\\-)\\s?(?P<number2>\\d{4}\\s?\\d{5}\\-)\\s?(?P<number3
7040 : failed : failed : 0.195696301 (s) : ^(       [0-9]{4}      [0-9]{5}      [0-9]{1}       )$
7041 : unparsable : unparsable : 0.074986837 (s) : [0-9]{8}-[0-9]{4}-[0-9]{2}-[0-9]{5}-[0
7042 : failed : failed : 0.648510747 (s) : \\b\\d{9}[0-8]{3}\\b
7043 : unparsable : unparsable : 0.103874029 (s) : [1]\\\\d{4}[1-9].\\\\d{2}[1-9]\\\\d{2}.(\\\\d{3
7044 : failed : failed : 0.460973695 (s) : '\\(\\d{6}\\)\\s+\\d{4}\\s+\\d{2}\\s+\\d{2}\\s+\\d
7045 : failed : failed : 0.626071979 (s) : (?<state>\\d{1,2}\\s?\\d{3}\\s?)(?<year>\\d{2})\\
7046 : failed : failed : 0.15792937 (s) : ^\\d{8}[1-9]{2}\\d{7}$
7047 : failed : failed : 0.139479422 (s) : OGRNN
7048 : unparsable : unparsable : 0.057427626 (s) : ^((?<state>\\d{1,3})\\s)?((?<year>\\d{2})\\s)?((?<seq
7049 : failed : failed : 0.161851234 (s) : The RegEx for the description 
7050 : unparsable : unparsable : 0.089789575 (s) : (\\d{3})(\\d{2})(\\d{2})(\\d{7})(\\d{1})(\\d{
7051 : failed : failed : 0.210865176 (s) : ^[0-9]{2}[0-9]\\/[0-9]{4}$
7052 : failed : failed : 0.805272241 (s) : \\d{4}/\\d{2}/\\d{2}
7053 : failed : failed : 0.342961041 (s) : /
7054 : failed : failed : 0.325585173 (s) : \\/20\\d{3}
7055 : failed : failed : 0.279323527 (s) : \\b([0-9]{4}\\s[0-9]{2})([0-9]{2})\\/([0-9]{2})([0-9]{2})\\b
7056 : failed : failed : 0.743542369 (s) : \\d{4}-\\d{2}-\\d{2}
7057 : failed : failed : 0.795126902 (s) : \\d{4}-\\d{2}-\\d{2}
7058 : failed : failed : 0.757927866 (s) : /(0[1-9]|1[012])/\\d{2}\\-\\d{2}\\-\\d{4}
7059 : failed : failed : 1.954829921 (s) : [0-9]{4}[0-9]|20[0-9]{3}
7060 : failed : failed : 0.691172644 (s) : \\d{4}-\\d{2}-\\d{2}
7061 : failed : failed : 0.959007587 (s) : \\d{1,3}-\\d{1,3}-\\d{4,4}$
7062 : failed : failed : 0.232462958 (s) : \\d{3}[-\\s]+\\d{3}[-\\s]+\\d{4}
7063 : unparsable : unparsable : 0.067763981 (s) : ^(?=.*d)(?=.*h)(?=.*e)(?=.*t)(?=.*o)(?=.*a)(?=.*i)(?=.*n)(?=.*s)(?=.*r)(?=.*e)(?=.*e)(?=.*a)(?=.*d)(?=.*h)(?=.*g)(?=.*p)(?=.*y)(?=.*i)(?=.*u)(?=.*g)(?=.*l)(
7064 : unparsable : unparsable : 0.103834124 (s) : (htt
7065 : failed : failed : 4.93105807 (s) : #/[a-zA-Z0-9-]{5,20}/.
7066 : failed : failed : 0.252103345 (s) : [^a-zA-Z0-9-_] (I need something that will ignore anything that contains alpha or numeric characters not just underscores)
7067 : failed : failed : 45.181207335 (s) : ^(?=.*?[\\\\s\\\\d])(?=.*?[\\\\w-])[a-zA-Z0-9]+(?=.\\\\d+)$
7068 : failed : failed : 12.731487204 (s) : [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}
7069 : unparsable : unparsable : 0.093122106 (s) : {a-z0-9}
7070 : failed : failed : 1.134612366 (s) : (\\d{3}-\\d{2}-\\d{4})
7071 : unparsable : unparsable : 0.057126201 (s) : ^\\d{4}(-
7072 : failed : failed : 3.620776155 (s) : \\b
7073 : failed : failed : 5.000735765 (s) : (?<Year>[0-9][0-9][0-9]\\.)\\d\\s\\d\\s\\d{2}(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)
7074 : failed : failed : 0.602752022 (s) : \\d{4}-\\d{2}-\\d{2}
7075 : failed : failed : 1.764525938 (s) : \\b(19[1-9]|20[0-2])[0-9]{2}-[0-3][0-9]{2}\\b
7076 : unparsable : unparsable : 0.073207675 (s) : [2019-01-02]
7077 : failed : failed : 15.472812195 (s) : ([0-9]{4})-([0-1][0-9])-([0-2][0-9])
7078 : failed : failed : 0.290699248 (s) : ^(19[0-9][0-9]|20[0-2]|21[0-9])-(0[1-9])-([1-9][0-9])$
7079 : failed : failed : 0.543823445 (s) : (-^\\d{4}-\\d{2}-\\d{2}$|^\\d{4}-\\d{2}-20\\d$)
7080 : failed : failed : 13.41354493 (s) : [1-9][0-9]{3}-[1-9][0-9]{2}-[0-9][0-9]{2}
7081 : unparsable : unparsable : 0.143935065 (s) : (\\d)\\p{L}+\\p{L}+\\p{L}+
7082 : failed : failed : 2.379687909 (s) : (AA9[A-Z][0-9]|A9[0-9][A-Z])
7083 : failed : failed : 2.275335754 (s) : (^[A-Z]?[0-9]{1,2}[0-9]?[A-Z]?)?[0-9]{0,2}$
7084 : failed : failed : 0.167377492 (s) : ^[A-Z]{2}[1-9]A[0-9]{2}$
7085 : failed : failed : 0.27692214 (s) : ^[A-Z]\\1+[\\s]+[A-Z]+$
7086 : failed : failed : 38.589972725 (s) : (?=A9A | A9A.| A99 | A99.) [A9A 9AA]|[A9A 9AA] (?=A9A | A9A.| A99 | A99.) [A9A 9AA]|[A9A 9AA]
7087 : failed : failed : 0.264751179 (s) : ^[A-Z]\\s[A-Z]{2}\\s[0-9]\\s[0-9]\\s[A-Z]\\s[0-9]\\s[0-9]{2}\\s[0-9]\\s$
7088 : failed : failed : 0.692793518 (s) : ^([0-9\\-\\s]{2,15})(\\s*\\w{3}\\s*)+$
7089 : failed : failed : 0.530895527 (s) : ^[A-Z]\\d[A-Z]{2}\\d[A-Z]\\d$
7090 : failed : failed : 0.1578916 (s) : ^[A-Z][0-9][A-Z]$
7091 : failed : failed : 0.896008669 (s) : (\\d{3})(\\d{3})(\\d{4})
7092 : failed : failed : 0.42152237 (s) : [moped]\\d{9}$
7093 : failed : failed : 0.121581006 (s) : dutchmoped
7094 : failed : failed : 1.268227196 (s) : (\\d{4}-\\d{2}-\\d{2})
7095 : failed : failed : 0.223724605 (s) : (\\d{5})(\\/)(\\d{5})(\\/)(\\d{3})(\\/)(\\d{3})(\\/)(\\d{3})
7096 : failed : failed : 0.225268786 (s) : The RegEx should exclude numbers that are not 5 digits long
7097 : failed : failed : 0.695465462 (s) : (\\d{5},\\d{2})(\\d{2})(\\d{4})(\\d{2})
7098 : failed : failed : 0.139207582 (s) : d-moped licenseplate number regexAnsw
7099 : failed : failed : 2.371225552 (s) : (\\d{2})\\s(\\d{3})\"\"\"
7100 : failed : failed : 39.801359615 (s) : (?i)([0-9A-Z]|[0-9]-[0-9][0-9]|[0-9][0-9]-[0-9][0-9])(?=\\.[0-9])
7101 : failed : failed : 0.504841119 (s) : ^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$
7102 failed : unparsable : 0 (s) : Please check your regex.
7103 : failed : failed : 1.771713437 (s) : ^(?!0).*\\[(.*)\\]$
7104 : failed : failed : 2.774401509 (s) : /^
7105 failed : unparsable : 0 (s) : Please check your regex.
7106 : failed : failed : 2.378156521 (s) : /^
7107 : failed : failed : 0.792076591 (s) : \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}
7108 failed : unparsable : 0 (s) : Please check your regex.
7109 : failed : failed : 0.168954585 (s) : ^([0-9]{1,2}\\.){3}\\[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\]$
7110 failed : unparsable : 0 (s) : Please check your regex.
7111 : failed : failed : 0.720877868 (s) : ^[Aa][Aa][Tt][Tt]^[0-9][0-9][0-9][0-9]$
7112 : failed : failed : 0.134295265 (s) : 2-16 numbers (\\d{2,16})
7113 : unparsable : unparsable : 0.062494333 (s) : ^[a-zA-Z]{{4,10}}[a-zA-Z]{{2,10}}[a-zA-Z]{{2,10}}([a-zA-Z0-9]{7,}}$
7114 : unparsable : unparsable : 0.063931234 (s) : ((?i)
7115 : failed : failed : 0.164044141 (s) : ^[a-z]{2,7}[A-Z]{4,10}$
7116 : failed : failed : 0.184875999 (s) : ^[a-zA-Z]{4}[0-9]{8}$
7117 : failed : failed : 13.662639972 (s) : [0-9]{4}[A-Z]{10}
7118 : unparsable : unparsable : 0.077422027 (s) : (?i)^(?P<code>[A-Z]{4}[0-9]{6}|[A-Z]{4}[0-9]{10})$
7119 : failed : failed : 24.67048798 (s) : [^a-zA-Z]{4}[a-zA-Z]{10}
7120 : failed : failed : 0.158100451 (s) : ^[a-z0-9]{2}[0-9]{7}[a-z0-9]{4}[0-9]{10}$
7121 : failed : failed : 50.282657333 (s) : _[a-zA-Z][a-zA-Z0-9_\\-]*[a-zA-Z]\\w{4}$
7122 : failed : failed : 0.288655461 (s) : ^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*\\D)[A-Za-z\\d]{9}$
7123 : failed : unparsable : 0 (s) : Please check your regex.
7124 : failed : failed : 0.289971405 (s) : \\b%(2|9)-(0|1|2|3|4|5|6|7|8|9)[0-9]*GB
7125 : failed : failed : 0.202149014 (s) : ^[\\w][\\w]{9}[\\w]$
7126 : failed : failed : 0.944385336 (s) : [\\s]^...$
7127 : failed : failed : 1.016544588 (s) : [^a-zA-Z0-9 ]
7128 : unparsable : unparsable : 0.080112695 (s) : (?i)(^[a-zA-Z0-9]{2}[0-9]{9}[a-zA-Z0-9]{3,6}$)(|^[0-9a-zA-Z0-9]
7129 : failed : unparsable : 0 (s) : Please check your regex.
7130 : failed : pumping failed : 17.906944373 (s) : ([a-zA-Z0-9]{3,9})(?![a-zA-Z0-9]*$)\\b
7131 : failed : failed : 0.247866462 (s) : ^-0(?!-)[0-9]{6}(-[0-9A-Z]{3}[0-9]|[a-z]{3}-[a-z]{3}-[a-zA-Z]{3}|\\d[a-zA-Z]{3})$
7132 : failed : failed : 0.703932057 (s) : (    ^[a-zA-Z0-9.-]{11}\\.[a-zA-Z]{2,}\\.$  )
7133 : failed : failed : 4.891423233 (s) : ^(?!GB|GDP).{0,256}$
7134 : failed : failed : 7.443121328 (s) : ^(?! GB).*(.*?)$
7135 : failed : failed : 0.152357327 (s) : import re import os
7136 : unparsable : unparsable : 0.085584361 (s) : |(?<!
7137 : unparsable : unparsable : 0.095460184 (s) : (?<!\\.](?!GB|IN)[0-9][0-9]\\s\\b) (?<!\\.](?!IN)[0-9][0-9]\\s\\b) (?<!\\.](?!GB|IN)[0-9]\\s\\b) (?<!\\.](?!IN)[
7138 : failed : failed : 0.625687129 (s) : \"^[A-Z]{3}[0-9]{4}-\"
7139 : failed : failed : 37.012899091 (s) : (?<!GB)(?![0-9])(?<![A-Z])(?<![a-z])[0-9a-zA-Z]{4}\\.(?![0-9])(?<![A-Z])(?<![a-z])[0-9a-zA-Z]{3}
7140 : failed : failed : 0.533877911 (s) : ^[A-Z][A-Z0-9]{3,24}(-\\d{0,2})?$ This mea
7141 : failed : pumping failed : 548.465653175 (s) : [\\d-]+[A-Z](?=\\d)|\\d+(?=\\D)
7142 : failed : failed : 3.769650229 (s) : (?i)([A-Z]{1})[a-z]{3}[A-Z]{1}[A-Z]{3}
7143 : failed : failed : 1.846532319 (s) : (?i)[a-zA-Z0-9]{6}[a-zA-Z0-9]
7144 : failed : failed : 0.66893345 (s) : ^[A-Za-z0-9\\s]{7}$
7145 : failed : failed : 0.451904453 (s) : (^\\W*\\d+\\W*)
7146 : unparsable : unparsable : 0.078415577 (s) : (?=([\\d]{3}[\\d]{2}[\\d]{2}[\\d]{3}[\\d]{3}[\\d]{3}[\\d]{3
7147 : failed : failed : 1.868472874 (s) : ((?i)(?<!\\.)\\b[a-zA-Z](?!\\.)\\d{2}\\1\\d{4}\\b)(?!\\.)(?!\\.)[a-zA-Z]
7148 : failed : failed : 0.970895899 (s) : /^(?=.*ABCD)(?=.*BCDE)(?=.*CDEF)(?=.*DEF)[A-Z][0-9]{2}[A-Z][0-9]{4}$/.
7149 : failed : error init : 0.156627693 (s) : (?i)^(.*?)
7150 : unparsable : unparsable : 0.105632862 (s) : /TNT\\/Trace\\/UK\\/(1|2|3|4|5|6|7|8|9)(\\/|\\-|_|\\(|\\))?\\d{5}\\d{5}\\d{5
7151 : unparsable : unparsable : 0.101964313 (s) : (?<date>(?P<year>(\\d{4})(?P<month>(0|[1-9])(?P<day>(\\d{1,2}))?)?)?(?P<day>\\s*(?P<daynum>(?P<day>\\d{1,2}))?))?(
7152 : failed : failed : 0.438245184 (s) : \\d{4}/\\d{1,2}/\\d{1,2}
7153 : failed : failed : 1.438986941 (s) : (?<year>\\d{4})/(?<day>\\d{1,2})/(?<month>\\d{1,2})
7154 : failed : failed : 0.798615375 (s) : ^\\d{4}
7155 : failed : failed : 0.504298834 (s) : \\d{4}-\\d{2}-\\d{2}
7156 : failed : failed : 1.985110243 (s) : YYYY/(\\d{1,2})/(\\d{2})
7157 : failed : failed : 0.178790483 (s) : ^(19|20)\\d{2}/\\d{2}/\\d{2}$
7158 : failed : failed : 27.42563876 (s) : [0-9]{4}/[0-9]{2}/[0-9]{1}
7159 : failed : failed : 0.350018105 (s) : \\d{4}\\/\\d{2}\\/\\d{2}
7160 : failed : unparsable : 0 (s) : Please check your regex.
7161 : failed : unparsable : 0 (s) : Please check your regex.
7162 : failed : failed : 0.173267591 (s) : ^[1-3][0-9][0-9][0-9][0-9]$
7163 : failed : failed : 0.219287026 (s) : ^[0-9]{1,4}[\\-\\s]?[0-9]{4}[\\-\\s]?[0-9]{4}[\\-\\s]?[0-9]{4}$
7164 : failed : failed : 7.194406989 (s) : \\d{1,2}/[a-zA-Z][a-zA-Z0-9]{0,20}/[a-zA-Z0-9\\s]{0,20}
7165 : failed : unparsable : 0 (s) : Please check your regex.
7166 : unparsable : unparsable : 0.062537664 (s) : (?P<year>\\d{4}).(?P<month>\\d{2}).(?P<day>\\d{2})./(?P<week>\\d{1,2})./(?P<dayofweek>\\w{3})
7167 : unparsable : unparsable : 0.058960697 (s) : [A-Za-z0-9.\\-/@_\\(\\),]*|[A-Za-z0-9.-\\/@._]
7168 : failed : failed : 0.132907015 (s) : \\d{4}-\\d{2}-\\d{2}|
7169 : unparsable : unparsable : 0.097349041 (s) : ^(?P<year>\\d{4})\\-(?P<month>\\d{2})\\-(?P<day>\\d{2})$
7170 : failed : failed : 2.654377288 (s) : 0-9 (0-9) [a-zA-Z]{4} [a-zA-Z0-9]{2} [a-zA-Z0-9]{3} [a-zA-Z0-9]{4}
7171 : failed : failed : 0.187763746 (s) : Google Analytics Segment by source social media. From ht
7172 : failed : failed : 0.26257307 (s) : Google Analytics Segment by source social media. From ht
7173 : failed : failed : 0.31930319 (s) : Google Analytics Segment by source social media. From ht
7174 : failed : failed : 0.2677796 (s) : Google Analytics Segment by source social media. From ht
7175 : failed : failed : 0.478277438 (s) : Google Analytics Segment by source social media. From ht
7176 : failed : failed : 0.378309031 (s) : Google Analytics Segment by source social media. From ht
7177 : failed : failed : 0.246601212 (s) : Google Analytics Segment by source social media. From ht
7178 : failed : failed : 0.251911606 (s) : Google Analytics Segment by source social media. From ht
7179 : failed : failed : 0.346327455 (s) : Google Analytics Segment by source social media. From ht
7180 : failed : failed : 0.390959831 (s) : Google Analytics Segment by source social media. From ht
7181 : failed : failed : 0.50334618 (s) : IP address IPv4 (127.0.0.1). From ht
7182 : failed : failed : 0.380520522 (s) : IP address IPv4 (127.0.0.1). From ht
7183 : failed : failed : 0.378258367 (s) : IP address IPv4 (127.0.0.1). From ht
7184 : failed : failed : 0.657939243 (s) : IP address IPv4 (127.0.0.1). From ht
7185 : failed : failed : 0.337436286 (s) : IP address IPv4 (127.0.0.1). From ht
7186 : failed : failed : 0.394412958 (s) : IP address IPv4 (127.0.0.1). From ht
7187 : failed : failed : 0.609052359 (s) : IP address IPv4 (127.0.0.1). From ht
7188 : failed : failed : 0.308576735 (s) : IP address IPv4 (127.0.0.1). From ht
7189 : failed : failed : 0.64867744 (s) : IP address IPv4 (127.0.0.1). From ht
7190 : failed : failed : 0.373484257 (s) : IP address IPv4 (127.0.0.1). From ht
7191 : failed : failed : 0.103732344 (s) : Time 
7192 : failed : failed : 0.144806517 (s) : Time 
7193 : failed : failed : 0.131242608 (s) : Time 
7194 : failed : failed : 0.110155461 (s) : Time 
7195 : failed : failed : 0.146028135 (s) : Time 
7196 : failed : failed : 0.107894487 (s) : Time 
7197 : failed : failed : 0.17234297 (s) : Time 
7198 : failed : failed : 0.107152348 (s) : Time 
7199 : failed : failed : 0.12118793 (s) : Time 
7200 : failed : failed : 0.114313437 (s) : Time 
7201 : unparsable : unparsable : 0.070634076 (s) : \\w(? = )\\d{1,4}
7202 : failed : failed : 0.13734221 (s) : ^(\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d\\s\\d?)$
7203 : failed : failed : 55.78248487 (s) : [^\\d]{1,5}\\s[^\\d]{1,5}\\.[^\\d]{1,5}\\.[^\\d]{1,5}[^\\d]{1,5}
7204 : failed : failed : 0.546750506 (s) : \\d\\d\\d\\d\\d  or  \\d {5}              # The {5} at the end makes 5 matches.               # The {5} is placed after the digit               # to make sure the number is of length 10.
7205 : failed : failed : 32.582950031 (s) : (?<![a-zA-Z0-9\\s])(?<![^a-zA-Z0-9\\s])([a-zA-Z0-9]{6})(?![^a-zA-Z0-9\\s])
7206 : failed : failed : 0.740469043 (s) : [ABCDEFG]{1,5}[A-Z]{2}
7207 : failed : failed : 0.147205169 (s) : UTTAGCTAGCTT
7208 : failed : failed : 2.631610155 (s) : /^(?=.*[0-9].*)
7209 : failed : failed : 0.658082731 (s) : \\d{5} *(\\s*\\d(\\s*\\d)*)?
7210 : failed : failed : 4.487234389 (s) : {1,2}[0-9]{5} (with optional space)
7211 : failed : failed : 0.690929909 (s) : \\d{1,12}
7212 : failed : failed : 1.629915013 (s) : [1-2][0-9]|[1-2][0-9]\\/[1-2][0-9]
7213 : failed : error init : 0.101499693 (s) : ^
7214 : failed : failed : 1.095607938 (s) : [1-9][0-9]|1[012]
7215 : failed : error init : 0.161788376 (s) : ^
7216 : failed : failed : 6.069326482 (s) : ([1-9]|[1-9][1-9])
7217 : failed : failed : 12.761617685 (s) : (1|[2-9][0-9]|10|11|12)
7218 : failed : failed : 0.46206021 (s) : (^[1-12][0-9]\\d$)
7219 : failed : failed : 3.118846318 (s) : ^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])[1-9][A-Za-z]\\d$
7220 : unparsable : unparsable : 0.083524964 (s) : /^(
7221 : failed : failed : 0.924319072 (s) : [0-9]{3}
7222 : failed : failed : 0.513025675 (s) : (^[0-9]{3})([A-Za-z][0-9]{2})[A-Za-z0-9 -._]*
7223 : unparsable : unparsable : 0.082818371 (s) : {0, 4, 9}
7224 : failed : failed : 2.051732136 (s) : ^(0\\d{3}\\s|0)[-\\s]+(\\d{4})$
7225 : unparsable : unparsable : 0.116496745 (s) : Office [(\\d{3})(\\.)(0(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1(1
7226 : failed : failed : 1.093923955 (s) : \\d{3}-\\d{2}-\\d{2}
7227 : unparsable : unparsable : 0.056690085 (s) : ?\\d{3}\\d\\d\\d\\d
7228 : failed : failed : 0.927595446 (s) : \\b([0-9]{3})\\b
7229 : failed : failed : 0.810481926 (s) : ^[0123456789]{3}\\d{3}[^a-zA-Z]$
7230 : failed : failed : 0.720619294 (s) : ^[0-9]{3}$
7231 : failed : error init : 0.109648562 (s) : ^
7232 : failed : failed : 2.05527486 (s) : /^
7233 : unparsable : unparsable : 0.128571446 (s) : (\\A([1-9]{1,2}\\d{3,4}\\s)?\\d{6}\\s?\\d{3,4}\\s?\\d{4})?([0-9]{3,4}\\.[1-9]{1,2}\\.[1-9]{1,2}\\.[1-9]{
7234 : failed : failed : 0.877912473 (s) : ^([1-9][0-9]|1[012])[ -]*([0-6][0-9])$
7235 : failed : failed : 0.378077659 (s) : ^\\d{3}\\d{3}(-\\.\\d{3})?$
7236 : unparsable : unparsable : 0.056753704 (s) : ^(((?!GB|B)(?!US$|AU$|GBP|GBX|GBZ|ES|GBY|GBZ|ETD|GBW|GBX|GBY|GBZ|ETD|GBW|GBX|GBY|GBZ|ETD|GBW|GBX|GBY|GBZ|ETD
7237 : failed : failed : 0.340006278 (s) : (?<=.|\\s)(?!\\s.*?\\d)\\d{5} If you need to match GB at the start then the pattern can be improved. Reg
7238 : failed : failed : 0.234997765 (s) : ^([1-9]{1,3}[.]{0,1}[1-9]{1,3})?[.]?[ 0-9]{1,2}$
7239 : failed : failed : 5.519629889 (s) : ^\\d{3}-\\d{3}-\\d{4}$|
7240 : failed : failed : 6.973129005 (s) : (?<!2[0-9]|[1-9](0[1-9]|1[012]))[0-9]{6,}(\\\\.[0-9]{1,2})?
7241 : failed : failed : 0.721583961 (s) : [A-Z]{8}\\d[A-Z]
7242 : failed : failed : 0.142105439 (s) : ^\\d{8}R[a-z]
7243 : failed : failed : 0.150418236 (s) : 1-9, A-Z, 0-9, A-Z
7244 : failed : failed : 6.430882303 (s) : [RegExp]([a-zA-Z]{8})[R]
7245 : failed : failed : 14.403459351 (s) : [0-9][A-Z][A-Z][a-z]
7246 : failed : failed : 0.967802096 (s) : [a-z]{8}[a-z]
7247 : failed : failed : 0.871838849 (s) : \\d{8}[R]
7248 : failed : failed : 0.510620732 (s) : /8[a-zA-Z]/gThis generates a RegEx f
7249 : failed : failed : 0.410314233 (s) : ^[A-Za-z]{0,9}[R][A-Za-z]{2}[0-9]{1,2}$
7250 : unparsable : unparsable : 0.058079035 (s) : [(0-9]{8})([A-Za-z]+)
7251 : failed : failed : 0.548526722 (s) : \\b[a-z]{2}\\d{3}[a-z]{2}\\d?[a-z]{2}\\d?[a-z]{3}[a-z]{1}\\d{4}\\b
7252 : failed : failed : 0.733046865 (s) : [0]{1,2}[0-9]{5}
7253 : failed : failed : 0.138653866 (s) : A
7254 : failed : failed : 0.52900129 (s) : [p, a, f, a, g, o]
7255 : failed : failed : 1.003243371 (s) : (\\\\d{1,2}\\\\d{1,2})\\\\b
7256 : failed : failed : 18.250349996 (s) : [a-zA-Z]{3}-?[0-9]{4}-?[0-9]{4}-?[0-9]{4}-?[0-9]{4}-?[0-9]{4}
7257 : failed : failed : 2.545341793 (s) : \\D0[A-Za-z]{4}[0-9]\\D
7258 : failed : failed : 1.345629084 (s) : [A-Z]{3}[A-Z]{3}[A-Z]{3}[A-Z]?[A-Z]?[A-Z]?[A-Z]?
7259 : failed : failed : 0.816467966 (s) : [0]{2}[0-9]{4}[0-9]{2}[0-9]{5}[0-9]{1}
7260 : failed : failed : 3.173551817 (s) : [a-z][A-Z0-9]{6}( [a-z]{2}){1,2}
7261 : failed : failed : 1.946103672 (s) : [0-9]+
7262 : failed : failed : 3.368550691 (s) : A\\d\\d-A\\d{3}\\d|A\\d{3}\\d|A0-A9
7263 : failed : failed : 0.263253354 (s) : A0-A9 (where A is a letter or a digit)
7264 : failed : failed : 0.943872877 (s) : (\\d+)-(\\d+)
7265 : unparsable : unparsable : 0.060301688 (s) : \\A(?P<A0>A0|A1|A2|A3|A4|A5|A6|A7|A8|A9|A10)\\z
7266 : unparsable : unparsable : 0.071114525 (s) : ([A0]{A1-A11})\\. Examp
7267 : failed : unparsable : 0 (s) : Please check your regex.
7268 : failed : failed : 2.003112954 (s) : (^|\\s)(\\d{1,3}\\s|\\d{1,3}\\s|\\d{1,3}\\s|\\d{1,3})$
7269 : failed : failed : 0.204119213 (s) : A0-A9 to 8Kb
7270 : failed : failed : 5.310266385 (s) : ^[0-9]|[1-9][0-9]|10$
7271 : failed : error init : 0.116022257 (s) : (?s)
7272 : failed : failed : 0.204469689 (s) : A regex which should match only if the number is even.
7273 : unparsable : unparsable : 0.067862065 (s) : \\B(?=([^\\d]*[0-9]){{1,}})([^\\d]*)(?=(.*\\d){1,})([^\\d]*)\\\\B
7274 : unparsable : unparsable : 0.086521405 (s) : [0]{2}[2-9]{1,3}The 0 in front means it may be any character and must be at the beginning of the string.The {2} means it must occur at least two times, so you could use a variable like {n} instead of {2}The {1,3} means it may occur between 1 and 3 times, so you could change {1} to {n,}The 
7275 : failed : failed : 0.156517477 (s) : ^\\d{6}(.)(\\d{4})(.\\d{3})$
7276 : failed : pumping failed : 45.001046987 (s) : [even]{0,1}[a-z]+[0-9]+
7277 : failed : failed : 1.292601438 (s) : [1-9][8-9][0-9]|[1-9][0-9][8-9]|[1-9][0-9][0-9]
7278 : failed : failed : 18.875726853 (s) : (?<=\\d)(?=(\\d*\\d+)\\d*[02468])(?<=\\d)(?=(\\d*\\d+)\\d*[13579])(?<=\\d)(?=(\\d*\\d+)\\d*[2685])
7279 : failed : timeout : 600 (s) : .*\\[.*\\].*
7280 : failed : failed : 1.450180532 (s) : /^
7281 : failed : unparsable : 0 (s) : Please check your regex.
7282 : failed : failed : 0.295151134 (s) : ^[-]?[0-9]+[.]?[0-9]+$
7283 : failed : failed : 0.181871573 (s) : This is the RegEx you should use.
7284 : unparsable : unparsable : 0.085056653 (s) : ^(?P<negative>(<\\-)?)(?P<positive>(\\+|-)?)(?P<number>(\\d+(\\.\\d+)?)|(\\.\\d+))$
7285 : failed : failed : 5.521726184 (s) : -?\\d*\\.\\d+|\\d*\\.?\\d*
7286 : unparsable : unparsable : 0.079743984 (s) : (?<=\\.\\d+|\\,\\d+)(?!\\d)
7287 : failed : failed : 0.173325801 (s) : a (0-9) or [0-9][0-9]|
7288 : failed : failed : 0.525058016 (s) : (0,1)-(1,0)-(2,1)-(3,0)-(4,1)-(5,0)
7289 : failed : failed : 0.643959986 (s) : (1+[,0-9]+)
7290 : failed : failed : 0.626719702 (s) : [positive or negative number](?![,.])(?![\\.])*
7291 : failed : pumping failed : 187.177509811 (s) : [a-zA-Z0-9]{0,40}-[a-zA-Z0-9]{0,40}-[a-zA-Z0-9]{0,40}-[a-zA-Z0-9]{0,40}Answ
7292 : failed : failed : 0.536884792 (s) : ^[a-z0-9\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\.\\,\\-\\_\\[\\]]*$
7293 : unparsable : unparsable : 0.102243396 (s) : $.~/.*[a-z].*[a-z][a-z]\\d[a-z0-9]+[a-z0-9]+[-a-z0-9]\\s[a-z0-9]\\s[a-z][a-z].[a-z]\\s[a-z][a-z][a-z]\\d[a-z0-9]+[a
7294 : failed : failed : 0.169561512 (s) : $str = '1$2!$3'; $str = preg_replace('/([A-Za-z0-9&,.\\^\\-\\_\\/?$]*)/', '', $str); print htmlspecialchars($str);
7295 : failed : failed : 0.794189808 (s) : (\\w|[\\d\\w]|_|^)[a-z]{3,}
7296 : failed : pumping failed : 42.662782966 (s) : (?=.*\\d)(?=.*[a-z])[a-zA-Z0-9!]+@[a-zA-Z0-9-]+(.[a-zA-Z0-9-.]+)+
7297 : failed : failed : 1.007633953 (s) : [a-z]{3,20}(?=.{3,20})
7298 : unparsable : unparsable : 0.06650288 (s) : $password = 'P@ssw0rd123!#'; $length = 10; $symbols = \"!@#$%^&*()_=+,{}[]
7299 : failed : failed : 0.178132502 (s) : ```pythonimport randomimport re
7300 : failed : pumping failed : 2.449420817 (s) : .*[a-z]{1,10}.*[a-z].*[0-9]{1,10}.*[a-z].*[^\\s]
7301 : failed : pumping failed : 59.936505742 (s) : [\\s\\S]*?\\s?if\\s?\\S+?(?=\\.|\\!)
7302 : failed : failed : 14.276875257 (s) : ^.*?if.*?$
7303 : unparsable : unparsable : 0.080123525 (s) : ^\\s*\\[?.*?\
7304 : failed : failed : 3.08539623 (s) : [^if\\s]+
7305 : failed : failed : 0.338178114 (s) : If the string contains a /s, /i or /u, then it matches this string. Otherwise, it doesn't.
7306 : failed : failed : 11.460547991 (s) : <!--.*?-->|
7307 : unparsable : unparsable : 0.09500426 (s) : [ht
7308 : failed : failed : 104.184752925 (s) : ^([^ if ]*)((if)|(ifnot)|(else))(.*)$
7309 : unparsable : unparsable : 0.07763765 (s) : \\b(?!
7310 : failed : pumping failed : 13.032174195 (s) : \\/\\*[^*/]*\\*/
7311 : failed : failed : 0.586768171 (s) : ^\\d{2}\\/\\d{2}\\/\\d{4}$
7312 : failed : failed : 0.77034623 (s) : \\d{2}/\\d{2}/\\d{4}
7313 : failed : failed : 0.576868964 (s) : (\\d{1,2})/(\\d{1,2})/\\d{4}
7314 : failed : failed : 2.000372773 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
7315 : failed : failed : 7.066531055 (s) : (0?[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])/([0-4]\\d|5[0-9])/([0-9]\\d{4})
7316 : failed : failed : 0.544817476 (s) : (\\d\\d/\\d\\d/\\d\\d\\d)
7317 : failed : failed : 7.3903705 (s) : [0-9]{2}/[0-9]{2}/[0-9]{4}
7318 : failed : failed : 0.5935121 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
7319 : failed : failed : 1.106243153 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
7320 : failed : error init : 0.1211401 (s) : ^
7321 : failed : failed : 0.130663474 (s) : \"tim
7322 : unparsable : unparsable : 0.068542309 (s) : ^.*\\d{1,
7323 : failed : failed : 0.549640608 (s) : [Tt]ime
7324 : unparsable : unparsable : 0.065599168 (s) : (^[0-9]{1,
7325 : failed : failed : 0.133605572 (s) : \"start
7326 : failed : unparsable : 0 (s) : Please check your regex.
7327 : unparsable : unparsable : 0.070805257 (s) : [\
7328 : failed : failed : 9.815604496 (s) : [0-9][0-9]H[0-9]M[0-9]S
7329 : unparsable : unparsable : 0.090802652 (s) : (
7330 : unparsable : unparsable : 0.075784891 (s) : ^(\\d{
7331 : failed : unparsable : 0 (s) : Please check your regex.
7332 : failed : failed : 0.169897441 (s) : ^hh\\d{0,2}(.\\d{3})$
7333 : unparsable : unparsable : 0.111021403 (s) : ((\\d{2
7334 : unparsable : unparsable : 0.066327111 (s) : (
7335 : unparsable : unparsable : 0.064939132 (s) : (?<hh>\\d{1,2
7336 : failed : failed : 0.619239375 (s) : (^[0-9]{2}[0-9]{2}[0-9]$|^[0-9]{3}[0-9]{2}[0-9]$)
7337 : unparsable : unparsable : 0.07093572 (s) : [\\d\
7338 : failed : failed : 0.401194886 (s) : hh\\s*[12]\\s*min\\s*[2]\\s*min\\s*[2]\\s*ss
7339 : unparsable : unparsable : 0.075008647 (s) : ^(([0-9]\\d\\d?)([0-9]\\d)?)?([0-9]\
7340 : unparsable : unparsable : 0.093408051 (s) : hh\\s*[0-5]\\s*[0-9]{2
7341 : failed : failed : 0.358605515 (s) : ^\\d+(\\.\\d+)$
7342 : failed : failed : 2.671262005 (s) : (\\d+\\.\\d+\\.\\d+)\\d+
7343 : failed : pumping failed : 27.834839909 (s) : 0+[\\d]{0,9}[.]?[\\d]{1,3}
7344 : failed : failed : 0.1618333 (s) : ^-?\\d{4}-?\\d{2}-?\\d{2}$
7345 : failed : pumping failed : 117.670983682 (s) : (.*)[^\\d.]
7346 : unparsable : unparsable : 0.063163787 (s) : ^(?P<integer>\\d+)(?P=integer)$
7347 : failed : failed : 1.977370801 (s) : [0-9]{3}-[0-9]{3}-[0-9]{4}  # A valid phone number
7348 : failed : failed : 0.14400145 (s) : ^[0-9](\\.[0-9]+)?$
7349 : failed : failed : 15.073955347 (s) : \\d*\\.\\d+
7350 : failed : failed : 1.94356573 (s) : (1-9)(0-9)(0-9)
7351 : failed : failed : 8.908342484 (s) : [0-9]{1,2}\\-[0-9]{1,2}\\s?[0-9]{4}
7352 : failed : failed : 0.209519776 (s) : $(?<monthNumber>0|1)?((?<dayNumber>0|1)?(?<year>[0-9]{3}))(-(?<separators>[^-/ ]))?$
7353 : failed : failed : 10.170371002 (s) : [0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}
7354 : failed : failed : 0.171349169 (s) : ^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$
7355 : failed : failed : 0.350926486 (s) : yyyy-mm-dd/[a-zA-Z0-9]{2}  2. Write a RegEx that matches a string that starts with a hashtag (#).Answ
7356 : failed : failed : 3.474616153 (s) : [0-9]{1,2}/[0-9]{1,2}/[1-9][0-9]{3}
7357 : failed : failed : 6.159317304 (s) : (?<month>[0-9]\\d)/(?<day>[0-9]\\d?)/(?<year>[0-9]{4})/(-?[0-9]{1})?/[a-zA-Z]*
7358 : unparsable : unparsable : 0.087270348 (s) : (^[0-9]{4}-[0-9]{3}-[0-9]{2}T[0-9]{
7359 : failed : failed : 2.315833498 (s) : ([1-9]\\d?|0[1-9])/-([1-9]\\d?)(0[1-9])/([0-9]{4})
7360 : unparsable : unparsable : 0.109125533 (s) : (?<Month>\\d{1,2}[-/.\\/]\\d{2}[-/.\\/]\\d{4})(?<Day>\\d{1,2}[-/.\\/]\\d{2}[-/.\\/]\\d{2})\\s(?<Year
7361 : failed : failed : 0.413605765 (s) : YYYY-MM-DD    YYYY-MM    YEAR    19XX    YYYY    Y    19    0    19    0    19    0    19    0    19    0    19    0    19    0    19    0    19    0    19    0
7362 : unparsable : unparsable : 0.054447344 (s) : (?<!\\d) (?<!\\d\\d\\d\\d)(?!\\d{4})(?!\\d{4}-\\d{2}-\\d{2})(?!\\d{2}-\\d{2}-\\d{2})(?!\\d{2}-\\d{2}-\\d{2}-\\d{4})(
7363 : failed : failed : 0.583681783 (s) : ^\d{2}/\d{2}/\d{4}$
7364 : unparsable : unparsable : 0.107346662 (s) : ^(
7365 : failed : failed : 0.747095141 (s) : \\d{2}/\\d{2}/\\d{4}
7366 : failed : failed : 2.829523738 (s) : (0,2)~(0,2)~(0,2)~
7367 : failed : failed : 0.985126627 (s) : \\b(0?[1-9][0-9]|1[0-2])\\/(0?[1-9][0-9]|[12][0-9]|3[01])\\/(19[0-2]|20[0-9])\\b
7368 : failed : failed : 1.703338382 (s) : (?<![0-9])[0-9]{2}/[0-9]{2}/[0-9]{4}\\.[0-9]{1,3}\\.[0-9]{1,3}
7369 : failed : failed : 5.175451568 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
7370 : failed : failed : 0.771162488 (s) : ^(19|20)\\d{2}$
7371 : failed : failed : 0.442459106 (s) : /\\b
7372 : unparsable : unparsable : 0.085539186 (s) : ([\
7373 : unparsable : unparsable : 0.115989276 (s) : \"^w\\d{1,10}\\.[0-9A-Z]{2}\\.[0-9A-Z]{3}\\.[0-9A-Z]{4}\\.[01]\\d\\d$\" (or \"^w\\d{1,10}\\.[0-9A-Z]\\.[0-9A-Z]{3}\\.[0-9A-Z]{4
7374 : failed : failed : 0.674178922 (s) : ([0-9]{1,2})(\\.)[a-z]{4}(\\.)[0-9]{3}(\\.)([0-9]{2})
7375 : failed : failed : 4.773215272 (s) : [0-9]{4}-[0-9]{2}-([0-9]{2})[A-Za-z0-9-]
7376 : failed : failed : 0.188510826 (s) : (cpr\\.[a-zA-z]{2}\\.[a-zA-z]{2}\\.[a-zA-z]{3})?
7377 : failed : failed : 0.190340021 (s) : r'http
7378 : unparsable : unparsable : 0.091305424 (s) : \\b(?P<year>[0-9]{2}(st|nd|rd)?)\\/\\b(?P<month>[0-9]{2})\\/
7379 : failed : failed : 2.109966272 (s) : ht
7380 : unparsable : unparsable : 0.060471355 (s) : \\b(\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\
7381 : unparsable : unparsable : 0.070026568 (s) : (
7382 : unparsable : unparsable : 0.085619466 (s) : (
7383 : failed : unparsable : 0 (s) : Please check your regex.
7384 : unparsable : unparsable : 0.062303055 (s) : (
7385 : failed : error init : 0.088962226 (s) : ^
7386 : failed : unparsable : 0 (s) : Please check your regex.
7387 : failed : failed : 0.830628361 (s) : _
7388 : failed : unparsable : 0 (s) : Please check your regex.
7389 : failed : failed : 0.15113635 (s) : \\
7390 : unparsable : unparsable : 0.097554796 (s) : (
7391 : failed : failed : 0.464711594 (s) : \\d{5}
7392 : failed : failed : 6.555853456 (s) : (0|[1-9][0-9]0?)
7393 : failed : failed : 0.228084679 (s) : 0-9\\d{5,}
7394 : unparsable : unparsable : 0.053496865 (s) : 0[1-9]\\d{0,3}|1[0-2]\\d{0,3}|2[0-3]\\d{0,3}|3[0-1]\\d{0,3}|4[0-5]\\d{0,3}|5[0-9]\\d{0,3}|6[0-9]\\d{0
7395 : unparsable : unparsable : 0.087275788 (s) : [0-9] [1-9] [0-9] [1-9] [0-9] [1-9] [0-9] [0-9] [1-9] [0-9] [0-9] [1-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [1-9
7396 : failed : failed : 0.14725406 (s) : ^[0-9]{1,9}$
7397 : failed : failed : 16.295206748 (s) : (0)(.*)(\\d\\d\\d\\d)(?=\\d\\d\\d\\d).
7398 : failed : failed : 0.266892549 (s) : ([0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*)I am unable to get the RegEx for the above mentioned description.
7399 : failed : failed : 2.834979443 (s) : ^[0-9]{1,100}\\.[0-9]{1,100}$
7400 : failed : failed : 0.494896818 (s) : r\"^(?=.*[0-9])(?=.*[1-9])(?=.*[2-9])(?=.*[3-9])(?!.*(.)?\\1){0,300}$\"
7401 : failed : failed : 0.187333652 (s) : ^[a-zA-Z]{3}-\\d{5}-\\d{5}-\\d{5}-\\d{5}-\\d{3}$
7402 failed : unparsable : 0 (s) : Please check your regex.
7403 : failed : failed : 11.543704314 (s) : [A-Za-z0-9]([A-Za-z0-9-_]{2})*[A-Za-z0-9]
7404 : unparsable : unparsable : 0.073179132 (s) : /^[a-zA-Z0-9]{4}-\\d{2}[-0-9]{3}[a-zA-Z0-9]{3}-[a-zA-Z0-9]{3}-[a-zA-Z0-9]{3}-(\\d{
7405 : failed : failed : 0.215205523 (s) : ^([A-Za-z0-9]\\d[-\\s]\\d[A-Za-z0-9]\\d[-\\s]\\d[A-Z]\\d[-\\s]\\d)$
7406 : unparsable : unparsable : 0.073123487 (s) : ^\\s*\\(([0-9]{3}\\-\\d{3}\\-\\d{4}), ([0-9]{3})$
7407 : failed : failed : 8.224384951 (s) : [0-9]{6,13}-?[0-9]{2}-?[0-9]{4}
7408 : failed : failed : 1.704860172 (s) : (?i)\\b
7409 : failed : failed : 0.673608323 (s) : ^[a-z0-9]([a-z0-9-])*([a-z0-9]){2}\\-[a-z0-9]{5}\\-[a-z0-9][a-z0-9-]{3}
7410 : failed : failed : 0.223970896 (s) : ^([0-9]*\\.)?([A-Z]{3})([0-9]{3})([A-Z]{3})$
7411 : failed : failed : 1.476587269 (s) : (Q\\d{3})(\\s?|\\+)\\d{3}
7412 : failed : failed : 2.97037018 (s) : \\d+
7413 : failed : failed : 7.530253177 (s) : (?<pt1>\\((?<p1>\\d+\\.)/(?<r>\\d+)\\))
7414 : failed : failed : 0.904298702 (s) : Q
7415 : failed : failed : 10.810737068 (s) : \"([0-9]+)[m]\\s+([0-9]+)[cm]\\s+([0-9]+)[ft]\"
7416 : unparsable : unparsable : 0.063547275 (s) : REGEX q(?P<Q>\\d+\\.?\\d*) (?P<r>\\d+\\.?\\d*)(q\\s*radius(?P=radius))?
7417 : failed : failed : 0.726903401 (s) : Q_\\s*(\\d+\\.\\d+\\.\\d+)\\s*((\\d*)\\^2)\\s+rad\\s*
7418 : unparsable : unparsable : 0.06690884 (s) : ^(?P<q1>\\d*\\.)(?P<q2>\\d*)$
7419 : failed : failed : 0.53908896 (s) : \\[(?P<x>\\d+\\.\\d+), (?P<y>\\d+\\.\\d+)\\]
7420 : failed : failed : 52.50422328 (s) : \"Q.*[0-9a-f]{3}[A-F]{3}[0-9]{3}[0-9]{3}.*[0-9a-f]{3}[A-F]{3}[0-9]{3}[0-9]{3}[0-9][A-Z]{2}\"
7421 : failed : failed : 0.359650302 (s) : Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined 
7422 : failed : failed : 0.245571204 (s) : Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined 
7423 : failed : failed : 0.243749062 (s) : Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined 
7424 : failed : failed : 0.804112018 (s) : Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined 
7425 : failed : failed : 0.369761095 (s) : Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined 
7426 : failed : failed : 0.370285467 (s) : Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined 
7427 : failed : failed : 0.42591752 (s) : Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined 
7428 : failed : failed : 0.277865606 (s) : Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined 
7429 : failed : failed : 0.3149239 (s) : Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined 
7430 : failed : failed : 0.370226567 (s) : Matches valid South African ID numbers based on all criteria (except of course the checksum digit at the end).Matches the format defined 
7431 : unparsable : unparsable : 0.061308373 (s) : ^([A-Za-z]{4}-\\d{2}-\\d{2})(?[A-Za-z]+)$The explanation for the [A-Za-z]+ is that the first four characters is a capital letter for the first name, and the final letter is any capital letter, to be used for the final name.
7432 : failed : failed : 1.593622774 (s) : \\b(2[0-3]|[01][0-9]|[12])\\/(0[1-9]|1[012])\\/(0[1-9]|[12])\\b
7433 : failed : failed : 0.611994739 (s) : ^(0[1-9]|1[012])[0-9]{3}-([0-2][0-9]|3[01])[0-9]{4}$
7434 : failed : failed : 0.188397573 (s) : d-9-2012
7435 : failed : failed : 27.473705347 (s) : [0-9]{4}-[0-9]{2}-[0-9]{2}
7436 : failed : failed : 0.815321128 (s) : /(0[1-9]|1[0-2])\\/([0-3]?[0-9])\\/([0-9]{4})/.
7437 : failed : failed : 1.925337857 (s) : -19.05
7438 : failed : failed : 0.646810423 (s) : \\d{1,2}/\\d{1,2}/\\d{4}
7439 : failed : failed : 0.480184308 (s) : \\b\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\b
7440 : failed : unparsable : 0 (s) : Please check your regex.
7441 : failed : failed : 0.767850797 (s) : ^[+-]?\\d+(\\.\\d+)?$
7442 : unparsable : unparsable : 0.072905669 (s) : /^[+-]?(\\d+
7443 : failed : failed : 0.712426973 (s) : r'-?\\d+\\.\\d*\\^\\d+'
7444 : failed : failed : 0.910686203 (s) : ^[+-]?[0-9]*\\.[0-9]*e[+-]?[0-9]*$
7445 : failed : failed : 0.361559948 (s) : ^\\d+\\.\\d+e[+-]\\d+$
7446 : failed : unparsable : 0 (s) : Please check your regex.
7447 : failed : failed : 0.291447329 (s) : ^\\d+\\.\\d+e[+-]\\d+$
7448 : failed : failed : 0.151055659 (s) : ^[+-]?[0-9]*\\.?[0-9]*[eE][+-]?[0-9]*[fF][+-]?[0-9]+$
7449 : failed : failed : 7.768821247 (s) : ^[+-]?[0-9]*(\\.\\d*)?[Ee][+-]?\\d+$
7450 : failed : failed : 2.366811537 (s) : ^[-\\d.]+e[+-\\d0-9]+$
7451 : failed : failed : 1.117089954 (s) : [a-zA-Z]\\w+
7452 : failed : failed : 0.16755812 (s) : /[A-Z]{1}\\s[0-9]{1}\\s[a-z]{1}/gi  3. Create a RegEx to match passwords that have a length of 8 characters and contain at least one uppercase letter and one lowercase letter.  Answ
7453 : failed : failed : 0.772346285 (s) : \\d+\\s+\\w+\\s+\\d+
7454 : unparsable : unparsable : 0.058437196 (s) : +
7455 : failed : failed : 0.172437768 (s) : ^[a-zA-Z0-9\\,\\.]*$
7456 : failed : failed : 0.341267018 (s) : ^\\s*\\w+\\s*$
7457 : failed : pumping failed : 33.339185237 (s) : (?i)(?=.*[aeiou])(?=.*[bcdfghjklmnpqrstvwxyz])(?=.*[-_])
7458 : failed : failed : 0.503790492 (s) : ^\\w+$
7459 : failed : failed : 0.258135742 (s) : \\d{3}-\\d{2}-\\d{4}
7460 : unparsable : unparsable : 0.067130434 (s) : ?[1-9]\\d*|0
7461 : failed : failed : 8.895029595 (s) : ~[a-zA-Z0-9.]{1,8}$
7462 : failed : failed : 0.160264343 (s) : [a-zA-Z](?![a-zA-Z])*
7463 : failed : failed : 20.330661308 (s) : ([A-Za-z]{1,4}|[A-Z]{1,4}\\.){1,4}|([A-Z]{1,4}\\.){1,4}
7464 : failed : failed : 242.83623724 (s) : [a-zA-Z](?!.*[.])(?!.*[.])(?!.*[.])[a-zA-Z]
7465 : failed : failed : 4.205621647 (s) : ^[a-zA-Z0-9.?!]*$
7466 : failed : failed : 1.224369119 (s) : \\w{1,4}\\.[a-zA-Z]\\w{1,4}
7467 : failed : failed : 0.13793547 (s) : ^[A-Za-z]
7468 : unparsable : unparsable : 0.086907097 (s) : (1[a-zA-Z]|2[0-3]\\d|\\d|\\d\\d|\\d\\d\\d|\\d\\d\\d-\\d\\d|\\d\\d\\d?-\\d\\d)([a-zA-Z]|2[0-3]\\d|\\d|\\d
7469 : failed : failed : 18.575327452 (s) : ^[A-Za-z]+[0-9][A-Za-z0-9]*[.]
7470 : unparsable : unparsable : 0.084755369 (s) : (?=\\\\S+)?([a-z0-9\\.\\-\\.\\\\_\\\\?\\\\+\\\\!\\\\&\\\\@\\\\#\\\\$\\\\%\\\\^\\\\*\\\\(\\\\)\\\\-\\\\\\|\\\\\\\u201d\\\\\\\u201c\\\\\\\u201d\\\\\\'\\\\\\\"\\\\\\!\\\\\\?\\\\\\&\\\\\\@\\\\#\\\\$\\\\%\\\\
7471 : unparsable : unparsable : 0.088441852 (s) : \\b(?([0-9a-f]+)([a-zA-Z]\\w*?)
7472 : unparsable : unparsable : 0.07773938 (s) : [^\\s\\
7473 : failed : failed : 0.83265699 (s) : [a-zA-Z0-9\\W_]*[a-zA-Z0-9]
7474 : unparsable : unparsable : 0.099808937 (s) : (?<![A-Za-z0
7475 : failed : failed : 0.152829781 (s) : grep -i '
7476 : failed : failed : 3.253038008 (s) : [0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
7477 : unparsable : unparsable : 0.113950908 (s) : ^(
7478 : unparsable : unparsable : 0.084472409 (s) : ^[0-9a-fA-F]{1,24};[0-9a-fA-F]{1,2
7479 : failed : failed : 2.710678274 (s) : \\A
7480 : unparsable : unparsable : 0.075410319 (s) : (with Per
7481 : failed : failed : 1.564751571 (s) : [0-9]{4}[0-9][0-9][0-9][0-9]+
7482 : unparsable : unparsable : 0.114322264 (s) : ^(?P<CC>[0-9]{15}[0-9]\\.[0-9]{7}[0-9]\\.[0-9]{6}).*$
7483 : failed : failed : 5.880811208 (s) : [^0-9]9792
7484 : failed : failed : 7.912633922 (s) : [^\\d]{16}-?[^\\d]{9}
7485 : unparsable : unparsable : 0.136973199 (s) : r\"^\\d{4}-19-\\d{4},\\s+(?P<cardNumber>\\d{16}\\s?)$\"
7486 : failed : failed : 0.628599523 (s) : ([9792])(\\d{15})
7487 : failed : failed : 0.18444425 (s) : ^[0-9]{9}$
7488 : unparsable : unparsable : 0.075281689 (s) : [^\\d{0,1}]\\d{1,2}[^\\d{0,1}]\\d{1,2}[^\\d{0,1}]\\d{1,2}[^\\d{0,1}]\\d{1,2}[^\\d{0,1}]\\d{1,2}[^\\d{0,1}]\\d{1,2
7489 : failed : failed : 0.774002777 (s) : \\b\\d{9}(-\\d{4})?\\b
7490 : failed : failed : 0.809046769 (s) : (\\d{4})(\\d{2}) (\\d{4}) (\\d{4}) ({0})/{1}/{2}
7491 : failed : failed : 1.383018178 (s) : Yes|YES|Yes|YES|YES|YES|NO|NO|NO|NO
7492 : failed : failed : 39.921881918 (s) : ^(?!.*(no|nO))[a-z0-9]+(yes|yEs|yeS)?$
7493 : failed : failed : 0.144333672 (s) : /^
7494 : unparsable : unparsable : 0.059301274 (s) : (^|\\\\s)(\\\\(?YES\\\\)|\\\\(?YES\\\\)|\\\\(?YES\\\\)|\\\\(?YES\\\\)|\\\\(?YES\\\\)|\\\\(?YES\\\\)|\\\\(?YES\\\\)|\\\\(?YES\\\\)|\\\\(?YES\\\\)|\\\\(?YES\\\\)|\\\\(?YES\\\\)|\\\\(?YES\\\\)|\\\\(?YES\\\\)|
7495 : failed : failed : 4.175822086 (s) : (?<=NO)(?=YES|yE|yeS|YES|nO)
7496 : failed : failed : 3.244814329 (s) : ([^aA]*)([aA])
7497 : unparsable : unparsable : 0.145448219 (s) : (?i)(\\S?
7498 : unparsable : unparsable : 0.074872071 (s) : (YES|yes|Yes|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES|YES
7499 : failed : error init : 0.109979812 (s) : (?<![a-zA-Z0-9-_\\.])
7500 : failed : failed : 0.304251886 (s) : This regex will match below values only YESYESyEsyeSYESYESYEsyEsyeSnOGenerate a RegEx for this description.
7501 : failed : failed : 0.21051547 (s) : (^[0-9]{2}(\\\\d{1}[0-9]{1}[0-9]{0}|\\\\d{1}[1-9]{1})\\\\d{8}$)
7502 : failed : failed : 1.188659451 (s) : [0-9]{1,2}[0-9]{1,2}[0-9]{1,8}
7503 : failed : failed : 0.283032813 (s) : (^[01]{2}[0-9]{3}[0-9]{8}$)
7504 : failed : failed : 13.591465484 (s) : 0[1-9][012]|1[012][0-9]|2[0-5][0-9]|5[0-9](5[0-9])+ is a RegEx that matches the string that contains more than one number that follows every character.
7505 : failed : failed : 0.636562072 (s) : ([0-9]{3})\.([0-9]{2})\.([0-9]{2})\.([0-9]{6})
7506 : failed : failed : 0.174320864 (s) : ^[1][0-9]{2}\\d{8}$
7507 : failed : failed : 0.137455211 (s) : ^\\d{3}\\s\\d{2}\\s\\d{4}$
7508 : failed : failed : 0.141419655 (s) : ^[01][0-9]{8} [0-9]
7509 : unparsable : unparsable : 0.077943824 (s) : ^(?=\\d{3})(?=
7510 : failed : failed : 0.549222956 (s) : (0[1-9]|1[012])[08]{9}
7511 : unparsable : unparsable : 0.085070989 (s) : (n>=1)^{n}
7512 : failed : failed : 0.15262077 (s) : ^[0-9]{1,2}\\d{1,2}$
7513 : unparsable : unparsable : 0.081923946 (s) : (\\d+)#include <regex>using namespace std;int main(){   string t;   cin>>t;   regex re(\"(\"+t+\")\\\\d+\");   smatch sm;   if(regex_match(t, sm, re)){      cout<<sm[1]<<endl;   }   return 0;}
7514 : failed : failed : 1.680024215 (s) : \\d+
7515 : failed : failed : 0.66249308 (s) : \\d+
7516 : failed : failed : 2.523574963 (s) : [0-9]+
7517 : failed : failed : 0.402113236 (s) : Positive integer (1-9) digit(s) and optionally a hyphen.
7518 : failed : failed : 1.594785531 (s) : ^([0-9]+)([Mm])([Ss])([Hh][Mm][Ss]?)?$
7519 : failed : pumping failed : 96.709915156 (s) : [0-9]{3,}\\b
7520 : failed : failed : 0.196184274 (s) : $number = '12'; $regex = '(^|[^0-9])[1-9]$'; preg_match($regex, $number);
7521 : unparsable : unparsable : 0.060781707 (s) : ^(03)([0-9]{3}[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]|[0-9])([0-9]{3}[0-9]{3}[0-9]{3}[0-9]{2}[0-9]
7522 : failed : failed : 1.802855563 (s) : .\\d{11}
7523 : failed : failed : 0.156822156 (s) : ^03\\d{11}$
7524 : failed : failed : 0.703776825 (s) : ^03\\d{11}$
7525 : failed : failed : 2.407188505 (s) : 03[\\d\\s]{4}$
7526 : failed : failed : 0.504021735 (s) : \\d{3}[-.]\\d{3}[-.]\\d{3}[-.]\\d{3}
7527 : failed : failed : 1.508915686 (s) : .00[0-9]{10}
7528 : failed : failed : 1.090111856 (s) : (03)[0-9]{7}
7529 : failed : failed : 2.090835859 (s) : (03\\d\\d\\d\\d)\\d{9}
7530 : unparsable : unparsable : 0.058439661 (s) : 03*********
7531 : failed : unparsable : 0 (s) : Please check your regex.
7532 : failed : unparsable : 0 (s) : Please check your regex.
7533 : failed : unparsable : 0 (s) : Please check your regex.
7534 : failed : unparsable : 0 (s) : Please check your regex.
7535 : failed : unparsable : 0 (s) : Please check your regex.
7536 : unparsable : unparsable : 0.080666712 (s) : [
7537 : failed : unparsable : 0 (s) : Please check your regex.
7538 : failed : unparsable : 0 (s) : Please check your regex.
7539 : unparsable : unparsable : 0.085246037 (s) : (
7540 : unparsable : unparsable : 0.068882656 (s) : ([
7541 : failed : failed : 0.730578093 (s) : ^\\d{3}[4-6]\\d{3}[7-9]\\d$
7542 : unparsable : unparsable : 0.069379396 (s) : [0-9]{6}[\\,](0+[0-9]{5},\\+0[0-9]{5}|1[0-9]{6},\\+1[0-9]{5}|2[0-9]
7543 : unparsable : unparsable : 0.083427682 (s) : /^([1-9][0-9]{0,3}|[4-9][0-9]{0,2}|[5-9][0-9]{0,1}|[7]))[0-9]{2}$
7544 : failed : unparsable : 0 (s) : Please check your regex.
7545 : failed : failed : 0.325832768 (s) : \\d(3|4|5|6|7|8|9)0{9,12}
7546 : failed : failed : 0.239156522 (s) : ^[3-9]\\d{0,2}(\\,|\\s)?\\d{5}(\\.\\d+)?$
7547 : failed : failed : 0.286103712 (s) : ^3[46].{1,7}[1-9][0-9] {6}$
7548 : failed : failed : 0.450678948 (s) : \\b\\d{3}[456]\\d{3}[4567]\\d{7}\\b
7549 : failed : failed : 1.266987324 (s) : 1. ^
7550 : failed : failed : 0.309004856 (s) : ^([3-9][0-9]{0,1})[5,7]\\d{6}$
7551 : failed : failed : 2.628658517 (s) : \\s
7552 : failed : failed : 3.506461356 (s) : .*[^_]*
7553 : failed : pumping failed : 26.739709175 (s) : .*H.*|.*S.*|.*n.*
7554 : unparsable : unparsable : 0.077345874 (s) : ^ *(.+?) \\(+(.+?)\\)$
7555 : unparsable : unparsable : 0.06152557 (s) : ^[^_\\[\\]\\-\\(\\)\\/\\{\\}
7556 : failed : failed : 0.137971758 (s) : A snake in the grass
7557 : failed : failed : 0.623826615 (s) : \\bS\\w*H[\\w\\s]*
7558 : failed : pumping failed : 88.614627486 (s) : [a-zA-Z0-9]*\\s*[a-zA-Z][a-zA-Z0-9]*What is the best RegEx for describing a phone number in the format 
7559 : failed : failed : 0.135994867 (s) : \\bsnake\\b
7560 : failed : failed : 0.286879516 (s) : (snake is followed by a space) + snake (one or more times)No
7561 : failed : failed : 0.146376918 (s) : 0-9 - [a-zA-Z0-9]
7562 : failed : failed : 16.965630578 (s) : \\b[^\\w\\s]*ing\\b
7563 : unparsable : unparsable : 0.097822387 (s) : (?<=\\w*ing\\b)\\w+Explanati
7564 : failed : failed : 6.24650169 (s) : [i].*ing$I tried to include \"ing\" at the end (if not it was to the end of the word), but it wouldn't work.
7565 : failed : timeout : 600 (s) : .*ing$
7566 : failed : error init : 0.139245383 (s) : (.*?)
7567 : failed : unparsable : 0 (s) : Please check your regex.
7568 : unparsable : unparsable : 0.083760906 (s) : [^b\\s\\.,!\\?
7569 : failed : failed : 0.117366074 (s) : ^\\w*ing$
7570 : failed : failed : 0.199028961 (s) : [a-zA-Z]{15,30}or[A-Z]{3,29}or[a-z]{3,28}or[A-Z]{4,25}or[a-z]{6,23}and use this RegEx in javascript-like code to match words that do not begin with the
7571 : failed : failed : 4.843975875 (s) : [a-zA-Z0-9-_=]+
7572 : failed : failed : 0.180317213 (s) : ^[A-F0-9]{1,5}$
7573 : failed : failed : 0.139584128 (s) : ^(?![\\dA-F0-9])([a-fA-F][\\dA-F0-9])*$Thanks for your help!
7574 : failed : failed : 16.677549363 (s) : [^\\x00-\\x7F][A-Z\\d]+
7575 : failed : error init : 0.080362954 (s) : ^
7576 : failed : failed : 0.498926373 (s) : [\\w-]{2,}
7577 : unparsable : unparsable : 0.082923689 (s) : [A-Z0-9\\s\\-_]{5}\\s[A-Z0-9\\s\\-_]{5}\\s[A-Z0-9\\s\\-_]{5}\\s[A-Z0-9\\s\\-_]{5}\\s[A-Z0-9\\s\\-_]{5}\\s[A-Z0
7578 : failed : failed : 0.585330018 (s) : ^[a-fA-F0-9]+([-_ ]?[a-fA-F0-9]+)*$
7579 : failed : failed : 22.21067339 (s) : ^[A-Za-z0-9._-]+@([A-Za-z0-9.-]+\\.[A-Z|a-z]{2,})$
7580 : unparsable : unparsable : 0.111126479 (s) : (spam) ^(\\s|
7581 : failed : failed : 1.928856806 (s) : (\\d{2}\\.\\d{2}\\.\\d{4})
7582 : failed : failed : 1.162737161 (s) : (?i)(?<PESEL>\\d{5})
7583 : unparsable : unparsable : 0.074965957 (s) : ^(?P<nkpemidnim>\\d{2})
7584 : failed : failed : 3.71725675 (s) : (0{1,2}[a-zA-Z]{1,2}[0-9]?){2}
7585 : failed : failed : 4.146096592 (s) : [\\d]{1,2}[-\\s][\\d]{1,2}[-\\s][\\d]{1,2}[-\\s][\\d]{1,2}[-\\s][\\d]{1,2}
7586 : failed : failed : 0.652670607 (s) : (\\d{4}-\\d{2}-\\d{2})-([a-zA-Z]\\d{3})
7587 : failed : failed : 0.162079592 (s) : PESEL
7588 : failed : failed : 0.157109355 (s) : PESEL\\d{6}\\d{2}
7589 : failed : failed : 0.983063533 (s) : ^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[\\.,_\\-\\()].*$)
7590 : failed : failed : 0.646312771 (s) : r'^[0-9]{9}[0-9]{2}$'
7591 : failed : failed : 3.012819998 (s) : \\b(0?1)([1-9][0-9]?)\\b|\\b(0?1)([1-9][0-9]?)\\b(20)\\b
7592 : failed : failed : 0.537672758 (s) : \\d{4}-\\d{2}-\\d{2}
7593 : failed : failed : 0.349308657 (s) : (Regex) \\b20\\d\\d\\d-\\d\\d-\\d\\d\\b
7594 : failed : failed : 0.172835051 (s) : ^[1-9][0-9]?[0-9][0-9][0-9]?[0-9][0-9]$
7595 : failed : failed : 3.879926617 (s) : (2020|2021|2022|2023|2024|2025|2026|2027|2028 |2029 |2030 |2031 |2032 |2033 |2034 |2035 |2036 |2037 |2038 |2039)
7596 : failed : failed : 0.152721748 (s) : ^\\s*
7597 : failed : failed : 0.585746398 (s) : \\d{4}\\-\\d{2}\\-\\d{2}
7598 : failed : failed : 0.886517296 (s) : \\d{4}-(\\d{2}?)00
7599 : failed : failed : 0.666884934 (s) : ^[a-z0-9]+[_-][0-9]{1,2}$
7600 : failed : failed : 1.151417444 (s) : [Y-Y]?[0-9][0-9][0-9][0-9][0-9].
7601 : failed : failed : 29.571472306 (s) : [0-9]{5}[^0-9]{5,10}
7602 : unparsable : unparsable : 0.089922584 (s) : (?=
7603 : unparsable : unparsable : 0.067873676 (s) : (?=(.*?)
7604 : failed : failed : 2.17917067 (s) : (?<!\\d){5,10} - it will be 5-10 digits. But we don't want to capture it in Group.We don't want to capture it in Group and it will be not Group 1 or 2.
7605 : unparsable : unparsable : 0.117434441 (s) : {5[^5]}{5,10}
7606 : failed : timeout : 600 (s) : 0(?=.*[5])([3-9]{10})(?=.*[5])|(?=.*[0])([3-9]{10})(?=.*[0])
7607 : failed : unparsable : 0 (s) : Please check your regex.
7608 : unparsable : unparsable : 0.074635448 (s) : [0-9]{min}[5-9]{min}[0-9]{min}[0-9]{min}[0-9]{min}[0-9]{min}[0-9]{min}[0-9]{min}[0-9]{min}[0-9]{min}[0-9]{min}[0-
7609 : failed : failed : 5.037301947 (s) : \\d{1,10}[5,]\\d{1,10}
7610 : failed : failed : 0.345111859 (s) : [0-9]{1,5}[05]([0-9]{0,4})          [0-9]{0,4}([05])          [0-9]{0,4}([05])          [0-9]{0,4}([05])*          [0-9]{0,4}([05])*          [0-9]
7611 : failed : failed : 1.914152371 (s) : ~(0[1-9][0-9]|0[9]?)\\s[A-D]\\s
7612 : failed : failed : 1.049176322 (s) : ^[A-D]{2}$
7613 : failed : failed : 1.307784809 (s) : ^\\d{1,3}[a-d]$
7614 : failed : failed : 0.188472874 (s) : ^[A-D]+/[A-D]{2}[0-9]*$
7615 : failed : failed : 0.381527328 (s) : htt
7616 : failed : failed : 0.584468315 (s) : ^\\d + ([A-D])+$
7617 : failed : failed : 13.102733821 (s) : (?<![\\w-])(?<![\\w\\w])[A-N][\\w-](?<![\\w\\w])[0-9]
7618 : failed : error init : 0.088219144 (s) : (?i)
7619 : failed : failed : 0.141349444 (s) : ^([0-9])[a-d]*$
7620 : failed : failed : 0.102219491 (s) : ^[A-D][0-9]{3}[A-D]$